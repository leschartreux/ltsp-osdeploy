#!/bin/sh



## Copyright (c) 2003-2013 Tissoires Jean-François & Benjamin, jftissoires@gmail.com
## Cdrom Outil Système Complet d'Assistance Réseau: OSCAR
## Ce programme est sous Licence Publique Générale GNU publiée par la Free Software Foundation.

PATH="/usr/share/oscar/bin:$PATH"
if ( test -e /usr/share/oscar/usr/choix_langue )
then
	choix_langue=`cat /usr/share/oscar/usr/choix_langue`
else
	echo "fr" > /usr/share/oscar/usr/choix_langue
	choix_langue=fr
	traduction
fi
chemin_langue=/usr/share/oscar/usr/langue/$choix_langue

#----------------------------------------------------------------------------------------------------
#	variables:
#
#	/mnt/serveur_partage			serveurs trouve sur le reseau monte sur le poste
#	# $ip_serveur_nfs":/mnt/partage_nfs/tmp	sur le serveur trouve monte sur /mnt/serveur_partage
#	$ip_serveur_nfs":$tftpboot_partage	sur le serveur trouve monte sur /mnt/serveur_partage
#	
#	# /mnt/partage_nfs/tmp/serveurs_lances	contient /tmp/temp_avahi aussi /etc/conf.d/oscar.conf
#	$tftpboot_partage/serveurs_lances	contient /tmp/temp_avahi aussi /etc/conf.d/oscar.conf
#	
#	/tmp/serveur_oscar_nfs	fichier des serveurs releve par udp-receiver -f /tmp/serveur_oscar_nfs
#	/tmp/temp_avahi		fichier des serveurs deja sur le reseau
#	/etc/conf.d/oscar.conf	lancer avec udp-sender -f /etc/conf.d/oscar.conf par daemeon_oscar
#	
#	dans le fichier /tmp/temp_avahi1 les ip synchrone
#	dans le fichier /tmp/temp_avahi l'ip , synchrone ou asynchrone suivi de , et table ou disque ,
#	
#-----------------------------------------------------------------------------------------------------
serveur()
{
cp -f /etc/avahi/services_oscar/ssh.service /etc/avahi/services/nfs.service

echo "perl -pi -e 's/\%h/NFS Transfert_OSCAR \%h/g; s/_ssh._tcp/_nfs._tcp/g; s/<port>22<\/port>/<port>2049<\/port>
    <txt-record>`cat /tmp/mode_transfert`$ip_installe<\/txt-record>/g;' /etc/avahi/services/nfs.service" > /tmp/exec_nom
chmod +x /tmp/exec_nom
/tmp/exec_nom
rm -f /tmp/mode_transfert
rm -f /tmp/exec_nom
}
#-----------------------------------------------------------------------------------------------------
montage_nfs_avec_controle()
{
tftpboot_partage=`cat /tmp/partage_tftpboot_serveur 2>/dev/null`
test_reseau_nfs=$?	# /tmp/partage_tftpboot_serveur n'existe pas
if [ "$client_avahi_lance" = oui ]
then
	if [ "$test_reseau_nfs" != 0 ]
	then
		echo
		echo -e "\033[1;31m  `cat $chemin_langue/menu_665a`"
		echo
		if ! ( test -e /etc/avahi/oscar_avahi )
		then
			echo -e " `cat $chemin_langue/boucle_2`"
			read p
		fi
		lancer_avahi client
		return
	fi
fi
mount "$ip_serveur_nfs":$tftpboot_partage /mnt/serveur_partage 1>/dev/null 2>/dev/null
sleep 4

grep -ci "/mnt/serveur_partage" /etc/mtab > /tmp/test_deja_monte_nfs
test_deja_monte_nfs=`cat /tmp/test_deja_monte_nfs`
rm -f /tmp/test_deja_monte_nfs
if [ "$test_deja_monte_nfs" = "0" ]
then
	montage_nfs_avec_controle
	return
	#	echo
	#	echo -e "\033[1;31m  `cat $chemin_langue/menu_665a`"
	#	echo
	#	echo -e "  `cat $chemin_langue/boucle_2`"
	#	read p
	#	exit
else
	return
fi
}
#-----------------------------------------------------------------------------------------------------
donner_valeur_ip_serveur_nfs()
{
cp -f /tmp/serveur_oscar_nfs /tmp/temp_avahi
cut -d "," -f1 /tmp/serveur_oscar_nfs > /tmp/temp_ip_serveur_nfs
	
cp -f /tmp/temp_ip_serveur_nfs /tmp/temp_doublons_a_supprimer
enlever_les_doublons
cp -f /tmp/doublons_supprimes /tmp/temp_ip_serveur_nfs
rm -f /tmp/doublons_supprimes

grep -ci "synchrone" /tmp/temp_ip_serveur_nfs > /tmp/temp_nombre_serveurs
valeur=`cat /tmp/temp_nombre_serveurs`
rm -f /tmp/temp_nombre_serveurs

#if ! [ "$valeur" = "1" ]
#then
	cp -f /tmp/serveur_oscar_nfs /tmp/temp_avahi
#	demander_le_bon_serveur
	cp -f /tmp/temp_avahi /tmp/temp_ip_serveur_nfs1
	cut -d "," -f1 /tmp/temp_ip_serveur_nfs1 > /tmp/temp_ip_serveur_nfs
	rm -f /tmp/temp_ip_serveur_nfs1
#	bon_serveur_deja_demande=oui
#fi

ip_serveur_nfs=`cat /tmp/temp_ip_serveur_nfs`
}
#-----------------------------------------------------------------------------------------------------
donne_fichiers_ip_serveurs()
{
if ! ( test -e /mnt/serveur_partage )
then
	mkdir /mnt/serveur_partage
fi


if ( test -e /tmp/serveur_oscar_nfs )	# pas le premier serveur
then
	cp -f /tmp/serveur_oscar_nfs /tmp/temp_doublons_a_supprimer
	enlever_les_doublons
	cp -f /tmp/doublons_supprimes /tmp/serveur_oscar_nfs
	rm -f /tmp/doublons_supprimes

	table_ou_disque=non
	cut -d "," -f3 /tmp/serveur_oscar_nfs > /tmp/client_table_ou_disque
	if ( test -e /tmp/client_table_ou_disque )
	then
		client_table_ou_disque=`cat /tmp/client_table_ou_disque`
		rm -f /tmp/client_table_ou_disque
		if [ "$client_table_ou_disque" = "table" ] || [ "$client_table_ou_disque" = "disque" ]
		then
			table_ou_disque=oui
		fi
	fi
	# donner le repertoire partage du serveur:
	cut -d ";" -f2 /tmp/serveur_oscar_nfs > /tmp/partage_tftpboot_serveur
	
	donner_valeur_ip_serveur_nfs
	
	# ip_mcast_rdv :
	cut -d"." -f2-8 /tmp/temp_ip_serveur_nfs > /tmp/temp_ip_mcast_rdv
	echo "233.`cat /tmp/temp_ip_mcast_rdv`" > /tmp/ip_mcast_rdv
	rm -f /tmp/temp_ip_mcast_rdv
	if [ "$table_ou_disque" = "non" ]
	then
		# si plusieurs serveur demander le bon
		/etc/init.d/nfs restart 1>/dev/null 2>/dev/null
		montage_nfs_avec_controle
	fi
fi
if ! ( test -e /tmp/temp_avahi )
then
	if ( test -e /tmp/serveur_oscar_nfs ) # n existe pas pour le serveur
	then
		cp -f /tmp/serveur_oscar_nfs /tmp/temp_avahi
	fi
fi

if ( test -e /mnt/serveur_partage/serveurs_lances )	# cas du premier serveur lance jamais pour table ou disque
then
	cp -f /mnt/serveur_partage/serveurs_lances /tmp/temp_avahi
	rm -f /tmp/serveur_oscar_nfs
	
	cp -f /tmp/temp_avahi /tmp/temp_doublons_a_supprimer
	enlever_les_doublons
	cp -f /tmp/doublons_supprimes /tmp/temp_avahi
	rm -f /tmp/doublons_supprimes
	
	grep -ci "synchrone" /tmp/temp_avahi > /tmp/temp_nombre_serveurs
	valeur=`cat /tmp/temp_nombre_serveurs`
	rm -f /tmp/temp_nombre_serveurs
	cut -d"," -f1 /tmp/temp_avahi > /tmp/temp_avahi1
fi

if [ "$table_ou_disque" = "oui" ]
then
	valeur=1 # ne pas verifier plusieurs serveurs si table ou disque
	if ( test -e /tmp/serveur_oscar_nfs )
	then
		cp -f /tmp/serveur_oscar_nfs /tmp/temp_avahi
	fi
fi

# dans le fichier /tmp/temp_avahi1 les ip synchrone
# dans le fichier /tmp/temp_avahi l'ip , synchrone ou asynchrone suivi de , et table ou disque ,
}
#-----------------------------------------------------------------------------------------------------
oscar_scrute_net_serveur()
{
/etc/init.d/nfs restart 1>/dev/null 2>/dev/null
rm -f /tmp/serveur_oscar_nfs
udp-receiver -f /tmp/serveur_oscar_nfs --nokbd --interface `cat /tmp/carte_ethi` --start-timeout 8 2>/dev/null
donne_fichiers_ip_serveurs
}
#-----------------------------------------------------------------------------------------------------
oscar_scrute_net_client()
{
rm -f /tmp/serveur_oscar_nfs
nohup daemon_oscar client 2>/dev/null	# dans /tmp/serveur_oscar_nfs le serveur d'ip 192.168.0.100 donne : 192.168.0.100,asynchrone,
rm -f nohup.out


if ! ( test -e /tmp/serveur_oscar_nfs )
then
	oscar_scrute_net_client
else
	grep -ci "synchrone" /tmp/serveur_oscar_nfs > /tmp/test_serveur_oscar_nfs
	test_serveur_oscar_nfs=`cat /tmp/test_serveur_oscar_nfs`
	rm -f /tmp/test_serveur_oscar_nfs
	grep -ci ";" /tmp/serveur_oscar_nfs > /tmp/test_serveur_oscar_nfs
	test_serveur_nfs_point_virgule=`cat /tmp/test_serveur_oscar_nfs`
	rm -f /tmp/test_serveur_oscar_nfs
	if [ "$test_serveur_oscar_nfs" = "0" ] || [ "$test_serveur_nfs_point_virgule" = "0" ]	# fichier vide
	then
		oscar_scrute_net_client
	fi
fi
}
#-----------------------------------------------------------------------------------------------------
scruter_reseau_avec_avahi()
{
avahi-browse -a -t -l -r --domain=local > /tmp/temp_avahi
#avahi-browse -a -t -l -r --domain=local > /tmp/temp_avahi
grep -i -A 4 "Transfert_OSCAR" /tmp/temp_avahi | grep -i -1 "2049" | grep -v "2049" | grep -v "\-\-" > /tmp/temp_avahi1
cut -d"[" -f2 /tmp/temp_avahi1 > /tmp/temp_avahi
perl -pi -e 's/ //g; s/\"//g; s/]//g;' /tmp/temp_avahi
grep -ci "synchrone" /tmp/temp_avahi > /tmp/temp_nombre_serveurs

# grep -v "synchrone" /tmp/temp_avahi > /tmp/temp_avahi1	# les ip des serveurs
grep -i "synchrone" /tmp/temp_avahi > /tmp/temp_avahi2	# les ip des serveurs
cp -f /tmp/temp_avahi2 /tmp/temp_avahi

cut -d"," -f2 /tmp/temp_avahi2 > /tmp/temp_avahi1
rm -f /tmp/temp_avahi2
valeur=`cat /tmp/temp_nombre_serveurs`
rm -f /tmp/temp_nombre_serveurs
 # dans le fichier /tmp/temp_avahi1 les ip
 # dans le fichier /tmp/temp_avahi l'ip , synchrone ou asynchrone suivi de , et table ou disque ,
}
#-----------------------------------------------------------------------------------------------------
boite_info_impaire()
{
	return
cut -d"." -f3 /usr/share/oscar/usr/numero_version_oscar > /tmp/valeur_temp
valeur_temp=`cat /tmp/valeur_temp`
valeur_temp1=`expr substr $valeur_temp 1 1`
rm -f /tmp/valeur_temp
case $valeur_temp1 in
	0) return ;;
	2) return ;;
	4) return ;;
	6) return ;;
	8) return ;;
esac
particul_impaire=" \Zb\Z1`cat $chemin_langue/maximum` : \Zb\Z12 \Zb\Z1`cat $chemin_langue/clients`"
}
#-----------------------------------------------------------------------------------------------------
attendre_serveur_connecte()
{
sleep 2
scruter_reseau_avec_avahi
if [ "$valeur" = "0" ]
then
	attendre_serveur_connecte
	return
fi
}
#-----------------------------------------------------------------------------------------------------
boite_info_continuer()
{
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title " `cat $chemin_langue/Information` " \
	--msgbox "\n\Z1\Zb`cat $chemin_langue/msgbox_78a` ...\Zn " 14 55
}
#-----------------------------------------------------------------------------------------------------
demander_le_bon_serveur()
{
if ! ( test -e /tmp/temp_avahi )
then
	cp -f /tmp/serveur_oscar_nfs /tmp/temp_avahi
fi
if [ "$bon_serveur_deja_demande" = "oui" ]
then
	return
fi
bon_serveur_deja_demande=oui

# enleve les doublons du fichier /tmp/temp_avahi
cp -f /tmp/temp_avahi /tmp/temp_doublons_a_supprimer
enlever_les_doublons
cp -f /tmp/doublons_supprimes /tmp/temp_avahi
rm -f /tmp/doublons_supprimes

if ( test -e /tmp/serveur_nfs_non_premier_synchrone )
then
	return
fi

grep -ci "synchrone" /tmp/temp_avahi > /tmp/nbre_choix_serveurs
nbre_choix_serveurs=`cat /tmp/nbre_choix_serveurs`
rm -f /tmp/nbre_choix_serveurs
if [ "$nbre_choix_serveurs" = "1" ]
then
	return
fi

# demander le serveur:
# boite : Choix deIP de poste serveur
echo " `cat $chemin_langue/selection_15b` " > /tmp/menu_titre
echo "`cat $chemin_langue/selection_17b` : " > /tmp/fichierquestion

echo "8" > /tmp/hauteur
echo "50" > /tmp/largeur
echo "0" > /tmp/position



cut -d"," -f1-2 /tmp/temp_avahi > /tmp/temp_avahi2
perl -pi -e 's/synchrone/synchrone,/g; s/synchrone/SYNCHRONE/g; s/aSYNCHRONE/asynchrone/g;' /tmp/temp_avahi2
awk 'BEGIN { FS="," } { printf ("%0s %15s %20s\n",$1,$2,$3" \\")}' /tmp/temp_avahi2 > /tmp/bozo
rm -f /tmp/temp_avahi2
runme boite_selection_bozo
rm -f /tmp/hauteur
rm -f /tmp/largeur
rm -f /tmp/position
rm -f /tmp/texte

if ( test -e /tmp/sortir )
then
	rm -f /tmp/tempfile
	rm -f /tmp/temp_avahi
	rm -f /tmp/temp_avahi2
	if ( test -e /etc/avahi/services/ssh.service )
	then # avahi emerge
		/etc/init.d/dbus stop 2>/dev/null 1>/dev/null
	fi
	exit 0
fi

# prendre les 2 lignes de IP choisie :
#echo "grep -i -A 1 \"`cat /tmp/tempfile`\" /tmp/temp_avahi > /tmp/temp_avahi2 " > /tmp/exec_nom

# prendre l'IP de la ligne choisie :
echo "grep -i \"`cat /tmp/tempfile`\" /tmp/temp_avahi > /tmp/temp_avahi2 " > /tmp/exec_nom
chmod +x /tmp/exec_nom
/tmp/exec_nom
cp -f /tmp/temp_avahi2 /tmp/temp_avahi



# verifier si serveur choisi est synchrone et aussi asynchrone :

grep -ci "synchrone" /tmp/temp_avahi > /tmp/nbr_modes_choisis_sur_serveur
nbr_modes_choisis_sur_serveur=`cat /tmp/nbr_modes_choisis_sur_serveur`
rm -f /tmp/nbr_modes_choisis_sur_serveur
if [ "$nbr_modes_choisis_sur_serveur" = "2" ]
then # changer l'ordre pour proposer le choix
	cp -f /tmp/tempfile /tmp/temp_ip_choisi
	cut -d"," -f1-2 /tmp/temp_avahi > /tmp/temp_avahi3
	grep -v "asynchrone" /tmp/temp_avahi3 > /tmp/temp_avahi_synchrone
	grep -i "asynchrone" /tmp/temp_avahi3 > /tmp/temp_avahi_asynchrone
	echo "perl -pi -e 's/`cat /tmp/temp_ip_choisi`/IP/g; s/synchrone/`cat /tmp/temp_ip_choisi`/g; s/IP/SYNCHRONE/g;' /tmp/temp_avahi_synchrone
	perl -pi -e 's/`cat /tmp/temp_ip_choisi`/IP/g; s/asynchrone/`cat /tmp/temp_ip_choisi`/g; s/IP/asynchrone/g;' /tmp/temp_avahi_asynchrone
	" > /tmp/exec_nom
	chmod +x /tmp/exec_nom
	/tmp/exec_nom
	rm -f /tmp/exec_nom
	
	cat /tmp/temp_avahi_synchrone > /tmp/temp_avahi_mode
	cat /tmp/temp_avahi_asynchrone >> /tmp/temp_avahi_mode
	rm -f /tmp/temp_avahi_synchrone
	rm -f /tmp/temp_avahi_asynchrone
	
	# boite : Choix deIP de poste serveur
	echo " `cat $chemin_langue/selection_15b` " > /tmp/menu_titre
	echo "`cat $chemin_langue/selection_17b` : " > /tmp/fichierquestion

	echo "8" > /tmp/hauteur
	echo "50" > /tmp/largeur
	echo "0" > /tmp/position
	awk 'BEGIN { FS="," } { printf ("%0s %15s %20s\n",$1,$2,$3" \\")}' /tmp/temp_avahi_mode > /tmp/bozo
	rm -f /tmp/temp_avahi3
	rm -f /tmp/temp_avahi_mode
	runme boite_selection_bozo
	rm -f /tmp/hauteur
	rm -f /tmp/largeur
	rm -f /tmp/position
	rm -f /tmp/texte

	if ( test -e /tmp/sortir )
	then
		rm -f /tmp/tempfile
		rm -f /tmp/temp_avahi2
		rm -f temp_avahi_mode
		if ( test -e /etc/avahi/services/ssh.service )
		then # avahi emerge
			/etc/init.d/dbus stop 2>/dev/null 1>/dev/null
		fi
		exit 0
	fi
	
	# prendre l'IP et le mode de la ligne choisie :
	reponse=`cat /tmp/tempfile`
	if [ "$reponse" = "asynchrone" ]
	then
		grep -i "asynchrone" /tmp/temp_avahi2 > /tmp/temp_avahi
	else
		grep -v "asynchrone" /tmp/temp_avahi2 > /tmp/temp_avahi
	fi
	
	
fi

rm -f /tmp/temp_avahi2
rm -f /tmp/tempfile
}
#-----------------------------------------------------------------------------------------------------
client()
{
# afficher boite attente serveur avec annuler
echo
if ! [ "$debut_ip_transfert" = "" ]
then
	echo -e "`cat $chemin_langue/texte_39a` $debut_ip_transfert.XXX.YYY ..."
else
	echo -e "`cat $chemin_langue/texte_39a` ..."
fi
echo
if ( test -e /etc/avahi/services/ssh.service )
then # avahi emerge
	scruter_reseau_avec_avahi
	if [ "$valeur" = "0" ]	# impossible si pas avahi emerge
	then
		attendre_serveur_connecte
	fi
else
	oscar_scrute_net_client
	donne_fichiers_ip_serveurs
fi
if ! [ "$valeur" = "1" ]
then
	demander_le_bon_serveur
fi
rm -f /tmp/temp_avahi1

# dans le fichier /tmp/temp_avahi l'ip , synchrone ou asynchrone suivi de , et table ou disque ,
}
#----------------------------------------------------------------------------------------------------
recherche_installe_IP()
{
##### recherche d'une adresse ip sur le poste:
	rm -f /tmp/carte_ethi
	runme recuperer_IP	# pour verifier ip fixe donne par OSCAR sur eth0
	if ( test -e /tmp/sortir )
	then
		exit 0
	fi
##### l'ip est dans le fichier ip_installe_poste
ip_installe=`cat ip_installe_poste`
if [ "$ip_installe" = "" ]
then
	runme lancer_dhcp
	if ( test -e /tmp/sortir )
	then
		exit 0
	fi
	runme recuperer_IP
	if ( test -e /tmp/sortir )
	then
		exit 0
	fi
	ip_installe=`cat ip_installe_poste`
	if [ "$ip_installe" = "" ]
	then
		if [ "$autoriser_serveur_dhcp" = "oui" ] # serveur
		then
			echo "" > /etc/serveur_dhcp
			echo "" > /tmp/serveur_dhcp_lance
			echo "" > /tmp/pas_info_180_lancer_avahi
			serveur_dhcp
			rm -f /tmp/serveur_dhcp_lance
			if ( test -e /tmp/sortir )
			then
				exit 0
			fi
			ip_installe=`cat ip_installe_poste`
				# si adresse sans serveur dhcp oscar :
				#	echo "192.168.159.254" > ip_installe_poste
				#	echo "255.255.0.0" > /tmp/ip_masque_poste
				#	runme installer_IP
				#	#ifconfig  eth0 192.168.159.254 netmask 255.255.0.0
				#	ip_installe=192.168.159.254
		else	# client
			# boite_info_lancer_un serveur
			runme lancer_dhcp
			ip_installe=`cat ip_installe_poste`
			if [ "$ip_installe" = "" ]
			then
				dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
				--ok-label "`cat $chemin_langue/Continuer`" \
				--title " `cat $chemin_langue/DESOLE` " \
				--msgbox "\n\n\Z1 `cat $chemin_langue/msgbox_78` ...\Zn " 10 65
				echo "" > /tmp/sortir
				exit 0
			fi
		fi
	fi
fi
echo "$ip_installe" > ip_installe_poste
}
#-----------------------------------------------------------------------------------------------------
refuse_serveur_synchrone()
{
	# il y a deja un serveur synchrone sur le reseau
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title " `cat $chemin_langue/DESOLE` " \
	--msgbox "\n\n`cat $chemin_langue/msgbox_2a`\Zn\n\n " 10 61
	rm -f /tmp/temp_avahi
	echo "" > /tmp/sortir
	exit 0
}
#-----------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------
teste_autres_serveurs_sur_reseau()
{
if [ "$serveur_synchrone" = "synchrone" ]
then
	#if ! ( test -e /etc/avahi/services/ssh.service )
	#then  # pas avahi emerge
		# pour autoriser a se voir lui-meme sur le reseau
		echo "grep -v \"`cat ip_installe_poste`\" /tmp/temp_avahi > /tmp/temp_avahi2 " > /tmp/exec_nom
		chmod +x /tmp/exec_nom
		/tmp/exec_nom
	#fi
	grep -ci "synchrone" /tmp/temp_avahi2 > /tmp/temp_nombre_serveurs
	rm -f /tmp/temp_avahi2
	valeur=`cat /tmp/temp_nombre_serveurs`
	rm -f /tmp/temp_nombre_serveurs

	if ! [ "$valeur" = "0" ]	# autre serveur synchrone
	then
		refuse_serveur_synchrone	# refuse tous si deja un
	fi
fi
}
#-----------------------------------------------------------------------------------------------------
demonter_pour_supprimer_serveur_partage_en_securite_ancien()
{
umount /mnt/serveur_partage ; sync # a verifier
if ! ( test -e /mnt/serveur_partage/serveurs_lances )	# verifie si encore monte
then
	if ! ( test -e /mnt/serveur_partage/client_pxe )	# par securite verifie si encore monte
	then
		rm -fR /mnt/serveur_partage
	else
		rm -f /mnt/serveur_partage/serveurs_lances
	fi
else
	rm -f /mnt/serveur_partage/serveurs_lances
fi
}
#-----------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------

if ( test -e /etc/avahi/oscar_avahi )
then
	perl -pi -e 's/use-ipv6=yes/use-ipv6=no/g; s/\#domain-name=local/domain-name=local/g;' /etc/avahi/oscar_avahi
	cp -f /etc/avahi/oscar_avahi /etc/avahi/avahi-daemon.conf
	if ! ( test -e /etc/avahi/services_oscar )
	then
		if ( test -e /etc/avahi/services )
		then
			mv /etc/avahi/services /etc/avahi/services_oscar
			mkdir /etc/avahi/services
		fi
	fi
fi

bon_serveur_deja_demande=
debut_ip_transfert=
if ( test -e ip_installe_poste )
then
	cut -d"." -f1-2 ip_installe_poste > /tmp/temp_transfert
	debut_ip_transfert=`cat /tmp/temp_transfert`
fi
rm -f /tmp/temp_transfert

#  commandes externes de procédures
case "$1" in
	client)
		client_avahi_lance=oui
		## ancien demarrage pxe :
		#grep -i "mode_transfert=" /proc/cmdline > /tmp/test_line	# demarrage serveur_pxe
		#test_line=`cat /tmp/test_line`
		#if [ "$test_line" != "" ]
		#then
		#	perl -pi -e 's/mode_transfert=/{/g;' /tmp/test_line
		#	cut -d"{" -f2 /tmp/test_line > /tmp/test_line1
		#	cut -d" " -f1-2 /tmp/test_line1 > /tmp/temp_mode_transfert
		#	rm -f /tmp/test_line
		#	rm -f /tmp/test_line1
		#	grep -ci "asynchrone" /tmp/temp_mode_transfert > /tmp/nbre_asynchrone
		#	nbre_asynchrone=`cat /tmp/nbre_asynchrone`
		#	rm -f /tmp/nbre_asynchrone
		#	if ! [ "$nbre_asynchrone" = "1" ]	# serveur asynchrone
		#	then
		#		rm -f /tmp/temp_mode_transfert
		#		client_synchrone
		#	else
		#		perl -pi -e 's/ip_serveur=//g;' /tmp/temp_mode_transfert
		#		cut -d" " -f2 /tmp/temp_mode_transfert > /tmp/ip_serveur_synchrone
		#		rm -f /tmp/temp_mode_transfert
		#		client_nfs
		#	fi
		#	exit 0
		#else
			rm -f /tmp/test_line
			particul_impaire=
			if ! ( test -e /etc/avahi/oscar_avahi )
			then
				# boite choix du mode transfer du serveur
				boite_info_impaire
				DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
				--backtitle "`cat /etc/banniere_oscar`" \
				--ok-label "`cat $chemin_langue/Synchrone`" --cancel-label "`cat $chemin_langue/Annuler`" --extra-button --extra-label "`cat $chemin_langue/Asynchrone`" \
				--title " `cat $chemin_langue/Serveur` " \
				--menu "\n \Zb\Z2   `cat $chemin_langue/menu_614a` $particul_impaire \n " 0 0 0 \
				"" " " \
				"" "\Zb`cat $chemin_langue/menu_615` " \
				"" "" \
				"" "\Zb\Z4`cat $chemin_langue/menu_616` :" \
				"" ""
				case $? in
				    0)	sleep 4
				    	boite_info_continuer
					# client_synchrone
				    	;;
				    3)  sleep 4
					boite_info_continuer
					# client_nfs
				    	# return
				    	;;
				    1)	# sleep 4
					echo "" > /tmp/sortir
					# demonter_pour_supprimer_serveur_partage_en_securite_ancien
					exit 0
				    	;;
				    255) # sleep 4  
					echo "" > /tmp/sortir
					# demonter_pour_supprimer_serveur_partage_en_securite_ancien
					exit 0
					;;
				esac
				#exit 0
			fi
			#else
				autoriser_serveur_dhcp=non
				recherche_installe_IP
				if ( test -e /etc/avahi/services/ssh.service )
				then # avahi emerge
					rm -f /var/run/dbus.pid
					rm -f /var/run/avahi-daemon.pid
					rm -f /etc/avahi/services/nfs.service
					/etc/init.d/avahi-daemon restart 2>/dev/null 1>/dev/null
					client
					/etc/init.d/dbus stop 2>/dev/null 1>/dev/null
					grep -ci "asynchrone" /tmp/temp_avahi > /tmp/nbre_asynchrone
				else
					client
					grep -ci "asynchrone" /tmp/temp_avahi > /tmp/nbre_asynchrone
				fi
					
				nbre_asynchrone=`cat /tmp/nbre_asynchrone`
				rm -f /tmp/nbre_asynchrone
				if ! [ "$nbre_asynchrone" = "1" ]	# serveur synchrone
				then
					rm -f /tmp/temp_avahi
					# demonter_pour_supprimer_serveur_partage_en_securite_ancien
					client_synchrone
				else
					# grep -v "synchrone" /tmp/temp_avahi > /tmp/ip_serveur_synchrone	# pour synchrone ou asynchrone
					cut -d"," -f1 /tmp/temp_avahi > /tmp/ip_serveur_synchrone	# pour synchrone ou asynchrone
					rm -f /tmp/temp_avahi
					# demonter_pour_supprimer_serveur_partage_en_securite_ancien
					client_nfs
				fi
				rm -f /tmp/temp_avahi
				exit 0
			#fi
		#fi
	;;
	serveur)
		client_avahi_lance=non
		autoriser_serveur_dhcp=oui
		ip_installe=`cat ip_installe_poste`
		# si synchrone controler en client si serveur synchrone existe
		cut -d"," -f1 /tmp/mode_transfert > /tmp/test_synchrone
		serveur_synchrone=`cat /tmp/test_synchrone`
		rm -f /tmp/test_synchrone
		#	if ! [ "$serveur_synchrone" = "synchrone" ]
		#	then	# recherche ip deja faite dans serveurs synchrones
		#		recherche_installe_IP
		#	fi
		
		# si synchrone controler si table ou disque
		table_ou_disque=non
		if [ "$serveur_synchrone" = "synchrone" ]
		then
			cut -d"," -f2 /tmp/mode_transfert > /tmp/test_table_ou_disque
			test_table_ou_disque=`cat /tmp/test_table_ou_disque`
			rm -f /tmp/test_table_ou_disque
			if [ "$test_table_ou_disque" = "table" ] || [ "$test_table_ou_disque" = "disque" ]
			then
				table_ou_disque=oui
			fi
		fi
		
		if ( test -e /tftpboot/pxelinux.cfg/default )
		then
			echo "perl -pi -e 's/mode_transfert=/rien=/g; s/ip_serveur=/rien=/g; s/cdoscar/cdoscar mode_transfert=$serveur_synchrone ip_serveur=$ip_installe/g;' /tftpboot/pxelinux.cfg/default" > /tmp/exec_nom
	    		chmod +x /tmp/exec_nom
	    		/tmp/exec_nom
	    		rm -f /tmp/exec_nom
		fi
		
		#	if ! ( test -e /etc/avahi/oscar_avahi )
		#	then
		#		#	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
		#		#	--ok-label "`cat $chemin_langue/Continuer`" \
		#		#	--title " `cat $chemin_langue/Information` " \
		#		#	--msgbox "\n`cat $chemin_langue/menu_615a`\n`cat $chemin_langue/menu_615b`\n\Z2http://oscar.crdp-lyon.fr\Zn\Zn\n\n " 10 50
		#		#	sleep 3
		#		exit 0
		#	fi

		if [ "$serveur_synchrone" = "synchrone" ]
		then
			if ( test -e /etc/avahi/services/ssh.service )
			then # avahi emerge
				rm -f /var/run/dbus.pid
				rm -f /var/run/avahi-daemon.pid
				rm -f /etc/avahi/services/nfs.service
				/etc/init.d/avahi-daemon restart 2>/dev/null 1>/dev/null
				echo
				echo -e "`cat $chemin_langue/texte_39a` $debut_ip_transfert.XXX.YYY ..."
				echo
				scruter_reseau_avec_avahi
				sleep 1
				scruter_reseau_avec_avahi
				teste_autres_serveurs_sur_reseau
			else
				echo
				echo -e "`cat $chemin_langue/texte_39a` $debut_ip_transfert.XXX.YYY ..."
				echo
				oscar_scrute_net_serveur
				if ( test -e /mnt/serveur_partage/serveurs_lances )
				then
					teste_autres_serveurs_sur_reseau
				fi
			fi
		else	# serveur asynchrone
			if ! ( test -e /etc/avahi/services/ssh.service )
			then # avahi emerge
				echo "$ip_installe,`cat /tmp/mode_transfert`" > /tmp/temp_oscar.conf	# pour le fichier daemon_oscar
				if ! ( test -e /tmp/serveur_nfs_non_premier_synchrone )
				then
					echo -e "`cat $chemin_langue/texte_39a` $debut_ip_transfert.XXX.YYY ..."
					echo
					oscar_scrute_net_serveur
					if ( test -e /mnt/serveur_partage/serveurs_lances )
					then
						teste_autres_serveurs_sur_reseau
					fi
				######################## ESSAI
				else
					oscar_scrute_net_serveur
					if ( test -e /mnt/serveur_partage/serveurs_lances )
					then
						teste_autres_serveurs_sur_reseau
					fi
				######################## FIN ESSAI
				fi
			fi
		fi
		
		if ( test -e /etc/avahi/services/ssh.service )
		then # avahi emerge
			serveur
			rm -f /var/run/dbus.pid
			rm -f /var/run/avahi-daemon.pid
			/etc/init.d/avahi-daemon restart 2>/dev/null 1>/dev/null
		else
			tftpboot_partage=`cat /tmp/tftpboot_partage`
			
			echo "$ip_installe,`cat /tmp/mode_transfert`;$tftpboot_partage" > /etc/conf.d/oscar.conf
			echo "$ip_installe,`cat /tmp/mode_transfert`;$tftpboot_partage" > /tmp/temp_oscar.conf	# pour le fichier daemon_oscar
			if ( test -e /tmp/temp_avahi )
			then
				grep -v "$ip_installe" /tmp/temp_avahi > /tmp/temp_avahi_2 # enlever si existe deja
				cp -f /tmp/temp_avahi_2 /tmp/temp_avahi
				rm -f /tmp/temp_avahi_2
				cat /tmp/temp_avahi >> /etc/conf.d/oscar.conf
				cp -f /etc/conf.d/oscar.conf /tmp/temp_avahi
			fi
			
			if ( test -e /mnt/serveur_partage )
			then
				# enleve les doublons du fichier /etc/conf.d/oscar.conf
				cp -f /etc/conf.d/oscar.conf /tmp/temp_doublons_a_supprimer
				enlever_les_doublons
				cp -f /tmp/doublons_supprimes /etc/conf.d/oscar.conf
				rm -f /tmp/doublons_supprimes
				
				if ( test -e /tftpboot )
				then
					cp -f /etc/conf.d/oscar.conf $tftpboot_partage/serveurs_lances
				fi
				cp -f /etc/conf.d/oscar.conf /mnt/serveur_partage/serveurs_lances
			fi
			
			# ip_mcast_rdv du serveur :
			cut -d"." -f2-8 ip_installe_poste > /tmp/temp_ip_mcast_rdv
			echo "233.`cat /tmp/temp_ip_mcast_rdv`" > /tmp/ip_mcast_rdv
			rm -f /tmp/temp_ip_mcast_rdv
			
			##################
			#	#if ! ( test -e /etc/daemon_oscar_lance )
			#	#then
			#	#	rm -f /mnt/partage_nfs/tmp/serveurs_lances
			#	#fi
			##################
			
			#if ( test -e /mnt/partage_nfs/tmp/serveurs_lances )	# pas pour le premier serveur en nfs
			#then
			#	#	echo "$ip_installe,`cat /tmp/mode_transfert`" >> /tmp/temp_avahi
			#	#	cp -f /tmp/temp_avahi /mnt/partage_nfs/tmp/serveurs_lances
			#	cp -f /etc/conf.d/oscar.conf /mnt/serveur_partage/serveurs_lances
			#else
			
			#if ! ( test -e /mnt/partage_nfs/tmp/serveurs_lances )	# pas pour le premier serveur en nfs
			#then
				#cp -f /etc/conf.d/oscar.conf /mnt/partage_nfs/tmp/serveurs_lances
				#if [ "$table_ou_disque" = "non" ]
				if [ "$table_ou_disque" = "oui" ]
				then
					if ( test -e /mnt/serveur_partage )
					then
						echo "$ip_installe,`cat /tmp/mode_transfert`;$tftpboot_partage" > /mnt/serveur_partage/serveurs_lances
					fi
					echo "$ip_installe,`cat /tmp/mode_transfert`;$tftpboot_partage" > /etc/conf.d/oscar.conf
				fi
				if ! [ "$serveur_synchrone" = "synchrone" ]
				then	# asynchrone
					if ( test -e /tmp/serveur_nfs_non_premier_synchrone )
					then
						# nohup
						echo "asynchrone" > /tmp/chrono_procedure
						daemon_oscar start 2>/dev/null
						rm -f nohup.out
					fi
				else	# synchrone
					echo "synchrone" > /tmp/chrono_procedure
					daemon_oscar start # 2>/dev/null
				fi
			#fi
			rm -f /tmp/temp_avahi
		fi
		exit 0
	;;
	recherche_installe_IP)
		autoriser_serveur_dhcp=oui
		recherche_installe_IP
		exit 0
	;;
esac # fin commandes externes de procédures
