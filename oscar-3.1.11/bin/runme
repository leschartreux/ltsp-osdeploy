#!/bin/sh



## Copyright (c) 2003-2013 Tissoires Jean-François & Benjamin,  jftissoires@gmail.com
## Outil Système Complet d'Assistance Réseau: OSCAR
## Rapide de Sauvegarde aux Ordinateurs et Systèmes: RapideSOS
## Ce programme est sous Licence Publique Générale GNU publiée par la Free Software Foundation.

PATH="/usr/share/oscar/bin:$PATH"
/usr/share/oscar/usr/version_theme_oscar
if ( test -e /usr/share/oscar/usr/choix_langue )
then
	choix_langue=`cat /usr/share/oscar/usr/choix_langue`
else
	echo "fr" > /usr/share/oscar/usr/choix_langue
	choix_langue=fr
	traduction
fi
chemin_langue=/usr/share/oscar/usr/langue/$choix_langue


#---------------------------------------------------------------------------------------------------
tester_gpt_provisoire()
{
echo sda > /tmp/teste_disque_gpt
runme tester_disque_gpt
teste_disque_gpt=`cat /tmp/teste_disque_gpt`
rm -f /tmp/teste_disque_gpt
if [ "$teste_disque_gpt" = "gpt" ]
then
	# formatage gpt pour EFI
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--title " \Z2Table de partition gpt " --ok-label "Eteindre le poste" --cancel-label "Tester" \
	--menu "\n\n\Zb\Z1 DANGER : Table pour EFI \
	\n\Zb\Z1 OSCAR n'est pas encore compatible EFI " 10 60 0 \
	"" "\Zb\Z2Vous pouvez essayer avec le choix : Tester  "
	case $? in
	    0)  halt
	    	;;
	    1) 	;;
	    255) exit;;
	esac
fi
}
#---------------------------------------------------------------------------------------------------
monter_partition_ntfs()
{
rm -f /tmp/erreur_montage_ntfs
# ancien :if ( test -e /livemnt/boot/sysrcd.dat ) || ( test -e /mnt/sysrcd.dat ) || ( test -e /root/sysresccd-pkg.txt )
if ( test -e /root/sysresccd-pkg.txt )	# démarrage cd sysrcd avec ou sans option cdcache ou démarrage ou pxe sur le poste si sysrcd
then	# pour sysrcd:
	# essayez :
	#	mount -t ntfs-3g /dev/$partition_ntfs_a_monter /mnt/$repertoire_ntfs_a_monter
	#	ntfs-3g /dev/$partition_ntfs_a_monter /mnt/$repertoire_ntfs_a_monter
	#	mount.ntfs-3g /dev/$partition_ntfs_a_monter /mnt/$repertoire_ntfs_a_monter
	sleep 1
	ntfs-3g /dev/$partition_ntfs_a_monter /mnt/$repertoire_ntfs_a_monter
	test_qualite_partition_ntfs=$?
	sleep 1	# car trop rapide sur certains postes
	if ! [ "$test_qualite_partition_ntfs" = "0" ]
	then
		echo "" > /tmp/erreur_montage_ntfs
		# La partition ntfsb est de mauvaise qualité
		dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
		--title " `cat $chemin_langue/DESOLE` " --ok-label "`cat $chemin_langue/Continuer`" \
		--msgbox "\n\n\Zb\Z1 `cat $chemin_langue/msgbox_30` ntfs\Z3 $partition_ntfs_a_monter \Z1`cat $chemin_langue/msgbox_31`" 10 69
		# juste monter en lecture pour essais : mount -t ntfs /dev/$partition_ntfs_a_monter /mnt/$repertoire_ntfs_a_monter
		# essayer force :mount -t ntfs-3g /dev/$partition_ntfs_a_monter /mnt/$repertoire_ntfs_a_monter -o force
	fi
else
	mount -o ro -t ntfs /dev/$partition_ntfs_a_monter /mnt/$repertoire_ntfs_a_monter
	echo "`cat $chemin_langue/msgbox_30` $repertoire_ntfs_a_monter `cat $chemin_langue/msgbox_32`" > /tmp/fichiertmp_ntfs
	echo " " >> /tmp/fichiertmp_ntfs
fi
}
#---------------------------------------------------------------------------------------------------
monter_ntfs()
{
umount /mnt/$repertoire_ntfs_a_monter 2>/dev/null ; sync # pour ne pas mettre l'erreur si déjà monté
sleep 2 # car trop rapide sur certains postes
nombre_de_montage_ntfs=0
monter_partition_ntfs
}
#---------------------------------------------------------------------------------------------------
montage_serveur_samba_distant()
{
ip_serveur_distant=`cat /tmp/ip_serveur_distant`
repertoire_distant=`cat /tmp/repertoire_distant`
repertoire_utilisateur_poste=`cat /tmp/repertoire_utilisateur_poste`
username_distant=`cat /tmp/username_distant`
password_distant=`cat /tmp/password_distant`
rm -f /tmp/ip_serveur_distant
rm -f /tmp/repertoire_distant
rm -f /tmp/repertoire_utilisateur_poste
rm -f /tmp/username_distant
rm -f /tmp/password_distant
if ! ( test -e /mnt/$repertoire_utilisateur_poste )
then
	mkdir /mnt/$repertoire_utilisateur_poste
fi
	# ancien 2lignes :
	# modprobe smbfs	2>/dev/null # pour le cd oscar minimal
	# smbmount //$ip_serveur_distant/$repertoire_distant /mnt/$repertoire_utilisateur_poste -o username=$username_distant 2>/dev/null 1>/dev/null
	
modprobe cifs 2>/dev/null
# umount /mnt/$repertoire_utilisateur_poste 2>/dev/null 1>/dev/null

mount -t cifs //$ip_serveur_distant/$repertoire_distant /mnt/$repertoire_utilisateur_poste -o username=$username_distant,password=$password_distant 1>/tmp/test_connexion 2>/dev/null
if [ "$test_mount_cifs" != 0 ]
then
	if ( test -e /tmp/mise_a_jour_oscar_var_txt )
	then
		rm -f /tmp/mise_a_jour_oscar_var_txt
		rm -f /tmp/test_connexion
		return
	fi
	grep -ci "/mnt/$repertoire_utilisateur_poste" /etc/mtab > /tmp/nb_cifs_monte
	nb_cifs_monte=`cat /tmp/nb_cifs_monte`
	rm -f /tmp/nb_cifs_monte
	if ! [ "$nb_cifs_monte" = "0" ] # deja monte
	then
		rm -f /tmp/test_connexion
		return
	fi
	
	grep -ci "error 6" /tmp/test_connexion > /tmp/nb_error_6
	grep -ci "error 13" /tmp/test_connexion > /tmp/nb_error_13
	nb_error_6=`cat /tmp/nb_error_6`
	nb_error_13=`cat /tmp/nb_error_13`
	rm -f /tmp/nb_error_6
	rm -f /tmp/nb_error_13
	if [ "$nb_error_6" = 1 ]	# erreur repertoire
	then
		dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
		--ok-label "`cat $chemin_langue/Continuer`" \
		--title " `cat $chemin_langue/DESOLE` " \
		--msgbox "\n\Zb\Z1 `cat $chemin_langue/msgbox_68a` \n\n //$ip_serveur_distant/$repertoire_distant ..." 9 45
	elif [ "$nb_error_13" = 1 ]	# erreur mot passe
	then
		dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
		--ok-label "`cat $chemin_langue/Continuer`" \
		--title " `cat $chemin_langue/DESOLE` " \
		--msgbox "\n\n\Zb\Z1 `cat $chemin_langue/msgbox_68b` ..." 9 45
	else
		dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
		--ok-label "`cat $chemin_langue/Continuer`" \
		--title " `cat $chemin_langue/DESOLE` " \
		--msgbox "\n\n\Zb\Z1 `cat $chemin_langue/msgbox_68` ..." 9 40
	fi
	echo "" > /tmp/sortir
	rm -f /tmp/test_connexion
	return
fi
rm -f /tmp/test_connexion
# $?=0 ok, ou : error(13): Permission denied -> mauvais password ou login
echo "/mnt/$repertoire_utilisateur_poste : montage smb" >> /tmp/historique
}
#---------------------------------------------------------------------------------------------------
test_cdrom_sysresccd()
{
if ( test -e /etc/conf.d/hostname )	# démarrage cd sysrescuecd d'origine
then
	grep -ci "OSCAR" /etc/conf.d/hostname > /tmp/tempfile
	nombre_ligne_avec_OSCAR=`cat /tmp/tempfile`
	rm -f /tmp/tempfile
	if [ "$nombre_ligne_avec_OSCAR" = "0" ]	# aucune ligne avec OSCAR
	then
		echo "" > /tmp/sortir_commande
		
		# Utilisation du cédérom OSCAR
		DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
		--backtitle "`cat /etc/banniere_oscar`" \
		--ok-label "`cat $chemin_langue/menu_178`" --cancel-label "`cat $chemin_langue/Annuler`" --title " `cat $chemin_langue/Attention` " \
		--menu "\Zb\Z3 `cat $chemin_langue/menu_179` " 7 78 0 \
		"" "" \
		"" "\Zb\Z4`cat $chemin_langue/menu_180`" \
		"" "\Zb\Z4`cat $chemin_langue/menu_181`.\Zn" \
		"" "" \
		"" "" \
		"" "\Z2Copyright (c) 2004 (Tissoires Jean-François & Benjamin)" \
		"" "\Z2Cédérom \Zb\Z1O\Z3util\Zb\Z1 S\Z3ystème \Zb\Z1C\Z3omplet d'\Zb\Z1A\Z3ssistance\Zb\Z1 R\Z3éseau, \Zb\Z1OSCAR" \
		"" "\Z2Cédérom \Zb\Z1Rapide \Z3de\Zb\Z1 S\Z3auvegarde aux\Zb\Z1 O\Z3rdinateurs et\Zb\Z1 S\Z3ystèmes, \Zb\Z1RapideSOS " \
		"" "\Z2jftissoires@gmail.com \Zn " \
		"" "" \
		"" "\Zn`cat $chemin_langue/menu_182`." \
		"" ""
		case $? in
		    0)  cdrom_oscar
			exit
			;;
		    1) 	exit
			;;
		    255) exit
		    	;;
		esac
	fi
fi
}
#---------------------------------------------------------------------------------------------------
connexion_serveur_dhcp()
{
if ( test -e /root/sysresccd-pkg.txt )	# démarrage cd sysrcd avec ou sans option cdcache ou démarrage ou pxe sur le poste si sysrcd
then	# pour sysrcd:
	rm -f /var/run/dhcpcd-$carte_ethi.pid	# pour réinitialiser le lancement dhcp
	
        dhcpcd $carte_ethi -t 10 1>/dev/null 2>/dev/null # une adresse recue est 169.254.XXX.YYY si non connecte
        test_erreur=$?
	if [ "$test_erreur" != "0" ]
	then
	    /etc/init.d/net.$carte_ethi restart 1>/dev/null 2>/dev/null
	    dhcpcd $carte_ethi -t 10 1>/dev/null 2>/dev/null
	fi
else
	/etc/init.d/net.$carte_ethi restart 1>/dev/null 2>/dev/null
fi
}
#---------------------------------------------------------------------------------------------------
verifie_carte_ethernet_X()
{
	connexion_serveur_dhcp
	recuperer_IP
	if ( test -e /tmp/sortir )
	then
	    return
	fi
	ip_installe=`cat ip_installe_poste`
	cut -d"." -f1-2 ip_installe_poste > /tmp/test_carte_interne
	test_carte_interne=`cat /tmp/test_carte_interne`
	rm -f /tmp/test_carte_interne
	if [ "$test_carte_interne" = "169.254" ]
	then	# carte interne
		supprimer_ip_ethernet	# ne sert a rien pour plusieurs cartes
		ip_installe=""
		echo "" > ip_installe_poste
	fi
	if ! [ "$ip_installe" = "" ]
	then	# serveur dhcp sur cette carte mettre IP sur toutes les cartes:
		echo "$carte_ethi" > /tmp/dhcp_ethX	# carte ethX connectee au serveur dhcp dans /tmp/dhcp_ethX
		dhcp_masque=`cat /tmp/ip_masque_poste`
		ifconfig $carte_ethi $ip_installe netmask $dhcp_masque
	else
		rm -f /tmp/dhcp_ethX
	fi
}
#---------------------------------------------------------------------------------------------------
recherche_numero_carte_ethernet_branchee()
{
cherche_carte_ethernet_cablee
if ( test -e /tmp/sortir )
then
    return
fi
verifie_carte_ethernet_X
}
#---------------------------------------------------------------------------------------------------
lancer_dhcp()
{
echo
echo -e "`cat $chemin_langue/texte_39` ..."
echo
ifconfig -a > /tmp/reveil_cartes
rm -f /tmp/reveil_cartes

recherche_numero_carte_ethernet_branchee
if ( test -e /tmp/sortir )
then
    return
fi
}
#---------------------------------------------------------------------------------------------------
sp_arreter_NetworkManager()
{
# mieux pour arreter NetworkManager :
# start-stop-daemon --stop --quiet --pidfile /var/run/NetworkManager.pid
#	NetworkManager 2>/tmp/stop_NetworkManager 1>/tmp/test_NetworkManager_pid
#	test_NetworkManager_pid=`cat /tmp/test_NetworkManager_pid`
#	rm -f /tmp/test_NetworkManager_pid
#	if [ "$test_NetworkManager_pid" = "" ]
#	then
#		NetworkManager 2>/tmp/stop_NetworkManager
#	fi
#	perl -pi -e 's/pid /,/g;' /tmp/stop_NetworkManager
#	cut -d"," -f2 /tmp/stop_NetworkManager > /tmp/stop_NetworkManager1
#	cut -d")" -f1 /tmp/stop_NetworkManager1 > /tmp/stop_NetworkManager
#	kill `cat /tmp/stop_NetworkManager`
#	rm -f /tmp/stop_NetworkManager
#	rm -f /tmp/stop_NetworkManager1

#start-stop-daemon --stop --quiet --pidfile /var/run/NetworkManager.pid
/etc/init.d/NetworkManager stop
}
#---------------------------------------------------------------------------------------------------
lecture_connecteur_usb()	# utile pour sysrcd
{
if ( test -e /root/sysresccd-pkg.txt )	# démarrage cd sysrcd avec ou sans option cdcache ou démarrage ou pxe sur le poste si sysrcd
then	# pour sysrcd:
		lsusb > /tmp/tempfileusb 2>/dev/null
		sleep 2
		# fdisk /dev/ub* -l 2>/dev/null > /tmp/tempfileusb
		# sleep 1
		rm /tmp/tempfileusb
else
    sleep 3
fi
}
#---------------------------------------------------------------------------------------------------
prepare_fichier_temptaille() # avec parted # fichier /tmp/temptaille lineaire pour changer unite en Mo
{
	info_ddialog
}
#---------------------------------------------------------------------------------------------------
prepare_fichier_temptaille_ancien()  # fichier /tmp/temptaille lineaire pour changer unite en Mo
{
	info_ddialog
	###### lignes ajoutees pour uba et ubb de sysrcd:
	if ( test -e /root/sysresccd-pkg.txt )	# démarrage cd sysrcd avec ou sans option cdcache ou démarrage sur le poste si sysrcd
	then	# pour sysrcd:

	    perl -pi -e 's/Disk/\/dev\/Disk/g;s/   Device Boot/\/dev\/   Device Boot/g;' /tmp/fichier_disque_dur
    
	    grep -i "^\/dev\/" /tmp/fichier_disque_dur | \
	    grep -v "1:" | grep -v "2:" | grep -v "3:" | grep -v "4:" | grep -v "5:" | grep -v "6:" | grep -v "7:" | \
	    grep -v "8:" | grep -v "9:" | grep -v "0:" > /tmp/tempfile

	    cp /tmp/tempfile /tmp/fichier_disque_dur
 
	    perl -pi -e 's/\/dev\/Disk/\n  Disk/g;s/\/dev\/   Device Boot/\n   Device Boot/g;' /tmp/fichier_disque_dur
	fi
	###### fin des lignes ajoutees pour uba et ubb
	
        perl -pi -e 's/   Blocks/Taille Mo/g;' /tmp/fichier_disque_dur
	grep -i "^/dev"  /tmp/fichier_disque_dur > /tmp/tempfile
        perl -pi -e 's/\/dev\///g; s/\(//g; s/\)//g; \
	s/\*/ /g; s/      / /g; s/   / /g; s/   / /g; s/  / /g; s/ /=/g;' /tmp/tempfile
	echo "fin" >> /tmp/tempfile

	echo `gawk '{ print $1 ":" } ' /tmp/tempfile` > /tmp/temptaille
        perl -pi -e 's/: /:/g;' /tmp/temptaille  ## pour enlever les espaces  soit  hda1:hda5:hd    cat /tmp/temptaille # fichier ligne separe par ,

	changer_unite_blocks
}
#----------------------------------------------------------------------------------------------------
faire_fichier_disque_dur_lvm_ancien()
{
rm -f /tmp/fichier_disque_dur_mapper_LVM

# perl -pi -e 's/:/}/g;' /tmp/fichier_disque_dur
grep -ci "/dev/mapper" /tmp/fichier_disque_dur > /tmp/nb_mapper
nb_mapper=`cat /tmp/nb_mapper`
rm -f /tmp/nb_mapper
if [ "$nb_mapper" = "0" ]
then
	return
fi

perl -pi -e 's/Disk \/dev\/mapper/\/dev\/mapper/g;' /tmp/fichier_disque_dur
grep -i "/dev/mapper/" /tmp/fichier_disque_dur | grep -v "doesn't contain a valid" > /tmp/fichier_disque_dur_mapper_LVM

grep -v "/dev/mapper" /tmp/fichier_disque_dur > /tmp/fichier_disque_dur1
cp -f /tmp/fichier_disque_dur1 /tmp/fichier_disque_dur
rm -f /tmp/fichier_disque_dur1
}
#----------------------------------------------------------------------------------------------------
faire_fichier_disque_dur_lvm()
{
lvdisplay | grep Path | perl -pi -e 's/LV Path//g; s/ //g;' > /tmp/chemin_lvm
lvdisplay | grep Size | perl -pi -e 's/LV Size//g; s/ //g;' > /tmp/taille_lvm
# numeroter les lignes :
echo "`cat -n /tmp/chemin_lvm`" > /tmp/chemin_lvm1
echo "`cat -n /tmp/taille_lvm`" > /tmp/taille_lvm1
join /tmp/chemin_lvm1 /tmp/taille_lvm1 > /tmp/fichier_disque_dur_mapper_LVM1
cut -d" " -f2-3 /tmp/fichier_disque_dur_mapper_LVM1 > /tmp/fichier_disque_dur_mapper_LVM
perl -pi -e 's/ /: /g;' /tmp/fichier_disque_dur_mapper_LVM
rm -f /tmp/fichier_disque_dur_mapper_LVM1
rm -f /tmp/chemin_lvm
rm -f /tmp/chemin_lvm1
rm -f /tmp/taille_lvm
rm -f /tmp/taille_lvm1

# mettre de la forme /dev/mapper/scribe-root au lieu de /dev/scribe/root si besoin :
perl -pi -e 's/\//\-/g;' /tmp/fichier_disque_dur_mapper_LVM
perl -pi -e 's/\-dev\-/\/dev\/mapper\//g;' /tmp/fichier_disque_dur_mapper_LVM

# lignes provisoires inutiles plus tard avec parted au lieu de fdisk :
# grep -v "/dev/mapper" /tmp/fichier_disque_dur > /tmp/fichier_disque_dur1
# cp -f /tmp/fichier_disque_dur1 /tmp/fichier_disque_dur
# rm -f /tmp/fichier_disque_dur1
}
#----------------------------------------------------------------------------------------------------
faire_fichier_disque_dur_avec_numero()
{
# faire pour chaque disque dur
perl -pi -e 's/Disk \/dev\//Disk \/dev\/ 1 2 3 Disk \/dev\//g; s/:/__OSCAR__/g;' /tmp/fichier_disque_dur
grep -v /dev/sr /tmp/fichier_disque_dur > /tmp/fichier_disque_dur1
grep -n "" /tmp/fichier_disque_dur1 > /tmp/fichier_disque_dur_avec_numero
cut -d":" -f1-2 /tmp/fichier_disque_dur_avec_numero > /tmp/fichier_disque_dur_avec_numero1
perl -pi -e 's/:1/: 1/g; s/:2/: 2/g; s/:3/: 3/g; s/:4/: 4/g; s/:5/: 5/g; s/:6/: 6/g; s/:7/: 7/g; s/:8/: 8/g; s/:9/: 9/g; s/: /:Disk \/dev\/:/g;' /tmp/fichier_disque_dur_avec_numero1
grep -i ":Disk /dev/" /tmp/fichier_disque_dur_avec_numero1 > /tmp/fichier_disque_dur_Disk_dev

# pour concordance faire /tmp/concordance_dev
cut -d" " -f2-300 /tmp/fichier_disque_dur_Disk_dev > /tmp/concordance_dev
# classe dans l'ordre pour concordance avec ls plus loin :
sort /tmp/concordance_dev -k1,1 > /tmp/concordance_dev1
cut -d" " -f2-300 /tmp/concordance_dev1 > /tmp/fichier_disque_dur_Disk_dev1
perl -pi -e 's/     / /g; s/    / /g; s/   / /g; s/  / /g;' /tmp/fichier_disque_dur_Disk_dev1
cut -d" " -f4-300 /tmp/fichier_disque_dur_Disk_dev1 > /tmp/fichier_disque_dur_Disk_dev
rm -f /tmp/concordance_dev
rm -f /tmp/concordance_dev1
}
#----------------------------------------------------------------------------------------------------
faire_fichier_disque_dur_avec_parted()
{
rm -f /tmp/fichier_disque_dur_disque
for i in a b c d e f g h i j k l m n o p q r s
do
	if ( test -e /dev/sd$i )
	then
		parted -s /dev/sd$i print 2>/dev/null > /tmp/fichier_disque_dur
		faire_fichier_disque_dur_avec_numero
		cat /tmp/fichier_disque_dur_Disk_dev >> /tmp/fichier_disque_dur_disque
	fi
done
cp -f /tmp/fichier_disque_dur_disque /tmp/fichier_disque_dur_Disk_dev
rm -f /tmp/fichier_disque_dur_disque
cat -n /tmp/fichier_disque_dur_Disk_dev > /tmp/fichier_disque_dur_Disk_dev1

# joindre 
echo "`ls /dev/sd*`" > /tmp/partitions_joindre
# remplacer '/dev/sdi' par '/dev/sdi ', classer puis remettre '/dev/sdi' :
for i in a b c d e f g h i j k l m n o p q r s
do
	if ( test -e /dev/sd$i )
	then
		echo "perl -pi -e 's/\/dev\/sd$i/\/dev\/sd$i /g;' /tmp/partitions_joindre" > /tmp/exec_nom
		chmod +x /tmp/exec_nom
		/tmp/exec_nom
		rm -f /tmp/exec_nom
		# classer comme /tmp/fichier_disque_dur_Disk_dev1 :
		sort /tmp/partitions_joindre -k1,1 > /tmp/partitions_joindre1
	fi
done
# classer dans l'ordre
# sort /tmp/partitions_joindre -k1,1 -k2n,2n > /tmp/partitions_joindre1
for i in a b c d e f g h i j k l m n o p q r s
do
	if ( test -e /dev/sd$i )
	then
		echo "perl -pi -e 's/\/dev\/sd$i /\/dev\/sd$i/g;' /tmp/partitions_joindre1" > /tmp/exec_nom
		chmod +x /tmp/exec_nom
		/tmp/exec_nom
		rm -f /tmp/exec_nom
	fi
done
# numeroter
cat -n /tmp/partitions_joindre1 > /tmp/partitions_joindre
join /tmp/partitions_joindre /tmp/fichier_disque_dur_Disk_dev1 > /tmp/fichier_disque_dur1
cut -d" " -f2-300 /tmp/fichier_disque_dur1 > /tmp/fichier_disque_dur

for i in a b c d e f g h i j k l m n o p q r s
do
	if ( test -e /dev/sd$i )
	then
		echo "perl -pi -e 's/\/dev\/sd$i Disk/Disk/g;' /tmp/fichier_disque_dur" > /tmp/exec_nom
		chmod +x /tmp/exec_nom
		/tmp/exec_nom
		rm -f /tmp/exec_nom
	fi
done

rm -f /tmp/fichier_disque_dur1
rm -f /tmp/fichier_disque_dur2
rm -f /tmp/fichier_disque_dur_Disk_dev
rm -f /tmp/fichier_disque_dur_Disk_dev1
rm -f /tmp/partitions_joindre
rm -f /tmp/partitions_joindre1
rm -f /tmp/fichier_disque_dur_avec_numero
rm -f /tmp/fichier_disque_dur_avec_numero1
perl -pi -e 's/__OSCAR__/:/g;' /tmp/fichier_disque_dur
perl -pi -e 's/ext4/Linuxext4/g; s/ext3/Linuxext3/g; s/ext2/Linuxext2/g; \
s/reiserfs/Linuxreiserfs/g; s/reiser4/Linuxreiser4/g; s/jfs/Linuxjfs/g; s/xfs/Linuxxfs/g; \
s/ primary//g; s/ logical//g;' /tmp/fichier_disque_dur
}
#----------------------------------------------------------------------------------------------------
info_ddialog()  # noyau 3 informations sur le disque dur dans un fichierdd pour une boite de dialogue
{
###	le fichier modifie sera /tmp/fichier_disque_dur
rm -f /tmp/fichier_disque_dur
if ! ( test -e /tmp/demande_fichier_disque )	# faire /tmp/fichier/disque_dur complet
then
	rm -f /tmp/demande_fichier_disque
	# pour sysrcd voir aussi les fonctions prepare_fichier_temptaille et lecture_connecteur_usb pour sysrcd
	# fdisk -l 2>/dev/null | grep -v "dev\/dm-" > /tmp/fichier_disque_dur # en remarque pour tabpt
	faire_fichier_disque_dur_avec_parted
elif ( test -e /tmp/fichier_disques )		# faire /tmp/fichier_disque_dur pour disques durs seuls
then
	rm -f /tmp/demande_fichier_disque
	rm -f /tmp/fichier_disques
	if ( test -e /root/sysresccd-pkg.txt )	# démarrage cd sysrcd avec ou sans option cdcache ou démarrage sur le poste si sysrcd
	then	#  pour sysrcd:
		# fdisk /dev/ub* /dev/sd* /dev/hd* -l 2>/dev/null | grep -i "^Disk \/dev\/" | grep -v "dev\/dm-" | \
	        # grep -v "1:" | grep -v "2:" | grep -v "3:" | grep -v "4:" | grep -v "5:" | grep -v "6:" | grep -v "7:" | \
	        # grep -v "8:" | grep -v "9:" | grep -v "0:" > /tmp/fichier_disque_dur
	        faire_fichier_disque_dur_avec_parted
	else
		# fdisk -l 2>/dev/null | grep -i "^Disk \/dev\/" | grep -v "dev\/dm-" > /tmp/fichier_disque_dur
		faire_fichier_disque_dur_avec_parted
	fi
fi

# grep -ci "Linux LVM" /tmp/fichier_disque_dur > /tmp/nb_partitions_lvm
grep -ci "lvm$" /tmp/fichier_disque_dur > /tmp/nb_partitions_lvm
nb_partitions_lvm=`cat /tmp/nb_partitions_lvm`
rm -f /tmp/nb_partitions_lvm
if [ "$nb_partitions_lvm" != "0" ]
then
	partitions_lvm_existes=oui
	faire_fichier_disque_dur_lvm
fi
}
#----------------------------------------------------------------------------------------------------
info_ddialog_ancien()  # noyau 2.6 informations sur le disque dur dans un fichierdd pour une boite de dialogue
{
###	le fichier modifie sera /tmp/fichier_disque_dur
rm -f /tmp/fichier_disque_dur

	if ! ( test -e /tmp/demande_fichier_disque )	# faire /tmp/fichier/disque_dur complet
	then
		rm -f /tmp/demande_fichier_disque
		# pour sysrcd voir aussi les fonctions prepare_fichier_temptaille et lecture_connecteur_usb pour sysrcd
		fdisk -l 2>/dev/null | grep -v "dev\/dm-" > /tmp/fichier_disque_dur # en remarque pour tabpt
	elif ( test -e /tmp/fichier_disques )		# faire /tmp/fichier_disque_dur pour disques durs seuls
	then
		rm -f /tmp/demande_fichier_disque
		rm -f /tmp/fichier_disques
		if ( test -e /root/sysresccd-pkg.txt )	# démarrage cd sysrcd avec ou sans option cdcache ou démarrage sur le poste si sysrcd
		then	#  pour sysrcd:
			fdisk /dev/ub* /dev/sd* /dev/hd* -l 2>/dev/null | grep -i "^Disk \/dev\/" | grep -v "dev\/dm-" | \
		        grep -v "1:" | grep -v "2:" | grep -v "3:" | grep -v "4:" | grep -v "5:" | grep -v "6:" | grep -v "7:" | \
		        grep -v "8:" | grep -v "9:" | grep -v "0:" > /tmp/fichier_disque_dur
		else
			fdisk -l 2>/dev/null | grep -i "^Disk \/dev\/" | grep -v "dev\/dm-" > /tmp/fichier_disque_dur
		fi
	fi
grep -v "Disk identifier:" /tmp/fichier_disque_dur > /tmp/fichiertemp	# enlever la ligne Disk identifier: 0x00004fbc1
cp -f /tmp/fichiertemp /tmp/fichier_disque_dur
rm -f /tmp/fichiertemp
grep -ci "Linux LVM" /tmp/fichier_disque_dur > /tmp/nb_partitions_lvm
nb_partitions_lvm=`cat /tmp/nb_partitions_lvm`
rm -f /tmp/nb_partitions_lvm
if [ "$nb_partitions_lvm" != "0" ]
then
	partitions_lvm_existes=oui
	faire_fichier_disque_dur_lvm
fi
}
#---------------------------------------------------------------------------------------------------
changer_unite_blocks() # les partitions  sont dans /tmp/temptaille
{
cut -d":" -f1 /tmp/temptaille > /tmp/tempfile      # hda1:...:...
partition_etudiee=`cat /tmp/tempfile`
grep -ci "," /tmp/tempfile > /tmp/test_nb_lvm
test_nb_lvm=`cat /tmp/test_nb_lvm`

if [ "$partition_etudiee" = "fin" ]
then
	rm -f /tmp/tempfile
	rm -f /tmp/tempfile1
	return
else
	if [ "$test_nb_lvm" = "0" ]
	then # pas LVM
		cut -d"=" -f4 /tmp/tempfile > /tmp/tempfile1      # taille de partition
		perl -pi -e 's/\+//g; s/-//g;' /tmp/tempfile1
		valeur=$[`cat /tmp/tempfile1`/1024]
	else
		cut -d"=" -f3 /tmp/tempfile > /tmp/tempfile1      # taille de partition
		perl -pi -e 's/\+//g; s/-//g;' /tmp/tempfile1
		valeur="1  1  `cat /tmp/tempfile1`"
	fi
	rm -f /tmp/exec_nom
	echo "perl -pi -e 's/`cat /tmp/tempfile1`/   $valeur/g;' /tmp/fichier_disque_dur" > /tmp/exec_nom
	chmod +x /tmp/exec_nom
	/tmp/exec_nom
	
	cut -d":" -f2-200 /tmp/temptaille > /tmp/tempfile      # hda2:...:...
	cp -f /tmp/tempfile /tmp/temptaille
	rm -f /tmp/exec_nom
fi
changer_unite_blocks
}
#---------------------------------------------------------------------------------------------------
information_dd()
{
prepare_fichier_temptaille
cp -f /tmp/fichier_disque_dur /tmp/bozo
modifier_Linux_en_OSCAR
# Informations sur le(s) disque(s) dur(s)
echo "perl -pi -e 's/ 1  1  /      /g; s/Disk/
`cat $chemin_langue/Disque`/g; s/Linux/Linux /g;' /tmp/bozo" > /tmp/exec_nom
chmod +x /tmp/exec_nom
/tmp/exec_nom
if ( test -e /tmp/initialise_realisee )
then
	rm -f /tmp/initialise_realisee
	corrige_realisee
else
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" --exit-label "`cat $chemin_langue/Continuer`" \
	--exit-label "`cat $chemin_langue/Continuer`" --title " `cat $chemin_langue/textbox_1` " \
	--textbox "/tmp/bozo" 0 0
fi
rm -f /tmp/bozo
}
#----------------------------------------------------------------------------------------------------
mettre_unique_et_code()
{
echo "perl -pi -e 's/`cat /tmp/temp3`/`cat /tmp/temp3` UUID=`cat /tmp/valeur_uuid_sdai`
`cat /tmp/temp3` unique GUID=`cat /tmp/bozo_unique`
`cat /tmp/temp3` code GUID=`cat /tmp/bozo_code`
/g;' /tmp/bozo" > /tmp/exec_nom
rm -f /tmp/bozo_unique
rm -f /tmp/bozo_code
}
#----------------------------------------------------------------------------------------------------
determiner_valeurs_uuid()
{
cut -d":" -f1 /tmp/temp1 > /tmp/temp2
test_sdai_=`cat /tmp/temp2`
if ! [ "$test_sdai_" = "" ]
then
	disque_gpt=`expr substr $test_sdai_ 1 3`
	echo "$disque_gpt" > /tmp/teste_disque_gpt
	tester_disque_gpt
	teste_disque_gpt=`cat /tmp/teste_disque_gpt`
	rm -f /tmp/teste_disque_gpt
	
	perl -pi -e 's/_//g;' /tmp/temp2
	test_sdai=`cat /tmp/temp2`
	# sortir uuid de sdai :
	blkid -o full | grep -i "`cat /tmp/temp2`:" > /tmp/temp_uuid_sdai
	perl -pi -e 's/UUID="/,/g;' /tmp/temp_uuid_sdai
	cut -d"," -f2 /tmp/temp_uuid_sdai > /tmp/temp_uuid_sdai1
	cut -d"\"" -f1 /tmp/temp_uuid_sdai1 > /tmp/valeur_uuid_sdai
	rm -f /tmp/temp_uuid_sdai
	rm -f /tmp/temp_uuid_sdai1
	if [ "$teste_disque_gpt" = gpt ]
	then # disque gpt
		numero_partition_gpt_i=`cat /tmp/temp2`
		numero_partition_gpt=`expr substr $numero_partition_gpt_i 4 3`
		# rechercher_guid_unique
		sgdisk /dev/$disque_gpt -i $numero_partition_gpt | grep -i GUID | grep -i unique | cut -d":" -f2 | perl -pi -e 's/ //g;' > /tmp/bozo_unique
		# rechercher_guid_code
		sgdisk /dev/$disque_gpt -i $numero_partition_gpt | grep -i GUID | grep -i code | cut -d":" -f2 | cut -d"(" -f1 | perl -pi -e 's/ //g;' > /tmp/bozo_code
	fi
	
	valeur_uuid_sdai=`cat /tmp/valeur_uuid_sdai`
	if ! [ "$valeur_uuid_sdai" = "" ]
	then
		perl -pi -e 's/\//__JF__/g; s/\"/__OUI__/g; s/\\/__FIN__/g;' /tmp/bozo
		grep -i "$test_sdai_" /tmp/bozo > /tmp/temp3
		if [ "$teste_disque_gpt" = non_gpt ]
		then # disque non gpt
			echo "perl -pi -e 's/`cat /tmp/temp3`/`cat /tmp/temp3` UUID=`cat /tmp/valeur_uuid_sdai`/g;' /tmp/bozo" > /tmp/exec_nom
		else
			mettre_unique_et_code
		fi
	        chmod +x /tmp/exec_nom
    		/tmp/exec_nom
    		perl -pi -e 's/__FIN__/\\/g; s/__JF__/\//g; s/__OUI__/\"/g;' /tmp/bozo
		rm -f /tmp/exec_nom
		rm -f /tmp/temp3
	fi
	echo "perl -pi -e 's/`cat /tmp/temp2`_://g;' /tmp/temp1" > /tmp/exec_nom
        chmod +x /tmp/exec_nom
	/tmp/exec_nom	
	rm -f /tmp/exec_nom
else
	perl -pi -e 's/_//g; s/NTFS/NTFS /g;' /tmp/bozo
	rm -f /tmp/temp1
	rm -f /tmp/temp2
	return
fi
determiner_valeurs_uuid
}
#----------------------------------------------------------------------------------------------------
information_uuid()
{
prepare_fichier_temptaille
cp -f /tmp/fichier_disque_dur /tmp/bozo
modifier_Linux_en_OSCAR
perl -pi -e 's/bytes
//g;' /tmp/bozo
grep -v "Disk" /tmp/bozo | grep -v "Device" | grep -v extended | grep -v "Extended" | grep -v "Ext'd" | grep -v "cylinders" | grep -v "physical" | grep -v "phys=" | grep -v "sectors" | grep -v "^Units" > /tmp/bozo1
perl -pi -e 's/\*//g; s/HPFS\/NTFS/NTFS/g; s/W95 FAT32 (LBA)/FAT32/g; s/W95 FAT32/FAT32/g;' /tmp/bozo1
awk '{ print " " $1 "_     " $6 }' /tmp/bozo1 > /tmp/bozo

cp -f /tmp/bozo /tmp/temp1
perl -pi -e 's/\"//g; s/\\//g; s/\///g; s/mnt//g; s/dev//g; s/Zn//g;' /tmp/temp1
grep -i "sd" /tmp/temp1 > /tmp/temp2
echo `gawk '{ print$1 ":" }' /tmp/temp2` > /tmp/temp1
perl -pi -e 's/ //g;' /tmp/temp1
determiner_valeurs_uuid
rm -f /tmp/temp1

# Informations sur le(s) disque(s) dur(s)
echo "" > /tmp/bozo1
perl -pi -e 's/ 1  1  /      /g;' /tmp/bozo
cat /tmp/bozo1 /tmp/bozo > /tmp/bozo2
cp -f /tmp/bozo2 /tmp/bozo
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" --exit-label "`cat $chemin_langue/Continuer`" \
	--exit-label "`cat $chemin_langue/Continuer`" --title " `cat $chemin_langue/textbox_1b` " \
	--textbox "/tmp/bozo" 0 0
rm -f /tmp/bozo
rm -f /tmp/bozo1
rm -f /tmp/bozo2
}
#----------------------------------------------------------------------------------------------------
info_disque()	# en cas de modification changer aussi le fichier cdrom_oscar
{
# utilise seulement par le fichier info_dd
fdisk -l | perl -pi -e 's/ *Device/   Device/g;'
}
#-----------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------
info_dd()  # informations sur le disque dur
{
echo
echo
echo -e "\033[1;34m              `cat $chemin_langue/textbox_1`: \033[1;m"
echo 
info_disque
}
#-----------------------------------------------------------------------------------------------------
donner_lettre_disque()
{
if [ "$numero_disq" = 0 ]
then
	lettre_disque=a
elif [ "$numero_disq" = 1 ]
then
	lettre_disque=b
elif [ "$numero_disq" = 2 ]
then
	lettre_disque=c
elif [ "$numero_disq" = 3 ]
then
	lettre_disque=d
elif [ "$numero_disq" = 4 ]
then
	lettre_disque=e
elif [ "$numero_disq" = 5 ]
then
	lettre_disque=f
elif [ "$numero_disq" = 6 ]
then
	lettre_disque=g
elif [ "$numero_disq" = 7 ]
then
	lettre_disque=h
elif [ "$numero_disq" = 8 ]
then
	lettre_disque=i
elif [ "$numero_disq" = 9 ]
then
lettre_disque=j
elif [ "$numero_disq" = 10 ]
then
	lettre_disque=k
elif [ "$numero_disq" = 11 ]
then
	lettre_disque=l
elif [ "$numero_disq" = 12 ]
then
	lettre_disque=m
elif [ "$numero_disq" = 13 ]
then
	lettre_disque=n
elif [ "$numero_disq" = 14 ]
then
	lettre_disque=o
elif [ "$numero_disq" = 15 ]
then
	lettre_disque=p
elif [ "$numero_disq" = 16 ]
then
	lettre_disque=q
elif [ "$numero_disq" = 17 ]
then
	lettre_disque=r
elif [ "$numero_disq" = 18 ]
then
	lettre_disque=s
elif [ "$numero_disq" = 19 ]
then
	lettre_disque=t
elif [ "$numero_disq" = 20 ]
then
	lettre_disque=v
fi
}
#----------------------------------------------------------------------------------------------------
remplacer_dans_fichier_disque_dur() # realise le fichier_disque_dur et le fichier_partitions
{
echo "$lettre_disque" > /tmp/tempfile2
rm -f /tmp/exec_nom
echo "perl -pi -e 's/`cat /tmp/tempfile1`\/disc/`cat /tmp/tempfile3``cat /tmp/tempfile2`/g;' /tmp/fichier_disque_dur" > /tmp/exec_nom
chmod +x /tmp/exec_nom
/tmp/exec_nom
rm -f /tmp/exec_nom
rm -f /tmp/tempfile4
if ( test -e /tmp/fichier_partitions )
then
	echo "
	grep -ci \"`cat /tmp/tempfile1`\" /tmp/fichier_partitions > /tmp/tempfile4
	chemin=\`cat /tmp/tempfile4\`
	if [ \"\$chemin\" = 0 ]
	then
		grep -i \"\/part\" /tmp/fichier_disque_dur >> /tmp/fichier_partitions
	fi" > /tmp/exec_nom	
else
	echo "grep -i \"\/part\" /tmp/fichier_disque_dur >> /tmp/fichier_partitions" > /tmp/exec_nom
fi
	
#	echo "grep -i \"\/part\" /tmp/fichier_disque_dur >> /tmp/fichier_partitions" >> /tmp/exec_nom
echo "perl -pi -e 's/`cat /tmp/tempfile1`\/part/`cat /tmp/tempfile3``cat /tmp/tempfile2`/g;' /tmp/fichier_disque_dur" >> /tmp/exec_nom

chmod +x /tmp/exec_nom
/tmp/exec_nom

rm -f `cat /tmp/tempfile1`
}
#----------------------------------------------------------------------------------------------------
info_ddialog_menu_ancien() # avec parted  # informations sur le disque dur dans un fichierdd pour une boite de dialogue
{
prepare_fichier_temptaille # fichier /tmp/temptaille lineaire pour changer unite en Mo

egrep -e "^/dev" /tmp/fichier_disque_dur | grep -v "W95 Ext'd" | grep -v "Extended" | \
perl -pi -e 's/\*//g;  s/\+ / /g; s/\- / /g;  s/ \+/  /g; s/ \-/  /g;  s/  /:/g; s/:+/:/g;' | \
awk 'BEGIN { FS=":" } { printf ("%0s %5s %15s\n","\""$1"\" \"",$4,$6"\" \\")}' > /tmp/bozo

if [ "$partitions_lvm_existes" = "oui" ]
then
	egrep -e "^/dev" /tmp/fichier_disque_dur_mapper_LVM | \
	perl -pi -e 's/\*//g;  s/\+ / /g; s/\- / /g;  s/ \+/  /g; s/ \-/  /g; s/\+/}/g;  s/  /:/g; s/:+/:/g;' > /tmp/bozo1
	cut -d"," -f1 /tmp/bozo1 > /tmp/bozo_lvm
	grep -i mapper /tmp/bozo_lvm | perl -pi -e 's/ //g; s/:1:/]/g; s/]1//g; s/\/dev\/mapper/\/mapper/g;' | \
	awk 'BEGIN { FS=":" } { printf ("%0s %10s %10s\n","\""$1"\" \"",$2,$3"\" \\")}' > /tmp/bozo1
	echo `cat /tmp/bozo1` >> /tmp/bozo
fi
#### ici bug pour boite avec lvm /tmp/fichier_disque_dur_mapper_LVM
rm -f /tmp/bozo1
rm -f /tmp/bozo_lvm
}
#----------------------------------------------------------------------------------------------------
info_ddialog_menu()  # informations sur le disque dur dans un fichierdd pour une boite de dialogue
{
prepare_fichier_temptaille # fichier /tmp/temptaille lineaire pour changer unite en Mo

# egrep -e "^/dev" /tmp/fichier_disque_dur | grep -v "W95 Ext'd" | grep -v "Extended" | \
grep -v extended /tmp/fichier_disque_dur | grep -v "^Disk" | grep -v "W95 Ext'd" | grep -v "Extended" | \
perl -pi -e 's/\*//g;  s/\+ / /g; s/\- / /g;  s/ \+/  /g; s/ \-/  /g;  s/  /:/g; s/:+/:/g;' | \
# awk 'BEGIN { FS=":" } { printf ("%0s %5s %15s\n","\""$1"\" \"",$4,$6"\" \\")}' > /tmp/bozo
awk 'BEGIN { FS=" " } { printf ("%0s %5s %15s %10s\n","\""$1"\" \"",$2,$3,$4"\" \\")}' > /tmp/bozo

if [ "$partitions_lvm_existes" = "oui" ]
then
	egrep -e "^/dev" /tmp/fichier_disque_dur_mapper_LVM | \
	perl -pi -e 's/\*//g;  s/\+ / /g; s/\- / /g;  s/ \+/  /g; s/ \-/  /g; s/\+/}/g;  s/  /:/g; s/:+/:/g;' > /tmp/bozo1
	cut -d"," -f1 /tmp/bozo1 > /tmp/bozo_lvm
	grep -i mapper /tmp/bozo_lvm | perl -pi -e 's/ //g; s/:1:/]/g; s/]1//g; s/\/dev\/mapper/\/mapper/g;' | \
	awk 'BEGIN { FS=":" } { printf ("%0s %10s %10s\n","\""$1"\" \"",$2,$3"\" \\")}' > /tmp/bozo1
	echo `cat /tmp/bozo1` >> /tmp/bozo
fi
#### ici bug pour boite avec lvm /tmp/fichier_disque_dur_mapper_LVM
rm -f /tmp/bozo1
rm -f /tmp/bozo_lvm
}
#----------------------------------------------------------------------------------------------------
info_ddialog_de_montage()  # listing des fichiers montes dans /etc/mtab pour une boite de dialogue
{
rm -f /tmp/bozo
rm -f /tmp/tempbozo
rm -f /tmp/tempbozo1
egrep -e "^/dev" /etc/mtab | egrep -e "/mnt/" | perl -pi -e 's/\/mnt\///g;' > /tmp/tempbozo
egrep -e "^captivefs" /etc/mtab | egrep -e "/mnt/" | perl -pi -e 's/\/mnt\///g;' >> /tmp/tempbozo
cut -f2 -d" " /tmp/tempbozo > /tmp/tempbozo1
awk 'BEGIN { FS=":" } { printf ("%0s %s\n","\""$1"\" ","\"\" \\")}' /tmp/tempbozo1 > /tmp/bozo
rm -f /tmp/tempbozo
rm -f /tmp/tempbozo1
}
#----------------------------------------------------------------------------------------------------
info_ddialog_partition_repertoire()  # prepare le listing des fichiers a partager et a monter pour une boite de dialogue
{
info_ddialog
rm -f /tmp/bozo
egrep -e "^/dev" /tmp/fichier_disque_dur | grep -v "W95 Ext'd" | grep -v "Extended" | \
perl -pi -e 's/\*//g;  s/\+/ /g; s/\-/ /g; s/  /:/g; s/:+/:/g;' | \
awk 'BEGIN { FS=":" } { printf ("%0s %0s\n","\""$1"\" \"",$6"\" \\")}' > /tmp/bozo

rm -f /tmp/tempbozo
rm -f /tmp/tempbozo1
egrep -e "^/dev" /etc/mtab | egrep -e "/mnt/" | grep -v "serveur_" | perl -pi -e 's/\/mnt\///g;' > /tmp/tempbozo
egrep -e "^captivefs" /etc/mtab | egrep -e "/mnt/" | perl -pi -e 's/\/mnt\///g;' >> /tmp/tempbozo
cut -f2 -d" " /tmp/tempbozo > /tmp/tempbozo1
awk 'BEGIN { FS=":" } { printf ("%0s %s\n","\""$1"\" ","\"\" \\")}' /tmp/tempbozo1 >> /tmp/bozo
rm -f /tmp/tempbozo
rm -f /tmp/tempbozo1
}
#----------------------------------------------------------------------------------------------------
colorier_selection_info()	# selection mise dans le fichier /tmp/couleurs_info
{
perl -pi -e 's/$/\\n/g;' /tmp/fichier_disque_dur
perl -pi -e 's/^\\n/\\Zn/g;' /tmp/fichier_disque_dur
perl -pi -e 's/FAT32/\\Z4FAT32\\Zn/g;' /tmp/fichier_disque_dur
perl -pi -e 's/FAT16/\\Z4FAT16\\Zn/g;' /tmp/fichier_disque_dur
perl -pi -e 's/NTFS/\\Zb\\Z4NTFS\\Zn/g;' /tmp/fichier_disque_dur
perl -pi -e 's/Linux/\\Z2Linux\\Zn /g;' /tmp/fichier_disque_dur
perl -pi -e 's/Disk/\\Zb\\Z3Disque\\Zn/g;' /tmp/fichier_disque_dur
perl -pi -e 's/Taille Mo/\\Zb\\Z1Taille Mo\\Zn/g;' /tmp/fichier_disque_dur
perl -pi -e 's/__/\\Z0__\\Zn/g;' /tmp/fichier_disque_dur
perl -pi -e 's/Device/\\Z2Device\\Zn/g;' /tmp/fichier_disque_dur
perl -pi -e 's/\\Zn\\n
//g;' /tmp/fichier_disque_dur
perl -pi -e 's/\\Zn
//g;' /tmp/fichier_disque_dur
grep -v "phys" /tmp/fichier_disque_dur | grep -v "Extended" | grep -v "Ext'd" |grep -v "cylinders" | grep -v "heads" | grep -v "bytes" |grep -v "swap" | grep -v "phys=" | grep -v "sectors" | grep -v "Units" > /tmp/couleurs_info
}
#----------------------------------------------------------------------------------------------------
boite_couleurs_exec_sauve()
{
perl -pi -e 's/FAT32/\\Z4FAT32\\Zn+/g; \
s/FAT16/\\Z4FAT16\\Zn+/g; \
s/NTFS/\\Z4NTFS\\Zn+/g; \
s/Linux/\\Z2Linux\\Zn+/g; \
s/\+ / /g; s/\+/ /g;' /tmp/exec_dialog
#perl -pi -e 's/Extended/Extended /g;' /tmp/exec_dialog
}
#----------------------------------------------------------------------------------------------------
verifier_partition_oscar()
{
oscar_sur_partition=non
verifier_partition_montee_linux=`cat /tmp/verifier_partition_montee_oscar`
rm -f /tmp/verifier_partition_montee_oscar
if ( test -e $verifier_partition_montee_linux/etc/conf.d/hostname )
then
	cut -d"\"" -f2 $verifier_partition_montee_linux/etc/conf.d/hostname > /tmp/test_partition_gentoo_oscar
	hostname_oscar=`cat /tmp/test_partition_gentoo_oscar`
	rm -f /tmp/test_partition_gentoo_oscar
	if [ "$hostname_oscar" = OSCAR ]	# oscar installe sur le poste
	then
		oscar_sur_partition=oui
	fi
fi
}
#----------------------------------------------------------------------------------------------------
determiner_partition_oscar()
{
cut -d":" -f1 /tmp/temp1_oscar > /tmp/temp2_oscar
test_sdai=`cat /tmp/temp2_oscar`
if ! [ "$test_sdai" = "" ]
then
	test_quitter=`expr substr $test_sdai 1 2`
	if ! [ "$test_quitter" = "sd" ]	# la partition commance par sd
	then
		rm -f /tmp/temp1_oscar
		rm -f /tmp/temp2_oscar
		return
	fi
	echo "$test_sdai" > /tmp/monter_partition
	autoriser_monter_partition_oscar
	partition_montee_linux=`cat /tmp/monter_partition`
	cp -f /tmp/monter_partition /tmp/verifier_partition_montee_oscar
	rm -f /tmp/monter_partition
	verifier_partition_oscar
	if [ "$oscar_sur_partition" = oui ]	# oscar installe sur le poste
	then
		perl -pi -e 's/\//__JF__/g; s/\"/__OUI__/g; s/\\/__FIN__/g;' /tmp/bozo
		grep -i "$test_sdai" /tmp/bozo > /tmp/temp3
		cp -f /tmp/temp3 /tmp/temp4
		perl -pi -e 's/Linux/OSCAR /g;' /tmp/temp4
		echo "perl -pi -e 's/`cat /tmp/temp3`/`cat /tmp/temp4`/g;' /tmp/bozo" > /tmp/exec_nom
	        chmod +x /tmp/exec_nom
    		/tmp/exec_nom
    		perl -pi -e 's/__FIN__/\\/g; s/__JF__/\//g; s/__OUI__/\"/g;' /tmp/bozo
		rm -f /tmp/exec_nom
		rm -f /tmp/temp3
		rm -f /tmp/temp4
	fi
	if ! ( test -e /tmp/partition_deja_montee )
	then
		umount $partition_montee_linux 2>/dev/null ; sync
	else
		rm -f /tmp/partition_deja_montee
	fi
	echo "perl -pi -e 's/`cat /tmp/temp2_oscar`://g;' /tmp/temp1_oscar" > /tmp/exec_nom
        chmod +x /tmp/exec_nom
	/tmp/exec_nom	
	rm -f /tmp/exec_nom
else
	rm -f /tmp/temp1_oscar
	rm -f /tmp/temp2_oscar
	return
fi
determiner_partition_oscar
}
#----------------------------------------------------------------------------------------------------
modifier_Linux_en_OSCAR()
{
grep -v "swap" /tmp/bozo | grep -v "LVM" > /tmp/temp11_oscar
grep -ci "Linux" /tmp/temp11_oscar > /tmp/nb_linux
nb_linux=`cat /tmp/nb_linux`
rm -f /tmp/nb_linux
if ! [ "$nb_linux" = 0 ]
then
	grep -i "Linux" /tmp/temp11_oscar > /tmp/temp1_oscar
	perl -pi -e 's/\"//g; s/\\//g; s/\///g; s/mnt//g; s/dev//g; s/Zn//g;' /tmp/temp1_oscar
	cp -f /tmp/temp1_oscar /tmp/temp2_oscar
	echo `gawk '{ print$1 ":" }' /tmp/temp2_oscar` > /tmp/temp1_oscar
	perl -pi -e 's/ //g;' /tmp/temp1_oscar
	determiner_partition_oscar
fi
rm -f /tmp/temp1_oscar
rm -f /tmp/temp11_oscar
}
#----------------------------------------------------------------------------------------------------
lancer_exec_dialog()
{
boite_couleurs_exec_sauve
chmod +x /tmp/exec_dialog
/tmp/exec_dialog
if ( test -e /tmp/sortir )
then
        return
fi
if ! ( test -e /tmp/tempfile )
    then 
    exit
fi
}
#----------------------------------------------------------------------------------------------------
boite_selection_bozo()	## réalise la boite de selection avec exec_dialog_src pour les progammes externes
			## la réponse /dev/hdaiii est mise dans /tmp/tempfile
{
cp /usr/share/oscar/usr/exec_dialog_src /tmp/exec_dialog -f

modifier_Linux_en_OSCAR
cat /tmp/bozo >> /tmp/exec_dialog

rm -f /tmp/sortir
rm -f /tmp/fichier_dd
rm -f /tmp/bozo
rm -f /tmp/tempfile
rm -f /tmp/nombre_timeout
echo '2>/tmp/tempfile
toutou=$?

#  timeout cause par restaure au boot
grep -ci "timeout" /tmp/tempfile > /tmp/nombre_timeout
nombre_timeout=`cat /tmp/nombre_timeout`
if [ $nombre_timeout = 1 ]
then
	echo "accepter" > /tmp/tempfile
	toutou=0
fi

# vérification grandeur de boite pour la définition écran:
grep -ci "t make" /tmp/tempfile > /tmp/erreur_definition_ecran
erreur_definition_ecran=`cat /tmp/erreur_definition_ecran`
rm -f /tmp/erreur_definition_ecran
if [ $erreur_definition_ecran = 1 ]
then
	rm -f /tmp/tempfile
	repertoire=non
	info_erreur_definition_ecran
	echo "" > /tmp/sortir
	exit
fi
if [ $toutou = 255 ]
then
    rm -f /tmp/tempfile
    repertoire=non
    echo "" > /tmp/sortir
    exit
elif [ $toutou = 1 ]
then
    rm -f /tmp/tempfile
    repertoire=non
    echo "" > /tmp/sortir
    exit
fi
' >> /tmp/exec_dialog

grep -ci "\" \"" /tmp/exec_dialog > /tmp/nombre_lignes_selectionnees
nombre_lignes_selectionnees=`cat /tmp/nombre_lignes_selectionnees`
rm -f /tmp/nombre_lignes_selectionnees

if ( test -e /tmp/nombre_timeout )	#  timeout cause par restaure au boot
then
	nombre_timeout=`cat /tmp/nombre_timeout`
	rm -f /tmp/nombre_timeout
fi

if [ "$nombre_lignes_selectionnees" = 1 ]
then
	if ( test -e /tmp/restaure_boot ) || ( test -e /tmp/demande_cle_disque_usb )
	then
		# une seule selection ne pas proposer la boite de dialogue pour la restauration
		grep -i "\" \"" /tmp/exec_dialog > /tmp/tempfile_selection_unique
		cut -d"\"" -f2 /tmp/tempfile_selection_unique > /tmp/tempfile
		rm -f /tmp/tempfile_selection_unique
		rm -f /tmp/restaure_boot
		rm -f /tmp/demande_cle_disque_usb
	else
		lancer_exec_dialog
	fi
else
	lancer_exec_dialog
fi
if ( test -e /tmp/tempfile )	# si annuler n existe pas
then
	reponse=`cat /tmp/tempfile`
fi
if ( test -e /tmp/restaure_boot )	#  timeout cause par restaure au boot
then
	echo
	echo -e "  \033[1;34mOK : \033[1;32m$reponse ... \033[0;m"
	echo
fi
}
#----------------------------------------------------------------------------------------------------
faire_reponse_lvm()
{
cp -f /tmp/tempfile /tmp/tempfile_lvm
perl -pi -e 's/ /,/g;' /tmp/tempfile_lvm
grep -ci "," /tmp/tempfile_lvm > /tmp/nb_tempfile_lvm
nb_tempfile_lvm=`cat /tmp/nb_tempfile_lvm`
rm -f /tmp/nb_tempfile_lvm
if [ "$nb_tempfile_lvm" != "0" ]
then # partition lvm
	partitions_lvm_existes=oui
	cut -d"," -f1 /tmp/tempfile_lvm > /tmp/tempfile_lvm1
	cut -d"," -f2 /tmp/tempfile_lvm > /tmp/tempfile_lvm2
	reponse=`cat /tmp/tempfile_lvm1`/`cat /tmp/tempfile_lvm2`
	echo "$reponse" > /tmp/tempfile
	perl -pi -e 's/\/dev\///g;' /tmp/tempfile_lvm1
	nom_simple=`cat /tmp/tempfile_lvm1`/`cat /tmp/tempfile_lvm2`
	repertoire=$nom_simple
	if ! ( test -e /mnt/$nom_simple )
	then
		mkdir -p /mnt/$nom_simple
	fi
	# montage en lvm
	mount /dev/`cat /tmp/tempfile_lvm1`/`cat /tmp/tempfile_lvm2` /mnt/$nom_simple 1>/dev/null 2>/dev/null
	rm -f /tmp/tempfile_lvm1
	rm -f /tmp/tempfile_lvm2
fi
rm -f /tmp/tempfile_lvm
}
#----------------------------------------------------------------------------------------------------
faire_exec_dialog()	# sort le chemin complet:  la selection	est reponse et /tmp/tempfile
{
modifier_Linux_en_OSCAR
cat /tmp/bozo >> /tmp/exec_dialog
rm -f /tmp/fichier_dd
rm -f /tmp/bozo
rm -f /tmp/tempfile
echo '2>/tmp/tempfile
toutou=$?
if [ $toutou = 255 ]
then
    rm -f /tmp/tempfile
    echo "" > /tmp/sortir
    exit
elif [ $toutou = 1 ]
then
    rm -f /tmp/tempfile
    echo "" > /tmp/sortir
    exit
elif [ $toutou = 3 ]
then
    demande_autre_partage
fi
' >> /tmp/exec_dialog


# Mise en couleur
boite_couleurs_exec_dialog

chmod +x /tmp/exec_dialog
/tmp/exec_dialog

if ( test -e /tmp/sortir )
then
    return
fi 
if ( test -e /tmp/fin_autre_partage )
then
    rm -f /tmp/fin_autre_partage
    return
fi 

reponse=`cat /tmp/tempfile`
faire_reponse_lvm
}
#----------------------------------------------------------------------------------------------------
faire_exec_dialog_restaure()	# sort le chemin complet:  la selection	est reponse et /tmp/tempfile
{
cat /tmp/bozo >> /tmp/exec_dialog
rm -f /tmp/fichier_dd
rm -f /tmp/bozo
rm -f /tmp/tempfile
echo '2>/tmp/tempfile
toutou=$?
if [ $toutou = 255 ]
then
    rm -f /tmp/tempfile
    echo "" > /tmp/sortir
    exit
elif [ $toutou = 0 ] # ok
then
    echo "base" > /tmp/reponse
    exit
elif [ $toutou = 1 ]
then
    rm -f /tmp/tempfile
    echo "" > /tmp/sortir
    exit
elif [ $toutou = 3 ] # selection
then
    echo "selection" > /tmp/reponse
    exit
fi
' >> /tmp/exec_dialog

# Mise en couleur
boite_couleurs_exec_dialog
chmod +x /tmp/exec_dialog

/tmp/exec_dialog
if ( test -e /tmp/sortir )
then
    return
fi 
reponse=`cat /tmp/tempfile`
}
#----------------------------------------------------------------------------------------------------
selection_disque()	# a partir d'une selection dans /tmp/tempfile donne les caracteristique des disques
			#    sort le chemin complet:
				# la partition et le nom_simple
				# le disque
			# donnée /tmp/tempfile = /dev/hdaiii
{
rm -f /tmp/nom_simple
cut -c6-50 /tmp/tempfile > /tmp/nom_simple	# hdaiii

nom_simple=`cat /tmp/nom_simple`	# reponse du nom simple soit hdaiii
if ! [ "$nom_simple" = "" ]
then
	nom_disq=`expr substr $nom_simple 1 3`	#hda ou sda
	num_part=`expr substr $nom_simple 4 3`	#iii
fi
rm -f /tmp/disque
cp -f /tmp/nom_simple /tmp/partition # hdaiii
echo "$nom_disq" > /tmp/disque	# hda

### reponses completes:

partition=`cat /tmp/partition`	# si utilisé avec runme	# hdaiii
disque=`cat /tmp/disque`	# si utilisé avec runme	# hda

rm -f /tmp/tempfile1
rm -f /tmp/tempfile2
}
#----------------------------------------------------------------------------------------------------
prepare_boucle_partition_ancien()	##  /tmp/tempfile # toutes les partitions du type séparées par : hdaiii:hdaiii
		##  /tmp/partfile # toutes les partitions du type séparées par : ide/h0/b0/t0/l0/partiii:ide/..
{
type=`cat /tmp/tempfile`
rm -f /tmp/temp$type
rm -f /tmp/part$type
rm -f /tmp/nombre

info_ddialog	# donne /tmp/fichier_disque_dur /tmp/fichier_partitions et /etc/tab_disq

grep -i "$type" /tmp/fichier_disque_dur | grep -v "swap" | cut -d/ -f3 > /tmp/temp$type	#	hdaiii
grep -ci "$type" /tmp/fichier_disque_dur > /tmp/nombre
grep -i "$type" /tmp/fichier_partitions | cut -d/ -f3-8 > /tmp/part$type #	scsi/h1/b0/t0/l0h/partiii
rm -f /tmp/tempfile
rm -f /tmp/partfile
echo `gawk '{ print $1 ":" } ' /tmp/temp$type` > /tmp/tempfile
echo `gawk '{ print $1 ":" } ' /tmp/part$type` > /tmp/partfile
rm -f /tmp/temp$type
rm -f /tmp/part$type
perl -pi -e 's/: /:/g;' /tmp/tempfile  ## pour enlever les espaces
perl -pi -e 's/: /:/g;' /tmp/partfile  ## pour enlever les espaces
##  /tmp/tempfile # toutes les partitions du type séparées par : hdaiii:hdaiii
##  /tmp/partfile # toutes les partitions du type séparées par : ide/h0/b0/t0/l0/partiii:ide/..
}
#----------------------------------------------------------------------------------------------------
prepare_boucle_partition()	##  /tmp/tempfile # toutes les partitions du type séparées par : hdaiii:hdaiii
	##  /tmp/partfile # toutes les partitions du type séparées par : ide/h0/b0/t0/l0/partiii:ide/..
{
type=`cat /tmp/tempfile`
#	rm -f /tmp/part$type
rm -f /tmp/nombre
if ! ( test -e /tmp/client_boucle_parted )
then
	info_ddialog	# donne /tmp/fichier_disque_dur /tmp/fichier_partitions et /etc/tab_disq
else	# /tmp/fichier_disque_dur du serveur
	cp -f /tmp/fichier_disque_dur_serveur /tmp/fichier_disque_dur
	rm -f /tmp/client_boucle_parted
fi
# if [ "$type" = "ntfs" ] # car on peut perdre la valeur ntfs sur la ligne suivante
# then
#    type=hpfs
# fi
if [ "$type" = "swap" ] # pour prendre la partition swap
then
	# laisser swap et retirer les partition cachées Hidden avec H ou h soit idden
	grep -i "$type" /tmp/fichier_disque_dur | grep -v "idden" | grep -v "^Units" | cut -d/ -f3 > /tmp/tempfichier	#	hdaiii
else	# tout les autres cas
	# retirer les partition cachées Hidden avec H ou h soit idden et la swap
	grep -i "$type" /tmp/fichier_disque_dur | grep -v "swap" | grep -v "idden" | grep -v "^Units" | cut -d/ -f3 > /tmp/tempfichier	#	hdaiii
fi

grep -ci "$type" /tmp/tempfichier > /tmp/nombre

# if [ "$type" = "hpfs" ] # si besoin du type ntfs pour la suite
# then
#    type=ntfs
# fi

rm -f /tmp/tempfile

echo `gawk '{ print $1 ":" } ' /tmp/tempfichier` > /tmp/tempfile
rm -f /tmp/tempfichier
perl -pi -e 's/: /:/g; s/::/:/g;' /tmp/tempfile  ## pour enlever les espaces
##  /tmp/tempfile # toutes les partitions du type séparées par : hdaiii:hdaiii
##  /tmp/partfile # toutes les partitions du type séparées par : ide/h0/b0/t0/l0/partiii:ide/...
}
#----------------------------------------------------------------------------------------------------
boucle_partition() # sortir la presence d'une sauvegarde
{
rm -f /tmp/tempfile
echo "$type" > /tmp/tempfile
prepare_boucle_partition
nombretype=`cat /tmp/nombre`
rm -f /tmp/nombre

numero=0
cp -f /tmp/tempfile /tmp/temp_ligne_deux_points
rm -f /tmp/tempfile
until  ( test  $numero = $nombretype )
    do
	rm -f /tmp/temp_ligne_deux_points1
#	rm -f /tmp/partfile1
	numero=$[$numero+1]
	cut -d":" -f$numero /tmp/temp_ligne_deux_points > /tmp/temp_ligne_deux_points1	#hdaiii
#	cut -d":" -f$numero /tmp/partfile > /tmp/partfile1	#ide/h0/b0/t0/l0/hdaiii
	reponse=`cat /tmp/temp_ligne_deux_points1`
	reparti=$reponse  #`cat /tmp/partfile1`
	rm -f /tmp/temp_ligne_deux_points1
#	rm -f /tmp/partfile1
	if ! [ "$reponse" = "" ] # si la partition du type existe chercher la sauvegarde
	then	
		echo "$reponse" > /tmp/monter_partition
		autoriser_monter_partition_oscar
		partition_sauvegarde=`cat /tmp/monter_partition`
		rm -f /tmp/monter_partition

		if ( test -e $partition_sauvegarde/oscar/image.partimage.000 ) || ( test -e $partition_sauvegarde/oscar/image.ntfs.00 ) || ( test -e $partition_sauvegarde/oscar/image_dar.1.dar ) || ( test -e $partition_sauvegarde/oscar/image_fsa.fsa )
		then
			echo " " >> /tmp/fichier_disque_dur			
			presence_sauvegarde=oui
			rm -f /tmp/temp_ligne_deux_points
		#	rm -f /tmp/partfile
			if [ "$partition_sauvegarde" != "" ]
			then
				umount $partition_sauvegarde 2>/dev/null ; sync
			fi
			return
		fi
	fi	
    done
rm -f /tmp/tempfile
# rm -f /tmp/partfile
}
#----------------------------------------------------------------------------------------------------
boites_demande_partition_repertoire()
{
info_ddialog_partition_repertoire

cp /usr/share/oscar/usr/exec_dialog_src /tmp/exec_dialog -f

grep -v "swap" /tmp/bozo > /tmp/temp
cp -f /tmp/temp /tmp/bozo
if ( test -e /tmp/partage_linux )
then
	rm -f /tmp/partage_linux
	grep -v "NTFS" /tmp/bozo > /tmp/temp
	cp -f /tmp/temp /tmp/bozo
fi
rm -f /tmp/temp
faire_exec_dialog
if ( test -e /tmp/sortir )
    then
    return
fi 
}
#----------------------------------------------------------------------------------------------------
trouver_type_partition_ancien()
{
# ancien : id_type=`sfdisk /dev/$disque -c $numero 2>/dev/null`
finir_sousprogramme_trouver_type_partition=non
if [ "$id_type" = "83" ]
then 
	type=linux
elif [ "$id_type" = "82" ]
then
	type=linux_swap
elif [ "$id_type" = "85" ]
then
	type=linux
elif [ "$id_type" = "8e" ]
then 
	type=linux
elif [ "$id_type" = "c" ]
then 
	type=vfat
elif [ "$id_type" = "b" ]
then 
	type=vfat
elif [ "$id_type" = "e" ]
then 
	type=vfat
elif [ "$id_type" = "f" ]
then 
	type=erreur
elif [ "$id_type" = "4" ]
then 
	type=vfat
elif [ "$id_type" = "6" ]
then 
	type=vfat
elif [ "$id_type" = "7" ]
then 
	type=ntfs
else	# autre type
	finir_sousprogramme_trouver_type_partition=oui
	return 1
fi
}
#----------------------------------------------------------------------------------------------------
boites_montage()
{
# La partition ... est montée dans le répertoire
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title " `cat $chemin_langue/menu_346` " \
	--exit-label "`cat $chemin_langue/Continuer`" --textbox "/tmp/fichiertmp" 0 0 \
	--and-widget --colors --ok-label "`cat $chemin_langue/Voir` $repertoire" --cancel-label "`cat $chemin_langue/Explorer`" \
	--help-button --help-label "`cat $chemin_langue/Taille`" --extra-button --extra-label "`cat $chemin_langue/Continuer`" \
	--menu "`cat /tmp/fichiertmp2`" 10 0 0 \
		"" "`cat $chemin_langue/msgbox_30` \Z2$type\Zb\Z3 $repertoire\Zn `cat $chemin_langue/menu_183`\Z2 /mnt/$repertoire\Zn "
	case $? in
    1)	# Explorer
	mc /mnt/$repertoire
	boites_montage;;
    3)	# continuer
        rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	return;;
    0) # Voir le repertoire
    	boites_montage;;
    2) # Taille des fichiers
        rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	if [ "$reponse" = "" ]
	then
		umount /mnt/$repertoire 2>/dev/null ; sync
		echo " " >> /tmp/fichiertmp
		echo " " >> /tmp/fichiertmp
		echo "             `cat $chemin_langue/DESOLE`                 " >> /tmp/fichiertmp
		echo " " >> /tmp/fichiertmp
		echo "    `cat $chemin_langue/Partition` $repertoire `cat $chemin_langue/menu_184` ...  " >> /tmp/fichiertmp
		echo " " >> /tmp/fichiertmp
		echo " " >> /tmp/fichiertmp
	elif [ "$type" = "ntfs" ]
	then
		if ( test -e /tmp/fichiertmp_ntfs )
		then
		    echo "`cat /tmp/fichiertmp_ntfs`" >> /tmp/fichiertmp
		    rm -f /tmp/fichiertmp_ntfs
		fi
	fi

	echo "`df /mnt/$repertoire | grep "$repertoire"`" > /tmp/toutes_les_valeurs
	grep -i "dev" /tmp/toutes_les_valeurs > /tmp/toutes_les_valeurs1
	
	valeur1=`awk '{print$2}' /tmp/toutes_les_valeurs1`
	valeur2=`awk '{print$3}' /tmp/toutes_les_valeurs1`
	valeur3=`awk '{print$5}' /tmp/toutes_les_valeurs1`
		
	rm -f /tmp/toutes_les_valeurs
	rm -f /tmp/toutes_les_valeurs1

	valeur1=$[valeur1/1000]
	valeur2=$[valeur2/1000]
	valeur2=$[valeur1-valeur2]
	
	echo "`cat $chemin_langue/repertoire_1` /mnt/$repertoire, `cat $chemin_langue/repertoire_2` $valeur3 : " >> /tmp/fichiertmp
	echo " " >> /tmp/fichiertmp
	echo "$valeur2 Mo `cat $chemin_langue/repertoire_3` $valeur1 Mo " >> /tmp/fichiertmp
	echo " " >> /tmp/fichiertmp
	echo "Mo" >> /tmp/fichiertmp
	
	echo "`du /mnt/$repertoire --max-depth=1 -ma`" >> /tmp/fichiertmp
	echo "perl -pi -e 's/\/mnt\/$repertoire\///g;' /tmp/fichiertmp" > /tmp/exec_nom
	chmod +x /tmp/exec_nom
	/tmp/exec_nom
	rm -f /tmp/exec_nom

	echo " " >> /tmp/fichiertmp
	echo  "\n`cat $chemin_langue/repertoire_7` \Zn\n " >> /tmp/fichiertmp2
	echo " " >> /tmp/fichiertmp2

	boites_montage;;

    255) rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
        echo "" > /tmp/sortir
	return;;
esac
}
#-----------------------------------------------------------------------------------------------------
boite_couleurs_fichier_disque_dur()
{
perl -pi -e 's/FAT32/\\Z4FAT32\\Zn+/g; \
s/FAT16/\\Z4FAT16\\Zn+/g; \
s/NTFS/\\Z4NTFS\\Zn+/g; \
s/Linux/\\Z2Linux\\Zn+/g; \
s/\+ / /g; s/\+/ /g; \
s/\/dev/\\Zn\/dev/g;' /tmp/fichier_disque_dur
perl -pi -e 's/ 1  1  /      /g;' /tmp/fichier_disque_dur
}
#----------------------------------------------------------------------------------------------------
boite_couleurs_exec_dialog()
{
perl -pi -e 's/FAT32/\\Z4FAT32\\Zn+/g; \
s/NTFS/\\Z4NTFS\\Zn+/g; \
s/Linux/\\Z2Linux\\Zn+/g; \
s/\+ / /g; s/\+/ /g;' /tmp/exec_dialog
}
#----------------------------------------------------------------------------------------------------
cherche_partition_lvm()
{
# avec /dev/sda1 ou /mapper/scribe-
# dans /tmp/partition_lvm_existe le nom_simple
perl -pi -e 's/\/\//\//g; s/}/\+/g; s/\/mapper\//mapper\//g; s/ //g;' /tmp/partition_lvm_cherchee
grep -ci "mapper/" /tmp/partition_lvm_cherchee > /tmp/nb_slash_lvm
nb_slash_lvm=`cat /tmp/nb_slash_lvm`
rm -f /tmp/nb_slash_lvm
rm -f /tmp/partition_lvm_existe
if [ "$nb_slash_lvm" = "0" ]
then
	partition_lvm=non
else
	cp -f /tmp/partition_lvm_cherchee /tmp/nom_simple
	perl -pi -e 's/ //g; s/\+/\//g; s/mapper\///g; s/\/\//\//g; s/-/\//g;' /tmp/nom_simple
	if ! ( test -e /mnt/`cat /tmp/nom_simple` )
	then
		mkdir -p /mnt/`cat /tmp/nom_simple`
	fi
	nom_simple=`cat /tmp/nom_simple`
	perl -pi -e 's/mapper\///g;' /tmp/partition_lvm_cherchee
	cp -f /tmp/nom_simple /tmp/partition_lvm_existe
	partition_lvm=oui
fi
}
#----------------------------------------------------------------------------------------------------
boites_demande_montage() # avec parted
{
lecture_connecteur_usb
echo "0" > /tmp/hauteur
info_ddialog_menu
cp /usr/share/oscar/usr/exec_dialog_src /tmp/exec_dialog -f
grep -v "swap" /tmp/bozo | grep -v "lvm" > /tmp/temp5
if ( test -e /tmp/sp_nettoyer_e2fsck )
then
	grep Linux /tmp/temp5 > /tmp/temp6
	cp -f /tmp/temp6 /tmp/temp5
	rm -f /tmp/temp6
fi
cp -f /tmp/temp5 /tmp/bozo
rm -f /tmp/temp5
faire_exec_dialog
if ( test -e /tmp/sortir )
then
	return
fi

cp -f /tmp/tempfile /tmp/partition_lvm_cherchee
cherche_partition_lvm
if [ "$partition_lvm" = "non" ]
then
	selection_disque
fi
}
#----------------------------------------------------------------------------------------------------
boites_demande_montage_ancien()
{
lecture_connecteur_usb
echo "0" > /tmp/hauteur
info_ddialog_menu
cp /usr/share/oscar/usr/exec_dialog_src /tmp/exec_dialog -f
grep -v "swap" /tmp/bozo | grep -v "Linux LVM" > /tmp/temp5
if ( test -e /tmp/sp_nettoyer_e2fsck )
then
	grep -v "NTFS" /tmp/temp5 > /tmp/temp6
	cp -f /tmp/temp6 /tmp/temp5
	rm -f /tmp/temp6
fi
cp -f /tmp/temp5 /tmp/bozo
rm -f /tmp/temp5
faire_exec_dialog
if ( test -e /tmp/sortir )
then
	return
fi

cp -f /tmp/tempfile /tmp/partition_lvm_cherchee
cherche_partition_lvm
if [ "$partition_lvm" = "non" ]
then
	selection_disque
fi
}
#----------------------------------------------------------------------------------------------------
supprime_sd_usb_oscar_pour_installe_oscar_dd()
{
if ( test -e /tmp/non_proposer_linux_usb_oscar_demarrage )
then
	grep -ci "livemnt/boot" /etc/mtab > /tmp/nb_test_sd_oscar_usb
	nb_test_sd_oscar_usb=`cat /tmp/nb_test_sd_oscar_usb`
	rm -f /tmp/nb_test_sd_oscar_usb
	if [ "$nb_test_sd_oscar_usb" != "0" ]
	then
		grep -i "livemnt/boot" /etc/mtab > /tmp/test_sd_oscar_usb
		cut -d" " -f1 /tmp/test_sd_oscar_usb > /tmp/test_sd_oscar_usb1	# /dev/sdb1
		perl -pi -e 's/\/dev\///g;' /tmp/test_sd_oscar_usb1
		test_sd_oscar_usb1=`cat /tmp/test_sd_oscar_usb1`
		disque_sd_oscar_usb=`expr substr $test_sd_oscar_usb1 1 3`
		echo "$disque_sd_oscar_usb" > /tmp/test_sd_oscar_usb1
		grep -v `cat /tmp/test_sd_oscar_usb1` /tmp/bozo > /tmp/test_sd_oscar_usb
		cp -f /tmp/test_sd_oscar_usb /tmp/bozo
		rm -f /tmp/test_sd_oscar_usb
		rm -f /tmp/test_sd_oscar_usb1
	fi
fi
rm -f /tmp/non_proposer_linux_usb_oscar_demarrage
}
#---------------------------------------------------------------------------------------------------
boite_disque_demarrage() # selectionner seulement les partitions de boot
{
prepare_fichier_temptaille
if [ "$disque_usb_demarrage" = "" ]
then
	disque_usb_demarrage=aucune_cle_demarrage
fi
rm -f /tmp/bozo
if [ "$texte_mbr" = "installe_oscar_dd" ] || [ "$texte_mbr" = "serveur_clone" ] || [ "$texte_mbr" = "sauve_mbr" ] || [ "$texte_mbr" = "recup_depuis_dvd" ]
then	# afficher tous les disques
	egrep -e "Disk \/dev" /tmp/fichier_disque_dur > /tmp/bozo1
	cut -d"/" -f1-3 /tmp/bozo1 | \
	perl -pi -e 's/,/:/g; s/ //g; s/  //g; s/Disk//g;' > /tmp/bozo2
	cut -d ":" -f1-3 /tmp/bozo2 | \
	awk 'BEGIN { FS=":" } { printf ("%0s %15s %0s\n","\""$1"\" \"",$2,$6"\" \\")}' >> /tmp/bozo
	rm -f /tmp/bozo1
	rm -f /tmp/bozo2
	supprime_sd_usb_oscar_pour_installe_oscar_dd
else
	egrep -e "^/dev" /tmp/fichier_disque_dur | egrep -e "\*" | grep -v "$disque_usb_demarrage" | \
	perl -pi -e 's/\*//g;  s/\+/ /g; s/\-/ /g; s/  /:/g; s/:+/:/g;' | \
	awk 'BEGIN { FS=" " } { printf ("%0s %15s %25s\n","\""$1"\" \"",$2,$3"\" \\")}' >> /tmp/bozo
fi
if [ "$texte_mbr" = "installe_oscar_dd" ] || [ "$texte_mbr" = "serveur_clone" ]
then
	echo "\n\Zb\Z4 `cat $chemin_langue/selection_28` :\n\n " > /tmp/fichierquestion
	echo "\n\n\Zn`cat $chemin_langue/selection_34`" >> /tmp/fichierquestion
fi

grep -ci "dev" /tmp/bozo > /tmp/tempfile
nombre=`cat /tmp/tempfile`
if [ "$nombre" = "1" ]	# pas plus d'un disque de boot
then
	echo `cut -d"\"" -f2 /tmp/bozo` > /tmp/tempfile
else
	if ( test -e /tmp/disque_boot_et_grub ) # c'est le client clone, multi ou image qui demande
	then
		partition_oscar_client=`cat /tmp/partition_oscar_client`
		if ( test -e /tmp/client_nfs_lance ) # c'est le client nfs qui demande
		then
			echo "/dev/`cat $partition_oscar_client/oscar/var_poste/disque_boot`" > /tmp/tempfile      # /dev/sda
		else	# c'est le client clone ou multi qui demande
			echo "/dev/$partition_oscar_client" > /tmp/tempfile      # /dev/sdai
		fi
	else
		boite_selection_bozo
	fi
fi
# dans /tmp/tempfile : /dev/sda ou sdai si else peutetre
}
#-----------------------------------------------------------------------------------------------------
demander_disque_demarrage()	# si plusieurs disques boot *
{
rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion
if ( test -e /tmp/texte_mbr )
then
	texte_mbr=`cat /tmp/texte_mbr`
	rm -f /tmp/texte_mbr
fi
if [ "$texte_mbr" = "serveur_disque" ]
then
	echo "\n\Zb\Z4 `cat $chemin_langue/selection_26` :\n\n " > /tmp/fichierquestion
	echo "\n\n\Zn`cat $chemin_langue/selection_31`" >> /tmp/fichierquestion
elif [ "$texte_mbr" = "serveur_clone" ]
then
	echo "\n\Zb\Z4 `cat $chemin_langue/selection_27` :\n\n " > /tmp/fichierquestion
	echo "\n\n\Zn`cat $chemin_langue/selection_34b`" >> /tmp/fichierquestion
elif [ "$texte_mbr" = "installe_oscar_dd" ]
then
	echo "\n\Zb\Z4 `cat $chemin_langue/selection_28` :\n\n " > /tmp/fichierquestion
	echo "\n\n\Zn`cat $chemin_langue/selection_32`" >> /tmp/fichierquestion
elif [ "$texte_mbr" = "sauve" ]
then
	echo "\n\Zb\Z4 `cat $chemin_langue/selection_29` :\n\n " > /tmp/fichierquestion
	echo "\n\n\Zn`cat $chemin_langue/selection_33`" >> /tmp/fichierquestion
elif [ "$texte_mbr" = "sauve_mbr" ]
then
	echo "\n\Zb\Z4 `cat $chemin_langue/selection_28` :\n\n " > /tmp/fichierquestion
	echo "\n\n\Zn`cat $chemin_langue/selection_34`" >> /tmp/fichierquestion
elif [ "$texte_mbr" = "sauve_transfert" ]
then
	echo "\n\Zb\Z4 `cat $chemin_langue/selection_29` :\n\n " > /tmp/fichierquestion
	echo "\n\n\Zn`cat $chemin_langue/selection_33`" >> /tmp/fichierquestion
elif [ "$texte_mbr" = "recup_depuis_dvd" ]
then
	echo "\n\Zb\Z4 `cat $chemin_langue/selection_29` :\n\n " > /tmp/fichierquestion
	echo "\n\n\Zn`cat $chemin_langue/selection_33`" >> /tmp/fichierquestion
else
	echo "\n\Zb\Z4 `cat $chemin_langue/selection_30` \Z4:\n\n " > /tmp/fichierquestion
	echo "\n\n\Zn`cat $chemin_langue/selection_35`" >> /tmp/fichierquestion
fi

# Partition de démarrage
echo " `cat $chemin_langue/selection_63` " > /tmp/menu_titre
boite_disque_demarrage
if ( test -e /tmp/sortir )
then
	exit 0
fi

rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion

#	la reponse est /dev/hdaiii dans /tmp/tempfile
}
#----------------------------------------------------------------------------------------------------
classer_ordre_disques_grub()
{
nom_ordre_disque=`cut -d":" -f1 /tmp/tempfile1`
grep -ci ":" /tmp/tempfile1 > /tmp/tempfile2
nombre=`cat /tmp/tempfile2`
if [ "$nombre" = "0" ]	#hda1:
then
	rm -f /tmp/tempfile1
	rm -f /tmp/tempfile2
	return
else
	if  (test -e /etc/demarrage_usb )	# car ajout du sd de la clé éventuellement en premier
	then
		if ! (test -e /mnt/tester_montage )
		then
			mkdir /mnt/tester_montage
		fi
		echo "$nom_ordre_disque" > /tmp/temp1
		if (test -e /tmp/cherche_oscar_pour_grub ) # prendre tous les disques
		then
			monte_nom_ordre_disque=`cat /tmp/temp1`1
		else
			monte_nom_ordre_disque=`cat /tmp/temp1`
		fi
		rm -f /tmp/temp1
		# umount /dev/$monte_nom_ordre_disque	2>/dev/null 1>/dev/null
		umount /mnt/$monte_nom_ordre_disque	2>/dev/null 1>/dev/null ; sync	# pour /dev/evms
		if ( test -e /dev/evms/$monte_nom_ordre_disque )
		then
			evms_oscar="evms/"
		else
			evms_oscar=
		fi
		mount /dev/$evms_oscar$monte_nom_ordre_disque /mnt/tester_montage 1>/dev/null 2>/dev/null
		test_monte=$?
		if ! [ "$test_monte" = "0" ]	# sinon ne pas mettre cette partition de la clé USB oscar dans /tmp/ordre_disques_grub
		then
			disque_usb_demarrage=$nom_ordre_disque	# on considère une seule fois c'est la clé de démarrage
		fi
		
		echo "$nom_ordre_disque,$valeur_ordre_disque" >> /tmp/ordre_disques_grub
		echo "$nom_ordre_disque,$valeur_reelle_ordre_disque" >> /tmp/ordre_reel_disques_grub
		
		echo "$nom_ordre_disque" > /tmp/tempfile2
		valeur_ordre_disque=$[$valeur_ordre_disque+1]
		valeur_reelle_ordre_disque=$[$valeur_reelle_ordre_disque+1]
		echo "perl -pi -e 's/`cat /tmp/tempfile2`://g;' /tmp/tempfile1" > /tmp/exec_nom
		chmod +x /tmp/exec_nom
		/tmp/exec_nom
		classer_ordre_disques_grub
		umount /mnt/tester_montage  2>/dev/null 1>/dev/null ; sync
	else
		echo "$nom_ordre_disque,$valeur_ordre_disque" >> /tmp/ordre_disques_grub
		echo "$nom_ordre_disque" > /tmp/tempfile2
		valeur_ordre_disque=$[$valeur_ordre_disque+1]
		echo "perl -pi -e 's/`cat /tmp/tempfile2`://g;' /tmp/tempfile1" > /tmp/exec_nom
		chmod +x /tmp/exec_nom
		/tmp/exec_nom
		classer_ordre_disques_grub
	fi
fi
}
#----------------------------------------------------------------------------------------------------
controle_plusieurs_boot_par_disque()
{
# determiner le nombre de disques identiques
cut -d":" -f1 /tmp/tempboot > /tmp/tempboot1
valeur_partition_boot=`cat /tmp/tempboot1`
if ! [ "$valeur_partition_boot" = "" ]
then
    nom_disque_boot=`expr substr $valeur_partition_boot 1 3`
    cp -f /tmp/tempboot /tmp/tempboot2
    perl -pi -e 's/:/\n/g;' /tmp/tempboot2	# met en colonne

    grep -ci "$nom_disque_boot" /tmp/tempboot2 > /tmp/nombre_boot_par_disque
    nombre_boot_par_disque=`cat /tmp/nombre_boot_par_disque`
    rm -f /tmp/nombre_boot_par_disque
    rm -f /tmp/tempboot2
    if ! [ "$nombre_boot_par_disque" = "1" ]
    then
    	# Le disque possède plusieurs boots
        DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
        --backtitle "`cat /etc/banniere_oscar`" \
        --title " `cat $chemin_langue/DESOLE` " \
        --ok-label "`cat $chemin_langue/Continuer`"  \
        --msgbox "\n\Zn\Z2`cat $chemin_langue/msgbox_33` \Zb\Z3$nom_disque_boot\Zn\Z2 `cat $chemin_langue/msgbox_34`. \n \
        \n`cat $chemin_langue/msgbox_27`\Zn\Z2." 9 50
	case $? in
	    0)  echo "" > /tmp/sortir
		rm -f /tmp/tempboot
		rm -f /tmp/tempboot1
		rm -f /tmp/tempfile
	        exit
	    ;;
	    255)	echo "" > /tmp/sortir 
		rm -f /tmp/tempboot
		rm -f /tmp/tempboot1
		rm -f /tmp/tempfile
		exit;;
        esac
    fi
    # supprimer dans /tmp/tempboot /tmp/tempboot1
    echo "perl -pi -e 's/`cat /tmp/tempboot1`://g;' /tmp/tempboot" > /tmp/exec_nom
    chmod +x /tmp/exec_nom
    /tmp/exec_nom
    rm -f /tmp/exec_nom
    controle_plusieurs_boot_par_disque
fi
rm -f /tmp/tempboot
rm -f /tmp/tempboot1
}
#----------------------------------------------------------------------------------------------------
cherche_disque_boot()
{
if ( test -e /tmp/sp_editer_options_boot )
then
	rm -f /tmp/sp_editer_options_boot
	disque_boot=`cat /tmp/disque_boot`		#hda
	partition_boot=`cat /tmp/partition`		#hdaiii
	nom_simple=`cat /tmp/nom_simple`		#hdaiii
	disque_boot_grub=`cat /tmp/disque_boot_grub`	# numero du disque pour grub
	return
fi
	# réalise aussi le fichier /tmp/ordre_disques_grub
# echo "\*" > /tmp/tempfile # AVANT PARTED	# les disques boot sd et hd
echo "boot" > /tmp/tempfile	# les disques boot sd et hd
if ( test -e /tmp/cherche_oscar_pour_grub ) # prendre tous les disques
then
	echo "^Disk" > /tmp/tempfile
fi

prepare_boucle_partition

# verifier si disque sda possede une partition boot
grep -ci "sda" /tmp/tempfile > /tmp/test_sda_existe
test_sda_existe=`cat /tmp/test_sda_existe`
rm -f /tmp/test_sda_existe
if [ "$test_sda_existe" = "0" ]	# pas de partition boot sur poste alors ajouter sda
then
	echo "sda1:`cat /tmp/tempfile`" > /tmp/temp_sda_boot
	cp -f /tmp/temp_sda_boot /tmp/tempfile
	rm -f /tmp/temp_sda_boot
	nombretype=`cat /tmp/nombre`
	nombretype=$[$nombretype+1]
	echo "$nombretype" > /tmp/nombre
fi

# dans /tmp/tempfile: hda1:sda1: nombretype=2
# dans /tmp/partfile: scsi/h0/b0/t0/l0/partiii:ide/h0/b0/t0/l0/partiii:

nombretype=`cat /tmp/nombre`
rm -f /tmp/nombre

if ! [ "$nombretype" = 1 ]	#hda1:
then
	if ! (test -e /tmp/cherche_oscar_pour_grub )
	then 
		cp -f /tmp/tempfile /tmp/tempboot	# pour controle_plusieurs_boot_par_disque
		controle_plusieurs_boot_par_disque
	fi
	# pour grub classer dans l'ordre les disques dans le fichier /tmp/ordre_disques_grub:
	cp -f /tmp/tempfile /tmp/tempfile1
	valeur_ordre_disque=0
	valeur_reelle_ordre_disque=0
	rm -f /tmp/ordre_disques_grub
	rm -f /tmp/ordre_reel_disques_grub
	classer_ordre_disques_grub
	# fin de classement
	rm -f /tmp/sortir

	if ! (test -e /tmp/cherche_oscar_pour_grub )
	then
		demander_disque_demarrage
	fi
	selection_disque
	disque_boot=`cat /tmp/disque`
	partition_boot=`cat /tmp/partition`
	if ( test -e /etc/demarrage_usb )	# car ajout du sd de la clé éventuellement en premier
	then
	    	echo "grep -i \"`cat /tmp/disque`\" /tmp/ordre_reel_disques_grub > /tmp/tempfile
	    	if ( test -e /tmp/ordre_disques_grub )
	    	then
			grep -i \"`cat /tmp/disque`\" /tmp/ordre_disques_grub > /tmp/tempfile1
		else
			echo "" > /tmp/tempfile1
		fi" > /tmp/exec_nom
	else
		if ( test -e /tmp/ordre_disques_grub )
	    	then
			echo "grep -i \"`cat /tmp/disque`\" /tmp/ordre_disques_grub > /tmp/tempfile" > /tmp/exec_nom
		else
			echo "echo "" > /tmp/tempfile" > /tmp/exec_nom
		fi
	fi
	chmod +x /tmp/exec_nom
	/tmp/exec_nom
	disque_boot_grub=`cut -d"," -f2 /tmp/tempfile`
	if (test -e /etc/demarrage_usb )
	then
		if ! ( test -e /tmp/disque_boot_et_grub ) # c'est le client clone, multi ou image qui demande
		then
			teste_normal=`cat /tmp/tempfile`
			teste_reel=`cat /tmp/tempfile1`
			rm -f /tmp/tempfile1
			if ! [ "$teste_normal" = "$teste_reel" ]
			then
				lettres_disques_sd=`cat /tmp/disque`
				if [ "$lettres_disques_sd" = "sdb" ]
				then
					echo "sda" > /tmp/lettres_disques_sd
				elif [ "$lettres_disques_sd" = "sdc" ]
				then
					echo "sdb" > /tmp/lettres_disques_sd
				elif [ "$lettres_disques_sd" = "sdd" ]
				then
					echo "sdc" > /tmp/lettres_disques_sd
				elif [ "$lettres_disques_sd" = "sde" ]
				then
					echo "sdd" > /tmp/lettres_disques_sd
				elif [ "$lettres_disques_sd" = "sdf" ]
				then
					echo "sde" > /tmp/lettres_disques_sd
				elif [ "$lettres_disques_sd" = "sdg" ]
				then
					echo "sdf" > /tmp/lettres_disques_sd
				fi
			fi
		fi
	fi
else
	# /tmp/partfile contient ide/h0/b0/t0/l0/partiii:
	nom_simple=`cut -d":" -f1 /tmp/tempfile`		#hdaiii
	partition_boot=$nom_simple
	disque_boot=`expr substr $nom_simple 1 3`       #hda
	disque_boot_grub=0
fi
rm -f /tmp/disque_boot
rm -f /tmp/partition
rm -f /tmp/nom_simple
rm -f /tmp/tempfile
echo "$disque_boot" > /tmp/disque_boot		#hda
echo "$partition_boot" > /tmp/partition		#hdaiii
echo "$nom_simple" > /tmp/nom_simple		#hdaiii
echo "$disque_boot_grub" > /tmp/disque_boot_grub	# numero du disque pour grub

# réalise le fichier /tmp/ordre_disques_grub	# hda,0
}
#----------------------------------------------------------------------------------------------------
boites_demande_de_montage_partage()
{
cp /usr/share/oscar/usr/exec_dialog_src /tmp/exec_dialog -f
info_ddialog_de_montage
faire_exec_dialog
if ( test -e /tmp/sortir )
    then
    return
fi 
}
#----------------------------------------------------------------------------------------------------
demande_autre_partage()
{
rm -f /tmp/tempfile
# chemin complet du répertoire à partager
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Annuler`"  --title "`cat /tmp/protocole_partage`" \
	--inputbox "\n\n`cat $chemin_langue/inputbox_35` : \n " 0 0 /mnt/ 2>/tmp/tempfile
	case $? in
    1)  rm -f /tmp/tempfile
        echo "" > /tmp/sortir
	return
	;;
    255) rm -f /tmp/tempfile
        echo "" > /tmp/sortir
	return
	;;
esac
reponse=`cat /tmp/tempfile`
echo "$reponse" > /tmp/reponse_partage_complet
rm -f /tmp/tempfile
echo "" > /tmp/fin_autre_partage
}
#----------------------------------------------------------------------------------------------------
boites_demande_demontage()
{
cp /usr/share/oscar/usr/exec_dialog_src /tmp/exec_dialog -f
echo "50" > /tmp/largeur
info_ddialog_de_montage
echo "8" > /tmp/hauteur
faire_exec_dialog
if ( test -e /tmp/sortir )
    then
    return
fi
}
#----------------------------------------------------------------------------------------------------
autoriser_monter_partition_oscar_montage()	#recherche le nombre de partitions montées
{
monter_partition=`cat /tmp/monter_partition`
rm -f /tmp/nombpart
grep -ci "/mnt/$monter_partition " /etc/mtab > /tmp/nombpart
rm -f /tmp/monter_partition
#rm -f /tmp/temppart
}
#----------------------------------------------------------------------------------------------------
autoriser_monter_partition_oscar()	# monte seulement si la partition non montée et non partition de démarrage
{
monter_partition=`cat /tmp/monter_partition`
	if ( test -e /dev/evms/$monter_partition )
	then
	    evms_oscar="evms/"
	else
	    evms_oscar=
	fi
grep -ci "/mnt/$monter_partition " /etc/mtab > /tmp/nombpart
nombpart=`cat /tmp/nombpart`
rm -f /tmp/partition_deja_montee
if [ "$nombpart" = 0 ]
then
# les 7 lignes suivantes + fi avec # ne montent pas la partition oscar si démarrage par le dd

	echo "$monter_partition" > /tmp/nombre_partition_oscar_poste 
	etude_montage donner_nombre_partition_oscar_poste
	nombpart=`cat /tmp/nombre_partition_oscar_poste`
	rm -f /tmp/partition_oscar_sur_poste
	
	if ! ( test -e /mnt/$monter_partition )
	then
		mkdir /mnt/$monter_partition
	fi
	if [ "$nombpart" = 1 ]
	then	# démarrage du dd sur cette partition
		linux_sauvegarde=
		mount /dev/$evms_oscar$monter_partition /mnt/$monter_partition 2>/dev/null
	else
		linux_sauvegarde=/mnt/$monter_partition
		if ( test -e  /tmp/besoin_type )
		then
			besoin_type=`cat /tmp/besoin_type`
			if [ "$besoin_type" = "ntfs" ]
			then
				partition_ntfs_a_monter=$evms_oscar$monter_partition
				repertoire_ntfs_a_monter=$monter_partition
				monter_ntfs
				# mount -o ro -t ntfs /dev/$monter_partition /mnt/$monter_partition
			else
				mount /dev/$evms_oscar$monter_partition /mnt/$monter_partition
			fi
		else
			mount /dev/$evms_oscar$monter_partition /mnt/$monter_partition
		fi
		echo "/mnt/$monter_partition : monté " >> /tmp/historique
	fi
else
    linux_sauvegarde=/mnt/$monter_partition
    echo "" > /tmp/partition_deja_montee
fi
echo "$linux_sauvegarde" > /tmp/monter_partition	# dans /tmp/monter_partition partition complète avec chemin
}
#----------------------------------------------------------------------------------------------------
verifier_partition_linux_oscar_sur_poste()	# la partition linux est-elle sur le poste ?
{
repertoire=`cat /tmp/linux_poste`
grep -ci "/mnt/$repertoire " /etc/mtab > /tmp/nombpart
nombpart=`cat /tmp/nombpart`
if [ "$nombpart" = 0 ]
then
	echo "$repertoire" > /tmp/nombre_partition_oscar_poste 
	etude_montage donner_nombre_partition_oscar_poste
	nombpart=`cat /tmp/nombre_partition_oscar_poste`
	rm -f /tmp/partition_oscar_sur_poste
	
	if [ "$nombpart" = 1 ]
	then	# démarrage du dd sur cette partition
		linux_sauvegarde=
	else
		linux_sauvegarde=/mnt/$repertoire
	fi
else
    linux_sauvegarde=/mnt/$repertoire
fi

echo "$linux_sauvegarde" > /tmp/linux_poste	# dans /tmp/linux_poste partition complète avec chemin
}
#----------------------------------------------------------------------------------------------------
recherche_valeurs_pour_monter_partition()	# a partir du /tmp/nom_simple et fichier /etc/tab_disq
{			# donne repertoire, partition et disque avec fichier
rm -f /tmp/tempfile
cut -c1-3 /tmp/nom_simple > /tmp/tempfile	# hda ou sda
nom_disque=`cat /tmp/tempfile`
rm -f /tmp/tempfile
cut -c4-7 /tmp/nom_simple > /tmp/tempfile	# iii
num_part=`cat /tmp/tempfile`


rm -f /tmp/tempfile1
grep -i "$nom_disque" /etc/tab_disq > /tmp/tempfile1
rm -f /tmp/tempfile2
rm -f /tmp/partition
rm -f /tmp/disque
	perl -pi -e 's/:/\//g;' /tmp/tempfile1  	## scsi/host0/bus0/target0/lun0/hda
	cut -f1-5 -d/ /tmp/tempfile1 > /tmp/tempfile2	## scsi/host0/bus0/target0/lun0	
	echo "`cat /tmp/tempfile2`/part$num_part" > /tmp/partition
	echo "`cat /tmp/tempfile2`/disc" > /tmp/disque
rm -f /tmp/tempfile1
rm -f /tmp/tempfile2

### reponses completes:
partition=`cat /tmp/partition`	# chemin complet
disque=`cat /tmp/disque`	# chemin complet
repertoire=`cat /tmp/nom_simple`
}
#----------------------------------------------------------------------------------------------------
monter_partition()	## donner le $repertoire
{
### besoin de 3 variables:   partition:  chemin complet pour dev
			#    disque:     chemin complet du disque
			#    repertoire: nom_simple du repertoire

numero=`expr substr $repertoire 4 4`
info_ddialog
# trouver_type_partition
if [ "$finir_sousprogramme_trouver_type_partition" = "oui" ]
then
	return 1
fi
if [ "$type" = "erreur" ]
then
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/DESOLE` " --ok-label "`cat $chemin_langue/Continuer`" \
	--msgbox "\n\n`cat $chemin_langue/msgbox_35`\Z4 /dev/$repertoire \Z1!!!" 10 67
	montage
	echo "" > /tmp/sortir
	return
fi

if ! ( test -e /mnt/$repertoire )
then
	mkdir /mnt/$repertoire
fi

rm -f /tmp/monter_partition
grep -i $repertoire /tmp/fichier_disque_dur | grep -ci ntfs > /tmp/nb_partition_ntfs
nb_partition_ntfs=`cat /tmp/nb_partition_ntfs`
rm -f /tmp/nb_partition_ntfs
if [ "$nb_partition_ntfs" = "1" ] # partition ntfs
then
	echo "ntfs" > /tmp/besoin_type
fi
echo "$repertoire" > /tmp/monter_partition
autoriser_monter_partition_oscar
rm -f /tmp/besoin_type

#autoriser_monter_partition_oscar_montage
}
#-----------------------------------------------------------------------------------------------------
choisir_partition_a_restaurer()
{
rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion

# Partition sauvegardée
echo " `cat $chemin_langue/menu_189` " > /tmp/menu_titre
echo "" > /tmp/menu_texte
echo "`cat $chemin_langue/selection_8a` \Zb\Z4 :\n\n " > /tmp/fichierquestion
echo "`cat $chemin_langue/selection_9`" >> /tmp/fichierquestion

runme prepare_fichier_temptaille
rm -f /tmp/bozo
egrep -e "^/dev" /tmp/fichier_disque_dur | grep -v "W95 Ext'd" |  grep -v "extended" | grep -v "Extended" | grep -v "swap" | \
perl -pi -e 's/\*//g;  s/\+/ /g; s/\-/ /g; s/  /:/g; s/:+/:/g;' | \
awk 'BEGIN { FS=" " } { printf ("%0s %15s %25s\n","\""$1"\" \"",$2,$3"\" \\")}' >> /tmp/bozo

runme boite_selection_bozo

rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion

if ( test -e /tmp/sortir )
then
	return
else
	perl -pi -e 's/\/dev\///g;' /tmp/tempfile
	base=`cat /tmp/tempfile`	# sdaiii
fi
}
#----------------------------------------------------------------------------------------------------
choix_partition_restauration() # choisit une partition pour restauration
{
partition_linux_sauvegarde_base=`cat /tmp/partition_linux_sauvegarde_base` # entrer la partition de sauvegarde Oscar
partition_base=`cat /tmp/partition_base`	# partition sauvegardée initialement

rm -f /tmp/sortir
rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion
# Partition à restaurer
echo " `cat $chemin_langue/menu_189` " > /tmp/menu_titre
echo "" > /tmp/menu_texte
echo "\n\Zb\Z4`cat $chemin_langue/menu_190` \Z3$partition_base \
\n\Zb\Z4`cat $chemin_langue/menu_191` \Z4:\n " > /tmp/fichierquestion
echo "\n\n`cat $chemin_langue/selection_36`" >> /tmp/fichierquestion

# boites_demande_montage:
lecture_connecteur_usb
# prepare_fichier_temptaille # fichier /tmp/temptaille lineaire pour changer unite en Mo
info_ddialog_menu

if ( test -e /tmp/partition_linux_sauvegarde_base )
then
	test_part=`cat /tmp/partition_linux_sauvegarde_base`
	if [ "$test_part" = "" ]
	then
		echo "__rien_du_tout__" > /tmp/partition_linux_sauvegarde_base
	fi
else
	echo "__rien_du_tout__" > /tmp/partition_linux_sauvegarde_base
fi
echo "grep -v \"`cat /tmp/partition_linux_sauvegarde_base`\" /tmp/bozo > /tmp/tempfile1" > /tmp/exec_nom
chmod +x /tmp/exec_nom
/tmp/exec_nom
rm -f /tmp/exec_nom
cp /usr/share/oscar/usr/exec_dialog_src /tmp/exec_dialog -f

perl -pi -e 's/--cancel-label \"\`cat \$chemin_langue\/Annuler\`\"/--cancel-label \"\`cat \$chemin_langue\/Annuler\`\"  --ok-label \"\`cat \/tmp\/partition_base\`\"  --extra-button --extra-label \"\`cat \$chemin_langue\/Selection\`\"/g;' /tmp/exec_dialog
grep -v "swap" /tmp/bozo | grep -v "Linux LVM" > /tmp/bozo1 # pour lvm
cp -f /tmp/bozo1 /tmp/bozo
rm -f /tmp/bozo1
faire_exec_dialog_restaure
if ( test -e /tmp/sortir )
then
	rm -f /tmp/menu_titre
	rm -f /tmp/menu_texte
	rm -f /tmp/fichierquestion
        return
fi
perl -pi -e 's/ //g;' /tmp/reponse
perl -pi -e 's/ //g;' /tmp/tempfile
variable=`cat /tmp/reponse`
rm -f /tmp/reponse

if [ "$variable" = "base" ]
then
	cp -f /tmp/partition_base /tmp/test_base_lvm
	perl -pi -e 's/\/dev\///g;' /tmp/test_base_lvm
	sauve cherche_base_lvm
	base=`cat /tmp/nom_simple`
	cp -f /tmp/nom_simple /tmp/partition_base
elif [ "$variable" = "selection" ]
then
	cp -f /tmp/tempfile /tmp/temp_reponse_lvm
	grep -ci "/mapper/" /tmp/temp_reponse_lvm > /tmp/nb_temp_reponse_lvm
	nb_temp_reponse_lvm=`cat /tmp/nb_temp_reponse_lvm`
	rm -f /tmp/nb_temp_reponse_lvm
	if [ "$nb_temp_reponse_lvm" = "1" ]
	then	# lvm
		# faire /tmp/partition_lvm_cherchee
		cp -f /tmp/tempfile /tmp/partition_lvm_cherchee
		perl -pi -e 's/}/\//g; s/\/mapper\///g;' /tmp/partition_lvm_cherchee
		perl -pi -e 's/-/\//g; s/}/\//g;' /tmp/temp_reponse_lvm
		perl -pi -e 's/mapper\//:/g;' /tmp/temp_reponse_lvm
		cut -d":" -f2 /tmp/temp_reponse_lvm > /tmp/test_base_lvm
		perl -pi -e 's/\/mapper\///g;' /tmp/test_base_lvm
		cp -f /tmp/test_base_lvm /tmp/nom_simple
		cp -f /tmp/nom_simple /tmp/partition_base
		cp -f /tmp/nom_simple /tmp/partition_lvm_existe
		rm -f /tmp/test_base_lvm
		rm -f /tmp/test_base_lvm1
	else
		selection_disque	# donne le nom_simple
		if ( test -e /tmp/sortir )
    		then
			rm -f /tmp/nom_simple
			rm -f /tmp/tempfile
			rm -f /tmp/menu_titre
			rm -f /tmp/menu_texte
			rm -f /tmp/fichierquestion
			rm -f /tmp/temp_reponse_lvm
			return
		fi
    		echo "$nom_simple" > /tmp/partition_base
	fi
fi
rm -f /tmp/tempfile
rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion
rm -f /tmp/temp_reponse_lvm
}
#----------------------------------------------------------------------------------------------------
montage() # monte une partition
{
rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion
if ! [ "$serveur_linux" = "oui" ]
then
	# Partition à monter
	echo " `cat $chemin_langue/menu_186` " > /tmp/menu_titre
	echo "\Zb\Z4`cat $chemin_langue/menu_187`\Z4 : " > /tmp/fichierquestion
else
	# Partition à partager
	echo " `cat $chemin_langue/menu_185` " > /tmp/menu_titre
	echo "\Zb\Z4`cat $chemin_langue/menu_188`\Z4 : " > /tmp/fichierquestion
fi
echo "" > /tmp/menu_texte	
echo "\n\n`cat $chemin_langue/selection_25`" >> /tmp/fichierquestion

if [ "$montage_clamav" = "oui" ]
then
	echo " `cat $chemin_langue/menu_186a` " > /tmp/menu_titre
	echo "\Zb\Z4`cat $chemin_langue/menu_187a`\Z4 : " > /tmp/fichierquestion
	montage_clamav=non
fi
boites_demande_montage
if ( test -e /tmp/sortir )
then
	rm -f /tmp/nom_simple
	rm -f /tmp/tempfile
	return
fi 

rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion

repertoire=$nom_simple

if [ "$partition_lvm" = "non" ]
then
	monter_partition
	if ( test -e /tmp/sortir )
	then
		return
	fi
else
	mount /dev/mapper/`cat /tmp/partition_lvm_cherchee` /mnt/$nom_simple 1>/dev/null 2>/dev/null
	rm -f /tmp/nom_simple
	rm -f /tmp/partition_lvm_cherchee
	rm -f /tmp/partition_lvm_existe
fi

if [ "$serveur_linux" = "oui" ]
then
	return
fi
rm -f /tmp/fichiertmp2
rm -f /tmp/fichiertmp

echo " " >> /tmp/fichiertmp
echo "`df /mnt/$repertoire | grep -v "Use% Mounted" | grep % | head -n 1`" > /tmp/toutes_les_valeurs
cp -f /tmp/toutes_les_valeurs /tmp/toutes_les_valeurs1

if [ "$partition_lvm" = "non" ]
then
	valeur1=`awk '{print$2}' /tmp/toutes_les_valeurs1`
	valeur2=`awk '{print$3}' /tmp/toutes_les_valeurs1`
	valeur3=`awk '{print$5}' /tmp/toutes_les_valeurs1`
	
	valeur1=$[valeur1/1024]
	valeur2=$[valeur2/1024]
	valeur2=$[valeur1-valeur2]
else
	valeur1=`awk '{print$2}' /tmp/toutes_les_valeurs1`
	valeur2=`awk '{print$3}' /tmp/toutes_les_valeurs1`
	# valeur3=`awk '{print$4}' /tmp/toutes_les_valeurs1` # en utilisant fdisk
	valeur3=`awk '{print$5}' /tmp/toutes_les_valeurs1`
	
	valeur1=$[valeur1/1024]
	valeur2=$[valeur2/1024]
	valeur1=$[valeur1+valeur2]
fi

reponse=`cat /tmp/toutes_les_valeurs1`
rm -f /tmp/toutes_les_valeurs
rm -f /tmp/toutes_les_valeurs1

#	reponse=`df /mnt/$repertoire | grep "$repertoire"`

if [ "$reponse" = "" ]
then
	umount /mnt/$repertoire 2>/dev/null ; sync
	echo " " >> /tmp/fichiertmp
	echo " " >> /tmp/fichiertmp
	echo "             `cat $chemin_langue/DESOLE`                 " >> /tmp/fichiertmp
	echo " " >> /tmp/fichiertmp
	echo "    `cat $chemin_langue/Partition` $repertoire `cat $chemin_langue/menu_184` ...  " >> /tmp/fichiertmp
	echo " " >> /tmp/fichiertmp
	echo " " >> /tmp/fichiertmp
elif [ "$type" = "ntfs" ]
then
	if ( test -e /tmp/fichiertmp_ntfs )
	then
	    echo "`cat /tmp/fichiertmp_ntfs`" >> /tmp/fichiertmp
	    rm -f /tmp/fichiertmp_ntfs
	fi
fi

echo "`cat $chemin_langue/repertoire_1` /mnt/$repertoire, `cat $chemin_langue/repertoire_2` $valeur3 : " >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
echo "$valeur2 Mo `cat $chemin_langue/repertoire_3` $valeur1 Mo " >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp

ls /mnt/$repertoire >> /tmp/fichiertmp

echo " " >> /tmp/fichiertmp
echo  "\n`cat $chemin_langue/repertoire_7` \Zn\n " >> /tmp/fichiertmp2
echo " " >> /tmp/fichiertmp2

echo "/mnt/$repertoire :  monté $type " >> /tmp/historique

boites_montage
if ( test -e /tmp/sortir )
then
    rm -f /tmp/sortir
    return
fi 
}
#----------------------------------------------------------------------------------------------------
boucle_partition_licence() # trouver la licence microsoft sur les nappes
{
	rm -f /tmp/tempfile
	echo "$type" > /tmp/tempfile
	prepare_boucle_partition
	nombretype=`cat /tmp/nombre`
	rm -f /tmp/nombre

numero=0
until  ( test  $numero = $nombretype )
    do	rm -f /tmp/tempfile1
#	rm -f /tmp/partfile1
	numero=$[$numero+1]
	cut -d":" -f$numero /tmp/tempfile > /tmp/tempfile1	#hdaiii
#	cut -d":" -f$numero /tmp/partfile > /tmp/partfile1	#ide/h0/b0/t0/l0/hdaiii
	reponse=`cat /tmp/tempfile1`
	reparti=$reponse #`cat /tmp/partfile1`
	rm -f /tmp/tempfile1
#	rm -f /tmp/partfile1
	if ! [ "$reponse" = "" ] # si la partition du type existe
	then  
		if ! ( test -e /mnt/$reponse )
		then mkdir /mnt/$reponse
		fi
		partition_ntfs_a_monter=$reponse
		repertoire_ntfs_a_monter=win
		monter_ntfs
		# mount -o ro -t ntfs /dev/$reponse /mnt/win
		if ( test -e /mnt/win/WINDOWS/system32/drivers/ntfs.sys )
		then
			cp -f /mnt/win/WINDOWS/system32/drivers/ntfs.sys /var/lib/captive
			cp -f /mnt/win/WINDOWS/system32/ntoskrnl.exe /var/lib/captive
			cd / ; umount /mnt/win 2>/dev/null ; sync
			fichiers_win_installes=oui
			rm -f /tmp/tempfile
			rm -f /tmp/tempfile1
			return 1
		elif ( test -e /mnt/win/WINNT/system32/drivers/ntfs.sys )
		then
			cp -f /mnt/win/WINNT/system32/drivers/ntfs.sys /var/lib/captive
			cp -f /mnt/win/WINNT/system32/ntoskrnl.exe /var/lib/captive
			cd / ; umount /mnt/win 2>/dev/null ; sync
			fichiers_win_installes=oui
			rm -f /tmp/tempfile
			rm -f /tmp/tempfile1
			return 1
		fi
		cd / ; umount /mnt/win 2>/dev/null ; sync
	fi
    done
rm -f /tmp/tempfile
#rm -f /tmp/partfile
}
#----------------------------------------------------------------------------------------------------
boite_choix_montage()    # sauvegarde avec vérification ou non
{
rm -f /tmp/fichiertmp
echo  "\Zb\Z3 `cat $chemin_langue/menu_192` :\Zn " > /tmp/fichiertmp
# Choix du montage
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Local`" --cancel-label "`cat $chemin_langue/menu_193`" --title " `cat $chemin_langue/Montage` " \
	--menu "`cat /tmp/fichiertmp`" 0 0 0 \
	"" "" \
	"" "`cat $chemin_langue/menu_194` :" \
	"" "" \
	"" "    `cat $chemin_langue/menu_195`\Zn, " \
	"" "    `cat $chemin_langue/menu_196` \Zn? " \
	"" ""
case $? in
    0)	rm -f /tmp/fichiertmp
	choix=local
	return;;
    1)  rm -f /tmp/fichiertmp
    	choix=reseau
    	return;;
    255) rm -f /tmp/fichiertmp
	exit;;
esac
}
#----------------------------------------------------------------------------------------------------
boite_aide_cable_croise()
{
# Procédure du branchement en cable croisé RJ45
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/msgbox_63` " \
	--msgbox "\n`cat $chemin_langue/msgbox_64`" 15 65
}
#----------------------------------------------------------------------------------------------------
boite_choix_protocole()
{
# Information protocole réseau
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" --cancel-label "`cat $chemin_langue/Annuler`" \
	--extra-button --extra-label "`cat $chemin_langue/menu_347`" \
	--title " `cat $chemin_langue/menu_402` " \
	--menu "\n\Zb\Z3 `cat $chemin_langue/menu_403` :\Zn \n " 0 0 0 \
	"" "\Zb\Z2`cat $chemin_langue/menu_404` :" \
	"" "\Zn`cat $chemin_langue/menu_406`" \
	"" "`cat $chemin_langue/menu_588`" \
	"" "* `cat $chemin_langue/menu_589`," \
	"" "* `cat $chemin_langue/menu_590` !! " \
	"" " " \
	"" "\Zb\Z2`cat $chemin_langue/menu_405` : " \
	"" "\Zn`cat $chemin_langue/menu_591`" \
	"" "`cat $chemin_langue/menu_592` : \Zn " \
	"" "`cat $chemin_langue/menu_593`" \
	"" "* `cat $chemin_langue/menu_594`" \
	"" " " \
	"" "\Zb\Z4`cat $chemin_langue/menu_595`\Zn"
case $? in
    0)	rm -f /tmp/fichiertmp
	choix=linux
	# Répertoire à partager sous protocole Linux
	echo " `cat $chemin_langue/menu_596` " > /tmp/protocole_partage
	return;;
    3)  rm -f /tmp/fichiertmp
	boite_aide_cable_croise
	boite_choix_protocole
	;;
    1) rm -f /tmp/fichiertmp
	return;;
    255) rm -f /tmp/fichiertmp
	return;;
esac 
}
#----------------------------------------------------------------------------------------------------
choix_montage()  # choix du protocole réseau du montage
{
boite_choix_montage

if [ $choix = "local" ]
then
	montage
	if ( test -e /tmp/sortir )
	then
	    return
	fi 

elif [ $choix = "reseau" ]
then
	boite_choix_protocole
	rm -f /tmp/carte_ethi
	if [ $choix = "linux" ]
	then
		client_linux
	elif [ $choix = "windows" ]
	then 
		montagesmb
	fi	
fi
}
#----------------------------------------------------------------------------------------------------
partage()  	 # choix du protocole réseau de partage
{
boite_choix_protocole
	
if [ $choix = "linux" ]
then
	partagenfs
elif [ $choix = "windows" ]
then 
	partagesmb
fi
}
#----------------------------------------------------------------------------------------------------
demontage() # démonte une partition
{
prepare_fichier_temptaille
rm -f /tmp/bozo
rm -f /tmp/tempfile
egrep -e "^/dev" /tmp/fichier_disque_dur | \
perl -pi -e 's/\*//g;  s/\+/ /g; s/\-/ /g; s/  /:/g; s/:+/:/g;' | \
awk 'BEGIN { FS=":" } { printf ("%0s %15s %25s\n",$1,$4,$6)}' | \
perl -pi -e 's/$/\\n/g;' | perl -pi -e 's/^\\n/\\Zn/g;' >> /tmp/tempfile

cp -f /tmp/tempfile /tmp/fichier_disque_dur

boite_couleurs_fichier_disque_dur

# Répertoire à démonter
echo " `cat $chemin_langue/menu_197` " > /tmp/menu_titre
# Informations sur le(s) disque(s) dur(s)
echo "\Zb`cat $chemin_langue/selection_38` \Z4: " > /tmp/fichierquestion

boites_demande_demontage
if ( test -e /tmp/sortir )
    then
    return
fi 

rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion
repertoire=$reponse

umount /mnt/$repertoire  1>/dev/null 2>/dev/null

if ! [ "$?" = "0" ]
then	# erreur
	echo
	echo -e "\033[1;31m   `cat $chemin_langue/texte_41`\033[1;32m /mnt/$repertoire\033[1;34m `cat $chemin_langue/texte_42`\033[1;34m ...\033[1;m"
	echo
else
	sync
	echo
	echo -e "\033[1;34m   `cat $chemin_langue/texte_43`\033[1;32m /mnt/$repertoire\033[1;34m `cat $chemin_langue/texte_44`\033[1;34m.\033[1;m "
	echo
	echo "/mnt/$repertoire : démonté  " >> /tmp/historique
fi
}
#----------------------------------------------------------------------------------------------------
prepare_boite_liste_IP()
{
rm -f ip_installe_poste
ifconfig eth0 > ip_installe_poste
rm -f /tmp/fichiertmp1
rm -f /tmp/fichiertmp2
grep -i "inet addr:" ip_installe_poste > /tmp/fichiertmp1
cut -f1 -dB /tmp/fichiertmp1 > /tmp/fichiertmp2
rm -f ip_installe_poste
cut -c21-50  /tmp/fichiertmp2 > ip_installe_poste # sort XXX.XXX.XXX.XXX

rm -f /tmp/fichiertmp2
rm -f /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
echo "`cat $chemin_langue/repertoire_1` $repertoire_complet:" >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
ls $repertoire_complet >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp2
valeur=`cat ip_installe_poste`
if [ "$valeur" = "" ]
then
	echo "\Zb\Z2`cat $chemin_langue/msgbox_71` \Zn \Zn " >> /tmp/fichiertmp2
else
	echo "`cat $chemin_langue/msgbox_72`: \Z1`cat ip_installe_poste`\Zn " >> /tmp/fichiertmp2
fi
echo " " >> /tmp/fichiertmp2

ifconfig eth0 >> /tmp/fichiertmp2
perl -pi -e 's/inet addr:/\\Z2inet addr\\Zn:\\Z1/g;' /tmp/fichiertmp2
perl -pi -e 's/eth/\\Zneth/g; s/Bcast/\\ZnBcast/g;' /tmp/fichiertmp2
}
#----------------------------------------------------------------------------------------------------
boites_liste_IP()
{
# fichiers partages
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title "\Z2 `cat $chemin_langue/repertoire_4` " \
	--exit-label "`cat $chemin_langue/Continuer`" --textbox "/tmp/fichiertmp" 0 0 \
	--and-widget --colors --ok-label "`cat $chemin_langue/menu_175`" --cancel-label "`cat $chemin_langue/Continuer`" \
	--title " Information sur le partage réseau " \
	--menu "`cat /tmp/fichiertmp2`" 0 0 0 \
	"" "votre répertoire partagé est\Z2 $repertoire_complet \Zn " \
	"" "\Znson protocole de partage est `cat /tmp/protocole_IP`\Zn."
case $? in
    1)	rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	return;;
    0) boites_liste_IP;;
    255) rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	return;;
esac
}
#----------------------------------------------------------------------------------------------------
boites_repertoire_partage() # demande du répertoire à partager
{
rm -f /tmp/bozo
info_ddialog
rm -f /tmp/tempfile
egrep -e "^/dev" /tmp/fichier_disque_dur | \
perl -pi -e 's/\*//g;  s/\+/ /g; s/\-/ /g; s/  /:/g; s/:+/:/g;' | \
awk 'BEGIN { FS=":" } { printf ("%0s %15s %25s\n",$1,$4,$6)}' > /tmp/tempfile
cp -f /tmp/tempfile /tmp/fichier_disque_dur

perl -pi -e 's/$/\\n/g;' /tmp/fichier_disque_dur
perl -pi -e 's/^\\n/\\Zn/g;' /tmp/fichier_disque_dur

rm -f /tmp/bozo
grep -v "heads" /tmp/fichier_disque_dur | grep -v "cylinders" | grep -v "Ext'd" | \
grep -v "Extended" > /tmp/bozo
cp -f /tmp/bozo /tmp/fichier_disque_dur

boite_couleurs_fichier_disque_dur

# Informations sur le(s) disque(s) dur(s)
echo "\Zb\Z4`cat $chemin_langue/menu_597` \Z4: " > /tmp/fichierquestion
echo "10" > /tmp/hauteur
echo "60" > /tmp/largeur
echo "0" > /tmp/position
boites_demande_de_montage_partage
rm -f /tmp/hauteur
rm -f /tmp/largeur
rm -f /tmp/position
rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion
if ( test -e /tmp/sortir )
then
	return
fi

repertoire_complet=/mnt/$reponse
if ( test -e /tmp/reponse_partage_complet )
then
	repertoire_complet=`cat /tmp/reponse_partage_complet`
	rm -f /tmp/reponse_partage_complet
fi
}
#----------------------------------------------------------------------------------------------------
partagesmb() # partager un répertoire avec le protocole de windows
{
# Partage sur le réseau avec le protocole Windows
echo " `cat $chemin_langue/menu_599` " > /tmp/menu_titre
boites_repertoire_partage
if ( test -e /tmp/sortir )
then
	rm -f /tmp/sortir
	return
fi

echo
echo -en "`cat $chemin_langue/menu_600` : "
read nom

mv /etc/samba/smb.conf.example /etc/samba/smb.conf -f
echo "[$nom]" >> /etc/samba/smb.conf
echo "  path = $repertoire_complet" >> /etc/samba/smb.conf
echo "  public = yes" >> /etc/samba/smb.conf
echo "  only guest = yes" >> /etc/samba/smb.conf
echo "  writable = yes" >> /etc/samba/smb.conf
echo "  printable = no" >> /etc/samba/smb.conf

/etc/init.d/samba restart

prepare_boite_liste_IP
# partagé samba
echo "$repertoire_complet : `cat $chemin_langue/menu_601` : $nom " >> /tmp/historique
echo "\Z2Windows, \Zn`cat $chemin_langue/menu_602` \Z2$nom" > /tmp/protocole_IP
boites_liste_IP
}
#----------------------------------------------------------------------------------------------------
boites_montage_smb_nfs()
{
# Répertoire monté
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title " `cat $chemin_langue/menu_300` " \
	--help-button --exit-label "`cat $chemin_langue/Continuer`" --textbox "/tmp/fichiertmp" 0 0 \
	--and-widget --colors --ok-label "`cat $chemin_langue/Continuer`" --cancel-label "`cat $chemin_langue/menu_301`" \
	--menu "`cat /tmp/fichiertmp2`" 0 0 0 \
	"" "`cat $chemin_langue/menu_603` \Z2`cat /tmp/montage_smb_nfs`\Zn " \
	"" "`cat $chemin_langue/menu_604`."
case $? in
    0)	rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	return;;
    1) boites_montage_smb_nfs;;
    255) rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	return;;
esac
}
#----------------------------------------------------------------------------------------------------
montagesmb() # monter un répertoire distant avec le protocole de windows
{
montage_sous_windows=non
montage_courant_smb
}
#----------------------------------------------------------------------------------------------------
demander_mot_passe_admin()
{
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Annuler`"  --title " Autorisation serveur samba " \
	--passwordbox "\n\Zb\Z3 Serveur samba :\n\n\Zn\Z2 Mot de passe d'\Zb\Z3admin\Zn\Z2 autorisé pour le serveur \Zn\Z2:\n" 11 75 2>/tmp/mot_passe_admin
	case $? in
    0)	mot_passe_admin_samba=`cat /tmp/mot_passe_admin`
	rm -f /tmp/mot_passe_admin
	;;
    1)	rm -f /tmp/mot_passe_admin
	echo "" > /tmp/sortir
	return
	;;
    255) rm -f /tmp/mot_passe_admin
	echo "" > /tmp/sortir
	return
	;;
esac
}
#----------------------------------------------------------------------------------------------------
montage_courant_smb()
{
locale ipserver,distant,nomutilisateur
if [ "$ip_serveur_demande" = "" ] # en venant du sous prog : client_serveur_sous_windows
then
	# Nom du serveur
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Annuler`"  --title " `cat $chemin_langue/menu_606` " \
	--inputbox "\n\n\Zb\Z4`cat $chemin_langue/menu_605` : \n " 12 55 192.168.69.1 2>/tmp/tempfile
	case $? in
		1)	rm -f /tmp/tempfile
			echo "" > /tmp/sortir
			return
			;;
		255)	rm -f /tmp/tempfile
			echo "" > /tmp/sortir
			return
			;;
		0)	ipserver=`cat /tmp/tempfile`
			rm -f /tmp/tempfile
			;;
	esac
else
	ipserver=$ip_serveur_demande				
fi

# Nom de partage
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Annuler`"  --title " `cat $chemin_langue/menu_607` " \
	--inputbox "\n\n\Zb\Z4`cat $chemin_langue/menu_626` $ipserver\Z4 : \n " 12 55 2>/tmp/tempfile
	case $? in
	1)	rm -f /tmp/tempfile
		echo "" > /tmp/sortir
		return
		;;
	255)	rm -f /tmp/tempfile
		echo "" > /tmp/sortir
		return
		;;
	0)	distant=`cat /tmp/tempfile`
		rm -f /tmp/tempfile
		;;
esac

# Nom d'utilisateur
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Annuler`"  --title " `cat $chemin_langue/menu_628` " \
	--inputbox "\n\n\Zb\Z4`cat $chemin_langue/menu_627` : " 14 75 2>/tmp/tempfile
	case $? in
	1)	rm -f /tmp/tempfile
		echo "" > /tmp/sortir
		return
		;;
	255)	rm -f /tmp/tempfile
		echo "" > /tmp/sortir
		return
		;;
	0)	nomutilisateur=`cat /tmp/tempfile`
		rm -f /tmp/tempfile
		;;
esac

if ! ( test -e /mnt/"$ipserver"_$distant )
then
	mkdir /mnt/"$ipserver"_$distant
fi

echo "$ipserver" > /tmp/ip_serveur_distant
echo "_$distant" > /tmp/repertoire_distant
administrateur_distant="$ipserver"_$distant
echo "$administrateur_distant" > /tmp/repertoire_utilisateur_poste
echo "$nomutilisateur" > /tmp/username_distant
echo "$mot_passe_admin_samba" > /tmp/password_distant
montage_serveur_samba_distant
if ( test -e /tmp/sortir )
then
	return
fi

if [ "$montage_sous_windows" = "non" ]
then
	rm -f /tmp/fichiertmp2
	rm -f /tmp/fichiertmp
	echo " " >> /tmp/fichiertmp
	echo "`cat $chemin_langue/repertoire_1` /mnt/"$ipserver"_$distant:" >> /tmp/fichiertmp
	echo " " >> /tmp/fichiertmp
	echo "`ls /mnt/"$ipserver"_$distant`" >> /tmp/fichiertmp
	echo " " >> /tmp/fichiertmp
	echo  "\n`cat $chemin_langue/repertoire_7` \Zn\n " >> /tmp/fichiertmp2
	echo " " >> /tmp/fichiertmp2

	echo "/mnt/$ipserver_$distant: monté samba  " >> /tmp/historique
	echo "/mnt/""$ipserver""_$distant" > /tmp/montage_smb_nfs
	boites_montage_smb_nfs
fi
}
#----------------------------------------------------------------------------------------------------
partagenfs() # partager un répertoire avec le protocole linux
{
ip_impose_fixe=192.168.69.1 # les clients sont 192.168.169.i
recherche_ip_impose_ip
if ( test -e /tmp/sortir )
then
    return
fi
# Partage sur le réseau avec le protocole Linux
echo " `cat $chemin_langue/menu_587` " > /tmp/menu_titre
boites_repertoire_partage

if ( test -e /tmp/sortir )
then
	rm -f /tmp/sortir
	return
fi
repertoire=$reponse
partager_nfs
}
#-----------------------------------------------------------------------------------------------------
dsk_boot() #     réalise une disquette de gestion de boot
{
echo -en "Installez une disquette formatée \033[0;32mvfat\033[1;m (msdos...) dans le lecteur puis appuyez sur \033[1;37mEntrée\033[1;m"
read choix
if ! ( test -e /mnt/floppy )
then
    mkdir /mnt/floppy
fi
mount -t vfat /dev/fd0 /mnt/floppy
sbminst -t fr -d /dev/fd0
umount /mnt/floppy 2>/dev/null  ; sync
echo
echo -e "\033[0;32mS'il n'y a pas d'erreurs votre disquette de gestion de boot est réalisée\033[1;m"
echo
}
#-----------------------------------------------------------------------------------------------------
arret_protocole() #     arrete le protocole reseau linux ou windows
{
echo "Quel est le protocole à arrêter ?"
echo
echo -e "\033[1;33ml\033[1;m) protocole réseau linux"
echo -e "\033[1;33mw\033[1;m) protocole réseau windows"
echo

echo -en "Votre protocole  \033[1;33ml\033[1;m/\033[1;33mw\033[1;m : "
read choix
if [ "$choix" = "" ]
then
        echo
	echo -e " \033[1;31m erreur de touche !\033[1;m"
	echo
elif [ $choix = "l" ]
then 		
	/etc/init.d/nfs stop
elif [ $choix = "w" ]
then 
	/etc/init.d/samba stop	
else
	echo
	echo -e " \033[1;31m  erreur de touche !\033[1;m"
	echo	
fi
}
#-----------------------------------------------------------------------------------------------------
ip_poste() # connexion locale en IP
{
recuperer_IP
if ( test -e /tmp/sortir )
then
    return
fi
valeur=`cat ip_installe_poste`
valeur_masque=`cat /tmp/ip_masque_poste`
if [ "$valeur" = "" ]
then
	lancer_dhcp
        if ( test -e /tmp/sortir )
        then
             return
        fi
	recuperer_IP
	ip_installe=`cat ip_installe_poste`
	if [ "$ip_installe" = "" ]
	then
		valeur=192.168.69.1
		valeur_masque=255.255.0.0
	else
		valeur=`cat ip_installe_poste`
		valeur_masque=`cat /tmp/ip_masque_poste`		
	fi
fi
	
# Donnez les valeurs d'IP
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Annuler`"  --title " Choix des valeurs d'IP " \
	--inputbox "\n\n Les adresses\Z2 IP privées\Zn possibles sont: \
	\n\n --> de     \Z210.0.0.1 \Zn à  \Z2 10.255.255.254\Zn \
	\n\Zn --> de   \Z2172.16.0.1 \Zn à   \Z2172.31.255.254\Zn \
	\n\Zn --> de  \Z2192.168.0.1 \Zn à  \Z2192.168.255.254\Zn \
	\n\n\n\Zb\Z4Donnez \Z3les valeurs d'IP\Z4 :  " 0 0 $valeur 2>/tmp/tempfile
	case $? in
     0)  reponse=`cat /tmp/tempfile`
    	rm -f /tmp/tempfile1
    	cut -f4 -d"." /tmp/tempfile > /tmp/tempfile1
	valeur_test=`cat /tmp/tempfile1`
	rm -f /tmp/tempfile1
    	if [ "$valeur_test" = "" ]
 	   	then
    		rm -f /tmp/tempfile
		ip_poste
		return 0
	else
		# les valeurs du masque
		rm -f /tmp/tempfile
		echo "$reponse" > ip_installe_poste
		DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
		--backtitle "`cat /etc/banniere_oscar`" \
		--cancel-label "`cat $chemin_langue/Annuler`"  --title " Choix du masque  " \
	        --inputbox "\n\n Les valeurs du \Z2masque\Zn : \
		\n\n\n\Zb\Z4Donnez \Z3les valeurs du masque\Z4 :  " 0 0 $valeur_masque 2>/tmp/tempfile
		case $? in
		    0)  reponse=`cat /tmp/tempfile`
			cut -f4 -d"." /tmp/tempfile > /tmp/tempfile1
			valeur_test=`cat /tmp/tempfile1`
			rm -f /tmp/tempfile1
			if [ "$valeur_test" = "" ]
 	   		then
    			    rm -f /tmp/tempfile
			    ip_poste
			    return 0
			else
			    cp -f /tmp/tempfile /tmp/ip_masque_poste
			    runme installer_IP
			    rm -f /tmp/tempfile
			    #ifconfig eth0 $reponse netmask 255.255.0.0
			fi
			;;
		    1)	rm -f /tmp/tempfile
			echo "" > /tmp/sortir
			;;
		    255) echo "" > /tmp/sortir
			rm -f /tmp/tempfile
			;;
		esac
	fi
	;;
    1)	rm -f /tmp/tempfile
	echo "" > /tmp/sortir
	;;
    255) echo "" > /tmp/sortir
	rm -f /tmp/tempfile
	;;
esac
}
#-----------------------------------------------------------------------------------------------------
#		SERVEUR ET CLIENTS LINUX
#-----------------------------------------------------------------------------------------------------
boites_serveur_linux_windows()
{
# Fichiers partagés
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title " \Z2`cat $chemin_langue/repertoire_4` " \
	--exit-label "`cat $chemin_langue/Continuer`" --textbox "/tmp/fichiertmp" 0 0 \
	--and-widget --colors --ok-label "`cat $chemin_langue/menu_175`" --cancel-label "`cat $chemin_langue/Continuer`" \
	--menu "`cat /tmp/fichiertmp2`" 10 80 0 \
	"" "votre répertoire partagé est\Z2 `cat /tmp/serveur_linux_windows` \Zn " \
	"" "\Znson protocole de partage est\Z2 $protocole\Zn." \
	"" "\ZnPour utiliser \Z2$repertoire\Zn sur un autre poste: \Zn " \
	"" "		mettez le poste en\Z2 Client\Zn et installez le même \Z1protocole $protocole\Zn. "
case $? in
    1)	rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	return;; 
    0) boites_serveur_linux_windows;;
    255) rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	return;;
esac
}
#----------------------------------------------------------------------------------------------------
recherche_ip_impose_ip()	# besoin de ip $ip_impose_fixe
{
## recherche d'une adresse ip sur le poste:
recuperer_IP
if ( test -e /tmp/sortir )
then
    return
fi
## l'ip est dans le fichier ip_installe_poste
ip_installe=`cat ip_installe_poste`
if [ "$ip_installe" = "" ]
then
	lancer_dhcp
	if ( test -e /tmp/sortir )
	then
	    return
	fi
	recuperer_IP
	ip_installe=`cat ip_installe_poste`
	if [ "$ip_installe" = "" ]
	then
		echo "$ip_impose_fixe" > ip_installe_poste
		echo "255.255.0.0" > /tmp/ip_masque_poste
		runme installer_IP
		#ifconfig eth0 $ip_impose_fixe netmask 255.255.0.0
		ip_installe=$ip_impose_fixe
	fi
fi
}
#----------------------------------------------------------------------------------------------------
serveur_ssh() # configuration complète en serveur ssh
{
ip_impose_fixe=192.168.69.1 # les clients sont 192.168.169.i
recherche_ip_impose_ip
echo "$ip_installe" > /tmp/temp_ip_installe
if ( test -e /tmp/sortir )
then
    return
fi
	# Choisissez un mot de passe
	echo
	echo -en "\033[1;34m Choisissez un mot de passe \033[1;33mroot\033[1;34m: "
	passwd root
	echo
	/etc/init.d/sshd restart 2>/dev/null
echo "#!/bin/sh

echo \"#!/bin/sh

	ls /var/run/screen/S-root > /tmp/tempscreen

	echo Z gawk '{ print Y1 X X }' /tmp/tempscreen Z > /tmp/tempscreen1
	perl -pi -e 's/ /;/g; s/.oscar;/{/g; s/{/
	{/g;' /tmp/tempscreen1
	
	grep -i XoscarX /tmp/tempscreen1 > /tmp/tempscreen
	cut -dX.X -f1 /tmp/tempscreen > /tmp/tempscreen1
	cut -dX{X -f2 /tmp/tempscreen1 > /tmp/tempscreen
	
	valeur_screen=Zcat /tmp/tempscreenZ
	rm -f /tmp/tempscreen
	rm -f /tmp/tempscreen1

	screen -x Yvaleur_screen\" > /usr/sbin/oscar_screen
	perl -pi -e 's/X/\"/g; s/Y/\\$/g; s/Z/\`/g;' /usr/sbin/oscar_screen
	chmod +x /usr/sbin/oscar_screen

	# Ce poste est \Zb\Z4SERVEUR SSH, Procédure pour le client
	DIALOGRC=\"/etc/dialogmenu_bloque\" dialog --colors \\
	--backtitle \"`cat /etc/banniere_oscar`\" \\
	--title \" `cat $chemin_langue/msgbox_65` \" \\
	--msgbox \"\n `cat $chemin_langue/msgbox_66`
oscar	" > commande_serveur_ssh
	chmod +x commande_serveur_ssh
	screen -S oscar /root/commande_serveur_ssh
	rm -f commande_serveur_ssh
	rm -f /tmp/temp_ip_installe

}
#----------------------------------------------------------------------------------------------------
client_ssh() # configuration complète en client ssh
{
recherche_ip_impose_ip_client

if ( test -e /tmp/sortir )
then
    rm -f /tmp/sortir
    return
fi 
ip_serveur=$reponse
echo -e "\033[1;34m Après le mot de passe entrez la commande\033[0;37m oscar_screen \033[1;34m:\033[1;m"
echo
ssh $reponse

echo  "\n \Z1 Ce poste n'est plus \Zb\Z4CLIENT SSH\Zn\Z1 du serveur \Zb\Z3OSCAR\Zn\Z2 $ip_serveur \Zn\n " > /tmp/fichiertmp
echo " " >> /tmp/fichiertmp

	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" --title " Client ssh " \
	--ok-label "`cat $chemin_langue/Continuer`" --colors --no-cancel \
	--menu "`cat /tmp/fichiertmp`" 0 0 0 "" "" \
	"" "\Zb\Z4      Vous pouvez utiliser ce poste en \Zn\Z2autonome \Zn " \
	"" " "
	case $? in
    0) ;;
    255) ;;
esac 
rm -f /tmp/fichiertmp
}
#----------------------------------------------------------------------------------------------------
partager_nfs()
{
# verifier si demarrage par le poste et si partition de demarrage
echo "$repertoire" > /tmp/nombre_partition_oscar_poste 
etude_montage donner_nombre_partition_oscar_poste
nombpart=`cat /tmp/nombre_partition_oscar_poste`
rm -f /tmp/partition_oscar_sur_poste

if [ "$nombpart" = 1 ]
then	# démarrage du dd sur cette partition
	ls -p /mnt/$repertoire > /tmp/fichiertmp2
	grep -e "/" /tmp/fichiertmp2 | perl -pi -e 's/\///g;' > /tmp/fichiertmp	# seulement les repertoires
	# proposer le repertoire a partager
	awk 'BEGIN { FS=":" } { printf ("%0s\n","\""$1"\" \"\" \\")}' /tmp/fichiertmp > /tmp/bozo
	rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	echo " Choix du répertoire " > /tmp/menu_titre
	echo " \Zb\Z4Sélectionnez le répertoire à \Z1partager \Z4: " > /tmp/menu_texte
	echo "" > /tmp/fichierquestion
	echo "5" > /tmp/hauteur
	echo "50" > /tmp/largeur
	echo "0" > /tmp/position
	repertoire_base=$repertoire
	boite_selection_bozo
	rm -f /tmp/hauteur
	rm -f /tmp/largeur
	rm -f /tmp/position
	if ( test -e /tmp/sortir )
	then
		rm -f /tmp/tempfile
		rm -f /tmp/sortir
		return
	fi
	repertoire=$repertoire_base/`cat /tmp/tempfile`
fi
# partage nfs du serveur
echo "/mnt/$repertoire/ *(rw,sync,no_root_squash)" >> /etc/exports
/etc/init.d/nfs restart 1>/dev/null 2>/tmp/controle_nfs

grep -ci "$repertoire does not support NFS export" /tmp/controle_nfs > /tmp/nombre_controle_nfs
rm -f /tmp/controle_nfs
nombre_controle_nfs=`cat /tmp/nombre_controle_nfs`
rm -f /tmp/nombre_controle_nfs
if [ "$nombre_controle_nfs" = "1" ]
then
	#La partition ne peut pas partager ses fichiers en serveur Linux
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/DESOLE` " \
	--msgbox "\n\n\Zb\Z1`cat $chemin_langue/msgbox_30` \Z3$repertoire \Z1`cat $chemin_langue/msgbox_67`\Zn\n " 10 60
	return
fi

rm -f /tmp/fichiertmp
rm -f /tmp/fichiertmp2
echo " " >> /tmp/fichiertmp
echo "`cat $chemin_langue/repertoire_1` /mnt/$repertoire:" >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
ls /mnt/$repertoire >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
echo  "`cat $chemin_langue/menu_72`\Zb\Z3 $ip_installe \Zn\n " >> /tmp/fichiertmp2
echo " " >> /tmp/fichiertmp2

echo "/mnt/$repertoire : partagé linux " >> /tmp/historique

echo "$repertoire" > /tmp/serveur_linux_windows
protocole=linux
boites_serveur_linux_windows
}
#----------------------------------------------------------------------------------------------------
serveur_linux() # configuration complète en serveur avec protocole linux
{
# procedure :
# 	installer l'ip
#	monter la partition
#	partager la partition en nfs :
# 		echo "/mnt/serveur_$repertoire/ *(rw,sync,no_root_squash)" >> /etc/exports
#		/etc/init.d/nfs restart

ip_impose_fixe=192.168.69.1 # les clients sont 192.168.169.i
recherche_ip_impose_ip
if ( test -e /tmp/sortir )
then
    return
fi
# montage en serveur avec protocole linux

# demander la partiton a monter
serveur_linux=oui
montage
serveur_linux=non
	if ( test -e /tmp/sortir )
	    then
		rm -f /tmp/sortir
		exit 0
	fi
partager_nfs
}
#-----------------------------------------------------------------------------------------------------
boites_client_linux_windows()
{
controle_reseau=`cat /tmp/controle_reseau`
if [ "$controle_reseau" != "" ]
then
	# Erreur de connexion
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title " `cat $chemin_langue/DESOLE` " \
	--msgbox "\n\Zb\Z1 `cat $chemin_langue/msgbox_68` : \n\n\Z4`cat /tmp/controle_reseau`\n " 0 0
	rm -f /tmp/controle_reseau
	return
fi
rm -f /tmp/controle_reseau

# fichiers partages
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title "\Z2 `cat $chemin_langue/repertoire_4` " \
	--exit-label "`cat $chemin_langue/Continuer`" --textbox "/tmp/fichiertmp" 0 0 \
	--and-widget --colors --ok-label "`cat $chemin_langue/menu_175`" --cancel-label "`cat $chemin_langue/Continuer`" \
	--menu "`cat /tmp/fichiertmp2`" 10 80 0 \
	"" "Le répertoire partagé est :\Z2 /mnt/$ip_serveur/$repertoire \Zn " \
	"" "Le protocole est`cat /tmp/protocole_linux_windows` " \
	"" "`cat $chemin_langue/menu_604`."
case $? in
    1)	rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	return;;
    0) boites_client_linux_windows;;
    255) rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	return;;
esac
}
#-----------------------------------------------------------------------------------------------------
prepare_boites_client_linux_windows()
{
rm -f /tmp/fichiertmp
rm -f /tmp/fichiertmp2
echo " " >> /tmp/fichiertmp
echo "`cat $chemin_langue/repertoire_1` /mnt/$ip_serveur/$repertoire `cat $chemin_langue/partage` :" >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
ls /mnt/$ip_serveur/$repertoire >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
echo  "\n\Z1 `cat $chemin_langue/texte_19` \Z2$poste\Z1 `cat $chemin_langue/msgbox_28` \Z2$ip_installe \Zn\n " >> /tmp/fichiertmp2
echo " " >> /tmp/fichiertmp2
}
#-----------------------------------------------------------------------------------------------------
boite_IP_client_linux()
{
	DIALOGRC="/etc/dialogrc" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Annuler`" --title "`cat /tmp/titre`" \
	--inputbox "\n `cat /tmp/fichierquestion`" 0 0 $defaut 2>/tmp/tempfile
	case $? in
    0)	rm -f /tmp/fichiertmp
	rm -f /tmp/titre
	reponse=`cat /tmp/tempfile`
	rm -f /tmp/tempfile
	return ;;
    1)  rm -f /tmp/fichiertmp
	rm -f /tmp/titre
	rm -f /tmp/tempfile
	echo "" > /tmp/sortir
	return ;;
    255) rm -f /tmp/fichiertmp
	rm -f /tmp/titre
	rm -f /tmp/tempfile
	echo "" > /tmp/sortir
	return ;;
esac
}
#-----------------------------------------------------------------------------------------------------
recherche_ip_impose_ip_client()	# besoin de ip $ip_impose_fixe
{
## recherche d'une adresse ip sur le poste:
recuperer_IP
if ( test -e /tmp/sortir )
then
    return
fi
## l'ip est dans le fichier ip_installe_poste

ip_installe=`cat ip_installe_poste`

if [ "$ip_installe" = "" ]
then
	lancer_dhcp
	if ( test -e /tmp/sortir )
	then
	    return
	fi
	recuperer_IP
	ip_installe=`cat ip_installe_poste`
	if [ "$ip_installe" = "" ]
	then
		# Donnez le numéro de ce poste client
	    defaut=
	    echo " `cat $chemin_langue/texte_98` " > /tmp/titre
	    echo "\n\Zn`cat $chemin_langue/texte_97` \Z31 \Zn`cat $chemin_langue/a` \Z3250\Zn :\n " > /tmp/fichierquestion
	    boite_IP_client_linux
	    if ( test -e /tmp/sortir )
	    then
		rm -f /tmp/sortir
	        return
	    fi
	    poste=$reponse	
	    client=$[$reponse]
	    echo "192.168.169.$client" > ip_installe_poste
	    echo "255.255.0.0" > /tmp/ip_masque_poste
	    runme installer_IP
	    ip_installe=192.168.169.$client
	    defaut=192.168.
	else
	rm -f /tmp/ip_salle
	cut -f1-2 -d"." ip_installe_poste > /tmp/ip_salle
	defaut=`cat /tmp/ip_salle`.
	rm -f /tmp/ip_salle
	fi
else
	rm -f /tmp/ip_salle
	cut -f1-2 -d"." ip_installe_poste > /tmp/ip_salle
	defaut=`cat /tmp/ip_salle`.
	rm -f /tmp/ip_salle
fi
# Adresse IP de serveur
echo " `cat $chemin_langue/texte_99` " > /tmp/titre
echo "\n\Zn`cat $chemin_langue/texte_100` :\Zb\Z2 $ip_installe \n \
\n\n\Zb\Z4`cat $chemin_langue/texte_101` \Zn:  " > /tmp/fichierquestion
boite_IP_client_linux
}
#----------------------------------------------------------------------------------------------------
client_linux() # configuration complète en client avec protocole linux
{
# procedure :
# 	installer l'ip
# 	monter la partition partagee par nfs :
#		/etc/init.d/nfs restart
#		mount $ip_serveur:/mnt/$repertoire/ /mnt/$ip_serveur/$repertoire 2>/dev/null

	locale distant,poste
recherche_ip_impose_ip_client

if ( test -e /tmp/sortir )
then
    rm -f /tmp/sortir
    return
fi 
ip_serveur=$reponse

# montage nfs   monter un répertoire distant avec le protocole de linux
# Répertoire du serveur à atteindre
defaut=
echo " `cat $chemin_langue/menu_580`  " > /tmp/titre
echo "\n\n\Zb\Z4`cat $chemin_langue/menu_581` : " > /tmp/fichierquestion
boite_IP_client_linux
if ( test -e /tmp/sortir )
then
    rm -f /tmp/sortir
    return
fi 
repertoire=$reponse

if ! ( test -e /mnt/$ip_serveur/$repertoire )
then
	mkdir -p /mnt/$ip_serveur/$repertoire
fi

/etc/init.d/nfs restart > /dev/null 2>/dev/null

echo -e "`cat $chemin_langue/menu_582` \033[1;32m$ip_serveur/$repertoire\033[1;34m `cat $chemin_langue/menu_583` ..."

mount $ip_serveur:/mnt/$repertoire/ /mnt/$ip_serveur/$repertoire 2>/tmp/controle_reseau
prepare_boites_client_linux_windows
echo "/mnt/$ip_serveur/$repertoire : réseau linux " >> /tmp/historique
echo "\Z2 linux\Zn, `cat $chemin_langue/menu_584`," > /tmp/protocole_linux_windows
boites_client_linux_windows
}
# fin serveur et client linux
#-----------------------------------------------------------------------------------------------------
#		SERVEUR ET CLIENTS WINDOWS
#-----------------------------------------------------------------------------------------------------
serveur_samba() # configuration complète en serveur avec protocole samba
{
## recherche d'une adresse ip sur le poste:
recuperer_IP
if ( test -e /tmp/sortir )
then
    return
fi
## l'ip est dans le fichier ip_installe_poste
ip_installe=`cat ip_installe_poste`
if [ "$ip_installe" = "" ]
then
	lancer_dhcp
	if ( test -e /tmp/sortir )
	then
	    return
	fi
	recuperer_IP
	ip_installe=`cat ip_installe_poste`
	if [ "$ip_installe" = "" ]
	then
		echo "192.168.69.1" > ip_installe_poste
		echo "255.255.0.0" > /tmp/ip_masque_poste
		runme installer_IP
		ip_installe=192.168.69.1
	fi
fi

# montage en serveur avec protocole samba

# Partage sur le réseau
echo " `cat $chemin_langue/menu_586` " > /tmp/menu_titre
echo "" > /tmp/menu_texte

# Sélectionnez la partition
echo "\Zb\Z4`cat $chemin_langue/menu_585` : " > /tmp/fichierquestion
boites_demande_partition_repertoire
if ( test -e /tmp/sortir )
    then
    return
fi 

rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion
repertoire=$reponse
rm -f /tmp/tempfile
echo "$reponse" > /tmp/tempfile

cut -f2 -d/ /tmp/tempfile > /tmp/tempfile1
valeur=`cat /tmp/tempfile1`
rm -f /tmp/tempfile1
if [ "$valeur" = "dev" ]
then
    cut -f3 -d/ /tmp/tempfile > /tmp/tempfile1
    repertoire=`cat /tmp/tempfile1`
fi
rm -f /tmp/tempfile1

numero=`expr substr $repertoire 4 3`	#iii
disque=`expr substr $repertoire 1 3`	#hda
info_ddialog
# trouver_type_partition

if ! ( test -e /mnt/serveur_$repertoire )
then
	mkdir /mnt/serveur_$repertoire
fi
rm -f /tmp/monter_partition
echo "serveur_$repertoire" > /tmp/monter_partition
autoriser_monter_partition_oscar_montage
nombpart=`cat /tmp/nombpart`
if [ "$nombpart" = 0 ]
then
	mount /dev/$repertoire /mnt/serveur_$repertoire
fi

if [ "$finir_sousprogramme_trouver_type_partition" = "oui" ] 
then
	return 1
fi

grep -i $repertoire /tmp/fichier_disque_dur | grep -c Linux > /tmp/nb_partition_linux
nb_partition_linux=`cat /tmp/nb_partition_linux`
rm -f /tmp/nb_partition_linux
if [ "$nb_partition_linux" = "1" ] # partition linux non swap
then
	umount /mnt/serveur_$repertoire 2>/dev/null	; sync	# seulement pour ne pas avoir d'erreur !! 
	rm -f /tmp/monter_partition
	echo "serveur_$repertoire" > /tmp/monter_partition
	autoriser_monter_partition_oscar_montage
	nombpart=`cat /tmp/nombpart`
	if [ "$nombpart" = 0 ]
	then
		mount /dev/$repertoire /mnt/serveur_$repertoire
	fi
else
	umount 	/mnt/serveur_$repertoire 2>/dev/null ; sync
	grep -i $repertoire /tmp/fichier_disque_dur | grep -ci ntfs > /tmp/nb_partition_ntfs
	nb_partition_ntfs=`cat /tmp/nb_partition_ntfs`
	rm -f /tmp/nb_partition_ntfs
	if [ "$nb_partition_ntfs" = "1" ] # partition ntfs
	then
		partition_ntfs_a_monter=$repertoire
		repertoire_ntfs_a_monter=serveur_$repertoire
		monter_ntfs
		# mount -o ro -t ntfs /dev/$repertoire /mnt/serveur_$repertoire
	else
		rm -f /tmp/monter_partition
		echo "serveur_$repertoire" > /tmp/monter_partition
		autoriser_monter_partition_oscar_montage
		nombpart=`cat /tmp/nombpart`
		if [ "$nombpart" = 0 ]
		then
			mount /dev/$repertoire /mnt/serveur_$repertoire -t $type -o umask=000
		fi
	fi
fi

# partage smb du serveur

mv /etc/samba/smb.conf.example /etc/samba/smb.conf -f

echo "[serveur_$repertoire]" >> /etc/samba/smb.conf
echo "  path = /mnt/serveur_$repertoire" >> /etc/samba/smb.conf
echo "  public = yes" >> /etc/samba/smb.conf
echo "  only guest = yes" >> /etc/samba/smb.conf
echo "  writable = yes" >> /etc/samba/smb.conf
echo "  printable = no" >> /etc/samba/smb.conf

/etc/init.d/samba restart

rm -f /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
rm -f /tmp/fichiertmp2
echo "`cat $chemin_langue/repertoire_1` /mnt/serveur_$repertoire:" >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
ls /mnt/serveur_$repertoire >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
echo  "`cat $chemin_langue/menu_72`\Zb\Z3 $ip_installe \Zn\n " >> /tmp/fichiertmp2
echo " " >> /tmp/fichiertmp2

# partagé samba
echo "/mnt/serveur_$repertoire : `cat $chemin_langue/menu_601` : serveur_$repertoire " >> /tmp/historique
echo "serveur_$repertoire\Zn, `cat $chemin_langue/menu_608` \Z2serveur_$repertoire" > /tmp/serveur_linux_windows
protocole=windows
boites_serveur_linux_windows
}
#----------------------------------------------------------------------------------------------------
corrige_realisee()
{
# pour initialise
grep -c OSCAR /tmp/bozo > /tmp/nb_partitions_oscar_corrige
nb_partitions_oscar_corrige=`cat /tmp/nb_partitions_oscar_corrige`
rm -f /tmp/nb_partitions_oscar_corrige
if [ "$nb_partitions_oscar_corrige" = 0 ]
then
	return
fi
grep OSCAR /tmp/bozo | perl -pi -e 's/\/dev\///g;' | cut -d" " -f1  > /tmp/corrige_oscar
corrige_oscar=`cat /tmp/corrige_oscar`
rm -f /tmp/corrige_oscar
if ! ( test -e /mnt/$corrige_oscar )
then
	mkdir /mnt/$corrige_oscar
fi
mount /dev/$corrige_oscar /mnt/$corrige_oscar 1>/dev/null 2>/dev/null
echo `cat /mnt/$corrige_oscar/usr/share/oscar/usr/numero_version_oscar` > /tmp/valeur_corrige_oscar
umount /mnt/$corrige_oscar 1>/dev/null 2>/dev/null ; sync
cut -d"." -f3 /tmp/valeur_corrige_oscar > /tmp/valeur_corrige_oscar1
valeur_corrige_oscar=`cat /tmp/valeur_corrige_oscar1`
corrige_non=`expr $valeur_corrige_oscar % 2` 
rm -f /tmp/valeur_corrige_oscar
rm -f /tmp/valeur_corrige_oscar1
if [ "$corrige_non" != 1 ]
then
	# afficher_eteindre
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/DESOLE` " \
	--timeout 2 --no-cancel --inputbox " " 0 0 "`cat $chemin_langue/inputbox_28a`"
        case $? in
		0)  halt ;;
		3)  halt ;;
		255) halt ;;
	esac
	halt
fi
}
#-----------------------------------------------------------------------------------------------------
client_samba() # configuration complète en client avec protocole samba
{
locale poste
## recherche d'une adresse ip sur le poste:
recuperer_IP
if ( test -e /tmp/sortir )
then
    return
fi
## l'ip est dans le fichier ip_installe_poste
ip_installe=`cat ip_installe_poste`
if [ "$ip_installe" = "" ]
then
	lancer_dhcp
	if ( test -e /tmp/sortir )
	then
	    return
	fi
	recuperer_IP
	ip_installe=`cat ip_installe_poste`
	if [ "$ip_installe" = "" ]
	then
		# donnez le numéro de poste
		echo -en "`cat $chemin_langue/menu_609` : "
		read client
		poste=$client
	
		client=$[$client+100]
		echo "192.168.69.$client" > ip_installe_poste
		echo "255.255.0.0" > /tmp/ip_masque_poste
		runme installer_IP
		ip_installe=192.168.69.$client
	fi
fi


# montage samba   monter un répertoire distant avec le protocole de samba

echo
# répertoire partagé
echo -e "\033[1;31m`cat $chemin_langue/menu_610` :\033[1;m"
echo -en "`cat $chemin_langue/menu_611`\033[1;33m sda3\033[1;m : "
read repertoire

echo
# adresse IP
echo -en "	`cat $chemin_langue/menu_612` : "
read ip_serveur
echo

if ! ( test -e /mnt/serveur_$repertoire )
then
	mkdir /mnt/serveur_$repertoire
fi
echo
# mot de passe
echo -e "`cat $chemin_langue/menu_613` :"

modprobe smbfs 2>/dev/null	# pour le cd oscar minimal
smbmount //$ip_serveur/serveur_$repertoire /mnt/serveur_$repertoire 2>/tmp/controle_reseau

prepare_boites_client_linux_windows
echo "/mnt/serveur_$repertoire : réseau samba " >> /tmp/historique
echo "\Z2 windows\Zn, \Zn" > /tmp/protocole_linux_windows
boites_client_linux_windows
}
#----------------------------------------------------------------------------------------------------
#  fin serveur et clients windows
#----------------------------------------------------------------------------------------------------
cherche_sauvegarde() 	
{
type="linux"
presence_sauvegarde=non
boucle_partition
}
#----------------------------------------------------------------------------------------------------
boite_choix_serveur()
{
# Choisissez votre configuration
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Synchrone`" --ok-label "`cat $chemin_langue/Serveur`" --extra-button --extra-label "`cat $chemin_langue/Asynchrone`" \
	--title " `cat $chemin_langue/Serveur` " \
	--menu "\n \Zb\Z2   `cat $chemin_langue/menu_614` \n " 0 0 0 \
	"" "" \
	"" "" \
	"" "\Zb`cat $chemin_langue/menu_615` " \
	"" "" \
	"" "" \
	"" "\Zb\Z4`cat $chemin_langue/menu_616` :" \
	"" ""
case $? in
    0)	choix=normal
    	return ;;
    1)  choix=clone
    	return ;;
    3)	choix=multi
    	return ;;
    255)  echo "" > /tmp/sortir
	return ;;
esac
}
#----------------------------------------------------------------------------------------------------
#   			Choix de protocole réseau
#----------------------------------------------------------------------------------------------------
choix_serveur() 	
{
cherche_sauvegarde
if [ $presence_sauvegarde = "oui" ]
then 
	boite_choix_serveur
	if ( test -e /tmp/sortir )
	then
	    rm -f /tmp/sortir
	    return
	fi 
		
	if [ $choix = "clone" ]
	then 
		serveur_synchrone
		return
	elif [ $choix = "multi" ]
	then
		serveur_nfs
		return
    	fi	
fi				

boite_choix_protocole

if [ $choix = "linux" ]
then
	rm -f /tmp/carte_ethi
	serveur_linux
	if ( test -e /tmp/sortir )
    	then
	    rm -f /tmp/sortir
	fi 
	return
elif [ $choix = "windows" ]
then
	rm -f /tmp/carte_ethi
	serveur_samba
	if ( test -e /tmp/sortir )
    	then
	    rm -f /tmp/sortir
	fi 
	return
fi
}
#----------------------------------------------------------------------------------------------------
boite_choix_client()
{
# Choisissez votre configuration
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Synchrone`" --ok-label "`cat $chemin_langue/Client`" --extra-button --extra-label "`cat $chemin_langue/Asynchrone`" \
	--title " `cat $chemin_langue/Client` " \
	--menu "\n \Zb\Z4   `cat $chemin_langue/menu_617`\n " 0 0 0 \
	"" "" \
	"" "" \
	"" "\Zb`cat $chemin_langue/menu_618`\Zn " \
	"" "" \
	"" "" \
	"" "\Zb\Z4`cat $chemin_langue/menu_616` :" \
	"" ""
case $? in
    0)	choix=normal
    	return ;;
    1)  choix=clone
    	return ;;
    3)	choix=multi
    	return ;;
    255)   echo "" > /tmp/sortir
	return ;;
esac
}
#----------------------------------------------------------------------------------------------------
choix_client() 	# choisir un type de client #de protocole réseau
{
boite_choix_client
if ( test -e /tmp/sortir )
then
	rm -f /tmp/sortir
	return
fi 
	
if [ $choix = "clone" ]
then 
	client_synchrone
	retour
elif [ $choix = "multi" ]
then 
	client_nfs
	return
fi
client_linux
}
#----------------------------------------------------------------------------------------------------
#  fin de choix de protocole
#-----------------------------------------------------------------------------------------------------
boites_client_serveur_sous_windows()
{
# fichiers partages
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title "\Z2 `cat $chemin_langue/repertoire_4` " \
	--exit-label "`cat $chemin_langue/Continuer`" --textbox "/tmp/fichiertmp" 0 0 \
	--and-widget --colors --ok-label "`cat $chemin_langue/menu_175`" --cancel-label "`cat $chemin_langue/Continuer`" \
	--menu "`cat /tmp/fichiertmp2`" 10 80 0 \
	"" "`cat $chemin_langue/menu_619` :\Z2 /mnt/$ipserver_$distant \Zn " \
	"" "`cat $chemin_langue/menu_620`" \
	"" "`cat $chemin_langue/menu_604`."
case $? in
    1)	rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	return;;
    0) boites_client_serveur_sous_windows;;
    255) rm -f /tmp/fichiertmp
	rm -f /tmp/fichiertmp2
	return;;
esac 
}
#----------------------------------------------------------------------------------------------------
#  connexion avec un poste windows
#----------------------------------------------------------------------------------------------------
boite_numero_poste_vers_windows()
{
rm -f /tmp/tempfile
echo "\Zb\Z3 Paramètres à vérifier:" >> /tmp/fichiertmp
	DIALOGRC="/etc/dialogrc" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Annuler`" --title "$titre" \
	--inputbox "`cat /tmp/fichiertmp`\n `cat /tmp/fichierquestion`" 0 0 $defaut 2>/tmp/tempfile
	case $? in
    0)	rm -f /tmp/fichiertmp
	reponse=`cat /tmp/tempfile`
	rm -f /tmp/tempfile
	return ;;
    1)  rm -f /tmp/fichiertmp
	rm -f /tmp/tempfile
	echo "" > /tmp/sortir
	return ;;
    255) rm -f /tmp/fichiertmp
	rm -f /tmp/tempfile
	echo "" > /tmp/sortir
	return ;;
esac
}
#----------------------------------------------------------------------------------------------------
boite_IP_poste_windows()
{
rm -f /tmp/tempfile
echo "\n\Zb\Z3 Adresse IP du serveur sous Windows:" >> /tmp/fichiertmp
	DIALOGRC="/etc/dialogrc" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Annuler`" --title "$titre" \
	--inputbox "`cat /tmp/fichiertmp`\n `cat /tmp/fichierquestion`" 30 90 $defaut 2>/tmp/tempfile
	case $? in
    0)	rm -f /tmp/fichiertmp
	reponse=`cat /tmp/tempfile`
	rm -f /tmp/tempfile
	return ;;
    1)  rm -f /tmp/fichiertmp
	rm -f /tmp/tempfile
	echo "" > /tmp/sortir
	return ;;
    255) rm -f /tmp/fichiertmp
	rm -f /tmp/tempfile
	echo "" > /tmp/sortir
	return ;;
esac
}
#----------------------------------------------------------------------------------------------------
cherche_valeur_masque()
{
ifconfig eth0 | grep -i "Mask:" | perl -pi -e 's/Mask:/;/g;' > /tmp/tempmasque
cut -d";" -f2 /tmp/tempmasque > /tmp/ip_masque_trouve
}
#----------------------------------------------------------------------------------------------------
demande_derniere_valeur_ip_connu()
{
rm -f ip_salle
rm -f fin_ip_poste_client
# 	donne adresse ip du réseau de la salle xxx.xxx.xxx
cut -f1-3 -d"." ip_installe_poste > ip_salle
cut -f4 -d"." ip_installe_poste > fin_ip_poste_client
cherche_valeur_masque
ip_masque_trouve=`cat /tmp/ip_masque_trouve`
rm -f /tmp/ip_masque_trouve
# Sur le serveur windows il faut conna�tre:
echo "\n`cat $chemin_langue/texte_97b` \Zb\Z1`cat ip_salle`.\Z3VVV \Zn`cat $chemin_langue/avec` \Zb\Z3VVV\Zn = `cat $chemin_langue/menu_625` \Zb\Z1`cat fin_ip_poste_client`\Zn \
	`cat $chemin_langue/texte_97t` \Zb\Z1$ip_masque_trouve \
	`cat $chemin_langue/texte_97q` \
	\n\Zn`cat $chemin_langue/texte_100` :\Zb\Z2 $ip_installe
	`cat $chemin_langue/texte_97c`, \
	\n\Zb\Z4`cat $chemin_langue/texte_102` \Z4:\Zn " > /tmp/fichierquestion
defaut=`cat ip_salle`
boite_IP_poste_windows
if ( test -e /tmp/sortir )
then
    return
fi 
valeur=`cat ip_salle`
ip_serveur_demande=$reponse
}
#----------------------------------------------------------------------------------------------------
client_serveur_sous_windows() 	# se connecter sur un poste qui travaille sous windows
{
rm -f /tmp/fichiertmp
# Connexion à un serveur travaillant sous Windows
titre=" `cat $chemin_langue/texte_95` "

## recherche d'une adresse ip sur le poste:
rm -f ip_installe_poste
rm -f /tmp/carte_ethi
recuperer_IP
if ( test -e /tmp/sortir )
then
    return
fi
## l'ip est dans le fichier ip_installe_poste
ip_installe=`cat ip_installe_poste`
if [ "$ip_installe" = "" ]
then
	lancer_dhcp
	if ( test -e /tmp/sortir )
	then
	    return
	fi
	recuperer_IP
	ip_installe=`cat ip_installe_poste`
	if [ "$ip_installe" = "" ]
	then
		# Sur le serveur windows il faut conna�tre
		echo "\n`cat $chemin_langue/texte_97b` \Zb\Z1192.168.69.1 \
		`cat $chemin_langue/texte_97t` \Zb\Z1255.255.0.0 \
		`cat $chemin_langue/texte_97q` \
		`cat $chemin_langue/texte_97c`, \
		`cat $chemin_langue/texte_97` \Zb\Z31 \Z4à \Zb\Z399\Zn : " > /tmp/fichierquestion
		defaut=
		boite_numero_poste_vers_windows
		if ( test -e /tmp/sortir )
		then
		    return
		fi 
	
		poste=$reponse
		client=$[$reponse+100]
		echo "192.168.69.$client" > ip_installe_poste
		echo "255.255.0.0" > /tmp/ip_masque_poste
		runme installer_IP
		ip_installe=192.168.69.$client
		ip_serveur_demande=
	else
		demande_derniere_valeur_ip_connu
    		if (test -e /tmp/sortir )
		then
		    return
		fi
	fi
	
else
	demande_derniere_valeur_ip_connu
	if (test -e /tmp/sortir )
	then
	    return
	fi
fi

montage_sous_windows=oui
montage_courant_smb
if (test -e /tmp/sortir )
then
    return
fi

rm -f /tmp/fichiertmp
rm -f /tmp/fichiertmp2
echo " " >> /tmp/fichiertmp
echo "`cat $chemin_langue/repertoire_1` /mnt/$ipserver_$distant `cat $chemin_langue/partage` :" >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
ls /mnt/"$ipserver"_"$distant" >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
echo  "\n\Z1 `cat $chemin_langue/texte_19` \Z2$poste\Z1 `cat $chemin_langue/msgbox_28` \Z2$ip_installe \Zn\n " >> /tmp/fichiertmp2
echo " " >> /tmp/fichiertmp2

echo "/mnt/$ipserver_$distant : réseau samba " >> /tmp/historique
boites_client_serveur_sous_windows
}
#----------------------------------------------------------------------------------------------------
#  fin de connexion avec un poste windows
#----------------------------------------------------------------------------------------------------
historique()
{
echo
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--exit-label "`cat $chemin_langue/Continuer`" \
	--title " \Z4Historique " \
	--textbox "/tmp/historique" 0 0
}
#----------------------------------------------------------------------------------------------------
retour() # retour au programme principal
{
echo
echo -e "`cat $chemin_langue/boucle_1`"
echo -ne "`cat $chemin_langue/boucle_2`"
read reponse
main
}
#----------------------------------------------------------------------------------------------------
boite_eteindre_ordinateur()
{
umount -a 2>/dev/null ; sync
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/infobox_1` " \
	--infobox "\n\n\n`cat $chemin_langue/infobox_2`\n\n\n\n" 0 0

if ( test -e /etc/cdrom_ejecte )
then
	eject -t
fi
if ! ( test -e /tmp/redemarrer )
then
	halt
else
	rm -f /tmp/redemarrer
	reboot
fi
sleep 5
exit
}
#----------------------------------------------------------------------------------------------------
eteindre_le_poste()
{
boite_eteindre_ordinateur
}
#----------------------------------------------------------------------------------------------------
boite_carte_ethernet_non_branchee()
{
# La carte ethernet n'est pas branchée

	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Recommencer`" --cancel-label "`cat $chemin_langue/Quitter`" \
	--title " `cat $chemin_langue/DESOLE` " \
	--menu "\n\n\n" 10 80 0 \
	"" "" \
	"" "" \
	"" "\Zb\Z1 `cat $chemin_langue/msgbox_69` ! \Zn " \
	"" "" \
	"" ""
case $? in
1)	carte_ethi=
	echo "" > /tmp/sortir
	rm -f /tmp/cartes_ethi_branchee
	;;
0) 	
	cherche_carte_ethernet_cablee
	;;
255)
	carte_ethi=
	rm -f /tmp/cartes_ethi_branchee
	echo "" > /tmp/sortir
	;;
esac
}
#----------------------------------------------------------------------------------------------------
cherche_carte_ethernet_cablee_ancien()
{
if ! ( test -e /tmp/carte_ethi )
then
	mii-tool eth0 eth1 eth2 eth3 eth4 eth5 2>/dev/null | grep -ci "link ok" > /tmp/nb_cartes_ethernet
	nb_cartes_ethernet=`cat /tmp/nb_cartes_ethernet` 
	rm -f /tmp/nb_cartes_ethernet
	if [ "$nb_cartes_ethernet" = "1" ]
	then
		mii-tool eth0 eth1 eth2 eth3 eth4 eth5 2>/dev/null | grep -i "link ok" > /tmp/cartes_ethernet
		cut -d":" -f1 /tmp/cartes_ethernet > /tmp/carte_ethi
		rm -f /tmp/cartes_ethernet
		carte_ethi=`cat /tmp/carte_ethi`
	elif [ "$nb_cartes_ethernet" = "0" ] # pas de carte ethernet branchee
	then
		mii-tool eth0 eth1 eth2 eth3 eth4 eth5 2>/tmp/erreur_cartes_ethernet_non_supportees
		grep -ci "Operation not supported" /tmp/erreur_cartes_ethernet_non_supportees > /tmp/nb_cartes_ethernet_non_supportees
		nb_cartes_ethernet_non_supportees=`cat /tmp/nb_cartes_ethernet_non_supportees`
		rm -f /tmp/erreur_cartes_ethernet_non_supportees
		rm -f /tmp/nb_cartes_ethernet_non_supportees
		if [ "$nb_cartes_ethernet_non_supportees" = "0" ]
		then	
			# activer les cartes si elles existent et non reconnues :
			ifconfig eth0 0.0.0.0 1>/dev/null 2>/dev/null
			ifconfig eth1 0.0.0.0 1>/dev/null 2>/dev/null
			ifconfig eth2 0.0.0.0 1>/dev/null 2>/dev/null
			ifconfig eth3 0.0.0.0 1>/dev/null 2>/dev/null
			ifconfig eth4 0.0.0.0 1>/dev/null 2>/dev/null
			ifconfig eth5 0.0.0.0 1>/dev/null 2>/dev/null
		
			sleep 2 # necessaire pour ralentir mii-tool
		
			mii-tool eth0 eth1 eth2 eth3 eth4 eth5 2>/dev/null | grep -ci "link ok" > /tmp/nb_cartes_ethernet
			nb_cartes_ethernet=`cat /tmp/nb_cartes_ethernet` 
			rm -f /tmp/nb_cartes_ethernet

			if [ "$nb_cartes_ethernet" = "0" ]
			then
				boite_carte_ethernet_non_branchee
			else
				cherche_carte_ethernet_cablee
				return
			fi
		else
			# chercher sans mii-tool eth0 ou eth1 eth2 eth3 eth4 eth5 avec IP
			rm -f /tmp/carte_ethi
			carte_ethi=
			for i in 0 1 2 3 4 5
			do
				if [ "$carte_ethi" = "" ]
				then
					echo "eth$i" > /tmp/dhcp_ethX
					lire_valeur_ip_de_ifconfig
					if ! [ "$ip_installe" = "" ]
					then
						carte_ethi=eth$i
						echo "$carte_ethi" > /tmp/carte_ethi
					fi
				fi
			done
			if [ "$carte_ethi" = "" ]
			then
				boite_carte_ethernet_non_branchee
			fi	
		fi
	else  # selectionnez la carte d'utilisation OSCAR
		mii-tool eth0 eth1 eth2 eth3 eth4 eth5 2>/dev/null | grep -i "link ok" > /tmp/cartes_ethernet
		
		cut -d":" -f1 /tmp/cartes_ethernet > /tmp/cartes_ethi_branchees
		rm -f /tmp/cartes_ethernet
		# Carte ethernet
		echo " `cat $chemin_langue/menu_578` " > /tmp/menu_titre
		echo "\Zb\Z4`cat $chemin_langue/menu_579` \Z3OSCAR\Z4 : " > /tmp/fichierquestion
		cp /usr/share/oscar/usr/exec_dialog_src /tmp/exec_dialog -f
		echo "50" > /tmp/largeur
		awk 'BEGIN { FS=":" } { printf ("%0s %s\n","\""$1"\" ","\"\" \\")}' /tmp/cartes_ethi_branchees > /tmp/bozo
		faire_exec_dialog
		if (test -e /tmp/sortir )
		then
			return
		fi
		carte_ethi=$reponse
		echo "$carte_ethi" > /tmp/carte_ethi
		rm -f /tmp/cartes_ethi_branchees
		rm -f /tmp/fichierquestion
		rm -f /tmp/largeur
	fi
else
	carte_ethi=`cat /tmp/carte_ethi`
fi
}
#----------------------------------------------------------------------------------------------------
cherche_carte_ethernet_cablee()
{
if ! ( test -e /tmp/carte_ethi )
then
	# mii-tool `ls /sys/class/net | grep -v lo` 2>/dev/null | grep -ci "link ok" > /tmp/nb_cartes_ethernet
	ip link | grep -v lo | grep -ci " state "  > /tmp/nb_cartes_ethernet
	nb_cartes_ethernet=`cat /tmp/nb_cartes_ethernet` 
	rm -f /tmp/nb_cartes_ethernet
	if [ "$nb_cartes_ethernet" = "0" ] # pas de carte ethernet branchee
	then
		boite_carte_ethernet_non_branchee
	elif [ "$nb_cartes_ethernet" = "1" ] # prendre la premiere carte
	then
		# mii-tool `ls /sys/class/net | grep -v lo` 2>/dev/null | grep -i "link ok" | cut -d":" -f1 > /tmp/carte_ethi
		ip link | grep -v lo | grep -i " state " | cut -d":" -f2 | perl -pi -e 's/ //g;' > /tmp/carte_ethi
		rm -f /tmp/ligne_carte_ethernet
		carte_ethi=`cat /tmp/carte_ethi`
	else  # selectionnez la carte d'utilisation
		# mii-tool `ls /sys/class/net | grep -v lo` 2>/dev/null | grep -i "link ok" | cut -d":" -f1 > /tmp/cartes_ethi_branchees
		ip link | grep -v lo | grep -v "state DOWN" | grep -ci " state "  > /tmp/nb_cartes_ethernet
		nb_cartes_ethernet=`cat /tmp/nb_cartes_ethernet`
		rm -f /tmp/nb_cartes_ethernet
		if [ "$nb_cartes_ethernet" = "0" ]
		then
			boite_carte_ethernet_non_branchee
		elif [ "$nb_cartes_ethernet" = "1" ] # prendre la premiere carte
		then
			# mii-tool `ls /sys/class/net | grep -v lo` 2>/dev/null | grep -i "link ok" | cut -d":" -f1 > /tmp/carte_ethi
			ip link | grep -v lo | grep -v "state DOWN" | grep -i " state " | cut -d":" -f2 | perl -pi -e 's/ //g;' > /tmp/carte_ethi
			rm -f /tmp/ligne_carte_ethernet
			carte_ethi=`cat /tmp/carte_ethi`
		else # OSCAR car plusieurs non DOWN
			ip link | grep -v lo | grep -v "state DOWN" | grep -i " state " | cut -d":" -f2 | perl -pi -e 's/ //g;' > /tmp/cartes_ethi_branchees
			# Carte ethernet
			echo " `cat $chemin_langue/menu_578` " > /tmp/menu_titre
			echo "\Zb\Z4`cat $chemin_langue/menu_579` \Z3OSCAR\Z4 : " > /tmp/fichierquestion
			cp /usr/share/oscar/usr/exec_dialog_src /tmp/exec_dialog -f
			echo "50" > /tmp/largeur
			awk 'BEGIN { FS=":" } { printf ("%0s %s\n","\""$1"\" ","\"\" \\")}' /tmp/cartes_ethi_branchees > /tmp/bozo
			faire_exec_dialog
			if (test -e /tmp/sortir )
			then
				return
			fi
			carte_ethi=$reponse
			echo "$carte_ethi" > /tmp/carte_ethi
			rm -f /tmp/cartes_ethi_branchees
			rm -f /tmp/fichierquestion
			rm -f /tmp/largeur
		fi
	fi
else
	carte_ethi=`cat /tmp/carte_ethi`
fi
}
#----------------------------------------------------------------------------------------------------
installer_IP()	# mettre IP OSCAR sur la carte /tmp/carte_ethi ou carte_ethi :
{
ip_installe=`cat ip_installe_poste`
dhcp_masque=`cat /tmp/ip_masque_poste`

cherche_carte_ethernet_cablee

if (test -e /tmp/sortir )
then
    return
fi

ifconfig $carte_ethi $ip_installe netmask $dhcp_masque
sleep 1
}
#----------------------------------------------------------------------------------------------------
supprimer_ip_ethernet()
{
if ! ( test -e /tmp/carte_ethi )
then
	cherche_carte_ethernet_cablee
fi
ifconfig `cat /tmp/carte_ethi` 0.0.0.0 2>/dev/null 1/dev/null
}
#----------------------------------------------------------------------------------------------------
lire_valeur_ip_de_ifconfig()
{
ifconfig -a > /tmp/reveil_cartes	# reveil pour afficher la premiere fois toutes les cartes
rm -f /tmp/reveil_cartes
ifconfig $carte_ethi 2>/dev/null > ip_installe_poste
# recuperer la mac adresse :
grep -i "Ethernet" ip_installe_poste | perl -pi -e 's/Ethernet HWaddr /{/g; s/ether /{/g; s/txqueuelen/}/g; s/ //g;' > /tmp/temp_mac_adresse
cut -d"}" -f1 /tmp/temp_mac_adresse > /tmp/temp_mac_adresse1
cut -d"{" -f2 /tmp/temp_mac_adresse1 > /tmp/mac_adresse
rm -f /tmp/temp_mac_adresse
rm -f /tmp/temp_mac_adresse1
grep -ci "inet addr:" ip_installe_poste > /tmp/nb_ancienne_version_ifconfig
nb_ancienne_version_ifconfig=`cat /tmp/nb_ancienne_version_ifconfig`
rm -f /tmp/nb_ancienne_version_ifconfig
if [ "$nb_ancienne_version_ifconfig" = 1 ]
then
	grep -i "inet addr:" ip_installe_poste | grep -i "Mask:" | perl -pi -e 's/addr:/{/g; s/Bcast:/{/g; s/Mask:/{/g; s/ //g;' > /tmp/tempIP1
	cut -d"{" -f2 /tmp/tempIP1 > ip_installe_poste
	cut -d"{" -f4 /tmp/tempIP1 > /tmp/ip_masque_poste
else # nouveau ifconfig
	grep -i "inet " ip_installe_poste | grep -i "netmask" | perl -pi -e 's/inet /{/g; s/netmask /{/g; s/broadcast /{/g; s/ //g;' > /tmp/tempIP1
	cut -d"{" -f2 /tmp/tempIP1 > ip_installe_poste
	cut -d"{" -f3 /tmp/tempIP1 > /tmp/ip_masque_poste
fi
rm -f /tmp/tempIP1
grep -ci "169.254." ip_installe_poste > /tmp/tempnombre
test_dhcp=`cat /tmp/tempnombre`
rm -f /tmp/tempnombre
if [ "$test_dhcp" = "1" ]       # reseau interne cree par le dhcp
then
        supprimer_ip_ethernet   # supprime l'adresse ip
        ip_installe=
        echo "" > ip_installe_poste
fi
ip_installe=`cat ip_installe_poste`
}
#----------------------------------------------------------------------------------------------------
recuperer_IP() 	##  sortir l'ip et le masque du poste de carte_ethi et le mettre dans ip_installe_poste et /tmp/ip_masque_poste:
{
cherche_carte_ethernet_cablee
if (test -e /tmp/sortir )
then
    return
fi

echo "$carte_ethi" > /tmp/dhcp_ethX

lire_valeur_ip_de_ifconfig

if [ "$ip_installe" = "" ]
then
	echo "ip_fixe_oscar" > /etc/adresse_ip_installee	# sur eth0 si OSCAR
	if [ "$test_dhcp" != "1" ]
	then
    		/etc/init.d/net.$carte_ethi stop 1>/dev/null 2>/dev/null
    	fi
else
	echo "ip_deja_installe" > /etc/adresse_ip_installee	# sur eth0
fi
}
#----------------------------------------------------------------------------------------------------
afficher_IP() 	##  afficher l'IP dans boite info
{
rm -f /tmp/carte_ethi
recuperer_IP
if ( test -e /tmp/sortir )
then
    rm -f /tmp/sortir
fi
rm -f /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
valeur=`cat ip_installe_poste`
cut -d"." -f1-2 ip_installe_poste > /tmp/test_non_connecte
test_non_connecte=`cat /tmp/test_non_connecte`
if [ "$test_non_connecte" = "169.254" ]
then
	ip_installe=
else
	ip_installe=`cat ip_installe_poste`
fi

if [ "$ip_installe" = "" ]
then
	 echo "\Zb\Z2`cat $chemin_langue/msgbox_71` \Zn \Zn " >> /tmp/fichiertmp
fi

if ! [ "$valeur" = "" ]
then
	echo "`cat $chemin_langue/msgbox_72`: \Z1`cat ip_installe_poste`\Zn " >> /tmp/fichiertmp
fi
echo " " >> /tmp/fichiertmp
ifconfig $carte_ethi >> /tmp/fichiertmp
grep -v "addr:169.254" /tmp/fichiertmp > /tmp/fichiertmp1
cp -f /tmp/fichiertmp1 /tmp/fichiertmp
perl -pi -e 's/  /\\Zn  /g;' /tmp/fichiertmp
perl -pi -e 's/inet /\\Z2inet \\Zn\\Z1/g;' /tmp/fichiertmp

# Informations sur la connexion ETHERNET
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title " `cat $chemin_langue/msgbox_70` " \
	--msgbox "`cat /tmp/fichiertmp`" 0 0
rm -f /tmp/fichiertmp
rm -f /tmp/fichiertmp1
rm -f /tmp/fichiertmp2
}
#----------------------------------------------------------------------------------------------------
fichier_avec_cle_usb()
{
modprobe usb-storage -s
rm -f /tmp/avec_cle_usb
dmesg | grep scsi > /tmp/avec_cle_usb

if ( test -e /dev/sd )
then 	ls /dev/sd  >> /tmp/avec_cle_usb
fi
rm -f /tmp/avec_cle_usb
info_ddialog
egrep -e "^/dev" /tmp/fichier_disque_dur | \
perl -pi -e 's/\*//g;  s/\+/ /g; s/\-/ /g; s/  /:/g; s/:+/:/g;' >> /tmp/avec_cle_usb
}
#----------------------------------------------------------------------------------------------------
boite_monter_cle_usb()	## monte la cle usb dans /mnt/cle_usb
{

	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" --cancel-label "`cat $chemin_langue/Annuler`" \
	--title " Monter une clé USB " \
	--menu "\n\Zb\Z3 La clé USB ne doit pas être déjà installée\Zn \n\n" 10 80 0 \
	"" "" \
	"" "" \
	"" "\Z4La clé USB n'étant pas encore branchée : Appuyez sur la touche \Zb\Z7 Entrée\Zn " \
	"" "" \
	"" ""
case $? in
    0) 	
#		rmmod usb-storage -s
	modprobe usb-storage -s
	rm -f /tmp/sans_cle_usb
	dmesg | grep scsi > /tmp/sans_cle_usb
	if ( test -e /dev/sd )
	then 	ls /dev/sd 
	fi
	rm -f /tmp/sans_cle_usb
	info_ddialog
	egrep -e "^/dev" /tmp/fichier_disque_dur | \
	perl -pi -e 's/\*//g;  s/\+/ /g; s/\-/ /g; s/  /:/g; s/:+/:/g;' >> /tmp/sans_cle_usb

	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" --cancel-label "`cat $chemin_langue/Annuler`" \
	--title " Insérez la clé USB " \
	--menu "\n\Zb\Z3 Insérez maintenant la clé USB \Zn\n\n" 10 80 0 \
		"" "" \
		"" "" \
		"" "\Zb\Z1Branchez maintenant la clé USB,\Z4 puis : appuyez sur la touche \Zb\Z7 Entrée\Zn " \
	        "" "" \
		"" ""
	case $? in
    	0)	fichier_avec_cle_usb
		return ;;
        1) 	
        	rm -f /tmp/sortir
        	echo "" > /tmp/sortir
		return ;;
	255)
		rm -f /tmp/sortir
        	echo "" > /tmp/sortir
		return ;;
	esac ;;
	
    1) 		rm -f /tmp/sortir
        	echo "" > /tmp/sortir
		return;;
    255) 	rm -f /tmp/sortir
        	echo "" > /tmp/sortir
		return ;;
esac 

}
#-----------------------------------------------------------------------------------------------------
boites_fin_montage_cle_usb()
{
rm -f /tmp/fichiertmp
echo "" > /tmp/fichiertmp

echo "`df $repertoire | grep "$repertoire"`" > /tmp/toutes_les_valeurs
grep -i "dev" /tmp/toutes_les_valeurs > /tmp/toutes_les_valeurs1

valeur1=`awk '{print$1}' /tmp/toutes_les_valeurs1`
valeur2=`awk '{print$2}' /tmp/toutes_les_valeurs1`
valeur3=`awk '{print$4}' /tmp/toutes_les_valeurs1`
valeur=`awk '{print$1}' /tmp/toutes_les_valeurs1`
	
rm -f /tmp/toutes_les_valeurs
rm -f /tmp/toutes_les_valeurs1

valeur1=$[valeur1/1024]
valeur2=$[valeur2/1024]
valeur2=$[valeur1-valeur2]
if ! [ "$valeur" = "captivefs" ]
then
echo "`cat $chemin_langue/repertoire_6` /mnt/$repertoire, `cat $chemin_langue/repertoire_2` $valeur3 : " >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
echo "$valeur2 Mo `cat $chemin_langue/repertoire_3` $valeur1 Mo " >> /tmp/fichiertmp
else
echo "`cat $chemin_langue/repertoire_1` /mnt/$repertoire : " >> /tmp/fichiertmp
fi
echo " " >> /tmp/fichiertmp
ls /mnt/$repertoire >> /tmp/fichiertmp
echo " " >> /tmp/fichiertmp
echo  "\n`cat $chemin_langue/repertoire_7` \Zn\n " >> /tmp/fichiertmp2


echo "/mnt/$repertoire :  clé USB montée $type " >> /tmp/historique
	
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title " Fichiers montés sur la clé USB " \
	--exit-label "`cat $chemin_langue/Continuer`" --textbox "/tmp/fichiertmp" 0 0 \
	--and-widget --colors --ok-label "`cat $chemin_langue/Continuer`" --no-cancel \
	--extra-button --extra-label "Afficher les fichiers" \
	--title " Montage de la clé USB " \
	--menu "\n\Zb\Z1 Les fichiers de la clé USB sont montés\n\n" 10 80 0 \
	"" "Les fichiers contenus dans la clé sont dans le répertoire \Z2/mnt/$repertoire \Zn "
case $? in
    0)	rm -f /tmp/fichiertmp
	return;;
    3) boites_fin_montage_cle_usb;;
    1)	ls /dev/sd
	rm -f /tmp/sans_cle_usb
	echo `ls /dev` > /tmp/sans_cle_usb
	dmesg | grep scsi >> /tmp/tempfile
	ls /dev/sd
	installe_cle_usb
	if ( test -e /tmp/sortir )
	then return
	else
	boites_fin_montage_cle_usb
	fi;;

    255) rm -f /tmp/fichiertmp
	return;;
esac 
}
#-----------------------------------------------------------------------------------------------------
boite_demontage_cle_usb()
{
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" --no-cancel \
	--title " Démontage de la clé USB " \
	--menu "\n\n" 10 0 0  \
	"" "" \
	"" "\Zb\Z1      La clé USB \Z4$cle \Z1est démontée" \
	"" "" \
	"" "\Z2Vous pouvez l'enlever en toute sécurité " \
	"" ""
case $? in
    0)
	return;;
    255)
	return;;
esac 
}
#-----------------------------------------------------------------------------------------------------
fichier_nouvelle_cle()
{
rm -f /tmp/tempusb
echo `diff /tmp/sans_cle_usb /tmp/avec_cle_usb` | perl -pi -e 's/ > /'\\n'/g; s/ < /'\\n'/g;' | \
grep -i "dev" > /tmp/tempusb
}
#-----------------------------------------------------------------------------------------------------
boite_patience_cle_usb()
{
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" --cancel-label "`cat $chemin_langue/Annuler`" --timeout 3 \
	--title " Installation de la connexion USB " \
	--menu "\n\n" 10 80 0  \
	"" "" \
	"" "\Zb\Z1      Patience  \Z3OSCAR \Z1recherche votre port USB..." \
	"" "" \
	"" "\Z2Ce temps dépend : " \
	"" "\Z2de la capacité du périphérique branché et du nombre de partitions. " \
	"" "" \
	"" "\Zn      \Zb\Z4Temps estimé maxi = \Z3$[$valeur_max_lecture_cle_usb-$lecture_cle_usb] " \
	"" ""
case $? in
    0)  #lecture_cle_usb=$valeur_max_lecture_cle_usb
	return;;
    1)  lecture_cle_usb=$valeur_max_lecture_cle_usb
    return;;
    255) #lecture_cle_usb=$valeur_max_lecture_cle_usb
	 return;;
esac
}
#-----------------------------------------------------------------------------------------------------
installe_cle_usb()
{
boite_patience_cle_usb
fichier_nouvelle_cle
fichier_avec_cle_usb
if ( test -e /dev/sd )
then
	ls /dev/sd
fi
fichier_nouvelle_cle
reponse=`cat /tmp/tempusb`
ajouter_cle=$reponse
cp -f /tmp/tempusb /tmp/nouvelle_cle

if ! [ "$reponse" = "" ]
then
	rm -f /tmp/tempfile1
	perl -pi -e 's/:/     :/g;' /tmp/tempusb
	cut -c6-12 /tmp/tempusb > /tmp/tempfile1
	perl -pi -e 's/ //g;' /tmp/tempfile1

	rm -f /tmp/tempfile
	grep -ci "dev" /tmp/tempusb > /tmp/tempfile
	nombre_cles_simul=`cat /tmp/tempfile`
	rm -f /tmp/tempfile
	rm -f /tmp/tempusb
	echo `gawk '{ print $1 ":" } ' /tmp/tempfile1` > /tmp/tempusb
	perl -pi -e 's/: /:/g;' /tmp/tempusb  ## pour enlever les espaces
	reponse=`cat /tmp/tempusb` # toutes les partitions du type séparées par :
	rm -f /tmp/tempfile1
numero_cle=0
until  ( test $numero_cle = $nombre_cles_simul )
    do
	rm -f /tmp/tempfile1
	numero_cle=$[$numero_cle+1]
	cut -d":" -f$numero_cle /tmp/tempusb > /tmp/tempfile1
	repertoire=`cat /tmp/tempfile1`
	valeur=`expr substr $repertoire 1 3`
	if ! [ "$valeur" = "" ]
	then		
		rm -f /tmp/tempfile
 		if ! ( test -e /tmp/montage_cle_usb )	## initialise dans multi_lilo
		then
			echo "$ajouter_cle" > /tmp/montage_cle_usb
		else	
			grep -ci "$repertoire" /tmp/montage_cle_usb > /tmp/tempfile
			nombre_cles=`cat /tmp/tempfile`
			rm -f /tmp/tempfile
			if [ "$nombre_cles" = "0" ]
			then
				echo "$ajouter_cle" >> /tmp/montage_cle_usb
			fi
		fi
		rm -f /tmp/nom_simple
		echo "$repertoire" > /tmp/nom_simple
		# avec disque complet dans tab_disq 
		recherche_valeurs_pour_monter_partition
		monter_partition
		boites_fin_montage_cle_usb
	fi
    done
	rm -f /tmp/tempfile
	rm -f /tmp/tempfile1

    	rm -f /tmp/sortir
	echo "" > /tmp/sortir
    	rm -f /tmp/sortir_installe_cle_usb
	echo "" > /tmp/sortir_installe_cle_usb
	lecture_cle_usb=0
	valeur_max_lecture_cle_usb=0

	if ( test -e /tmp/sortir )
	    then
	    rm -f /tmp/sans_cle_usb
	    return
	fi 
else
until  ( test $lecture_cle_usb = $valeur_max_lecture_cle_usb )
do
	lecture_cle_usb=$[$lecture_cle_usb+1]
	installe_cle_usb
done
	if ( test -e /tmp/sortir )
	    then
	    rm -f /tmp/sans_cle_usb
	    return
	fi 

	# La nouvelle connexion USB est \Zb\Z2introuvable
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/DESOLE` " \
	--msgbox "\n\n\n\Zb\Z1 `cat $chemin_langue/msgbox_73` ! \Zn\n\n\n " 10 50
    	rm -f /tmp/sortir
	rm -f /tmp/avec_cle_usb
	echo "" > /tmp/sortir
	lecture_cle_usb=0
	valeur_max_lecture_cle_usb=0
    	rm -f /tmp/sortir_installe_cle_usb
	echo "" > /tmp/sortir_installe_cle_usb
fi
rm -f /tmp/sans_cle_usb
rm -f /tmp/tempusb
}
#----------------------------------------------------------------------------------------------------
monter_cle_usb()	## monte la cle usb dans /mnt/$reponse
{
boite_monter_cle_usb
	if ( test -e /tmp/sortir )
	    then
	    rm -f /tmp/sans_cle_usb
	    return
	fi 
valeur_max_lecture_cle_usb=20	# Temps de recherche max de la cle
lecture_cle_usb=0
installe_cle_usb

	if ( test -e /tmp/sortir_installe_cle_usb )
	    then
	    rm -f /tmp/sortir_installe_cle_usb
	    rm -f /tmp/sortir
	    return
	fi 
}
#----------------------------------------------------------------------------------------------------
demonter_cle_usb()	## demonte la cle usb dans /mnt/$reponse
{
rm -f /tmp/bozo
cp -f /tmp/montage_cle_usb /tmp/tempfile
perl -pi -e 's/\*//g;  s/\+/ /g; s/\-/ /g; s/  /:/g; s/:+/:/g;' /tmp/tempfile
awk 'BEGIN { FS=" " } { printf ("%0s %15s %25s\n","\""$1"\" \"",$2,$3"\" \\")}' /tmp/tempfile > /tmp/bozo
cp /usr/share/oscar/usr/exec_dialog_src /tmp/exec_dialog -f

rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion
echo " Répertoire de la clé USB à démonter " > /tmp/menu_titre
echo "\n\Zn\Z2Choisissez la clé USB à démonter: \Zn " > /tmp/menu_texte
echo "\n\n\Zn\Z4    partition        taille(Ko)               type \Zn" >> /tmp/menu_texte
echo "" > /tmp/fichierquestion

faire_exec_dialog
if ( test -e /tmp/sortir )
    then
    rm -f /tmp/sortir
    return
fi 

rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion
nom_simple=`expr substr $reponse 6 6`	# reponse de faire_exec_dialog /dev/sdaii
cle=`expr substr $reponse 6 3` # pour boite_demontage_cle_usb
rm -f /tmp/tempfile
rm -f /tmp/tempfile1
grep -i "$nom_simple" /etc/mtab > /tmp/tempfile
cut -f1-7 -d/ /tmp/tempfile > /tmp/tempfile1	# /dev/scsi/h0/b0/t0/l0

nom_partitions_a_demonter=`cat /tmp/tempfile1`/part
rm -f /tmp/tempfile
rm -f /tmp/tempfile1
grep -i "$nom_partitions_a_demonter" /etc/mtab > /tmp/tempfile
grep -ci "$nom_partitions_a_demonter" /etc/mtab > /tmp/tempfile1
nombre_partitions_a_demonter=`cat /tmp/tempfile1`
rm -f /tmp/tempfile1
cut -f10 -d/ /tmp/tempfile > /tmp/tempfile1	# /dev/scsi/h0/b0/t0/l0/parti /mnt/sdai on prend sdai
perl -pi -e 's/: /                                    :/g;' /tmp/tempfile1	# sdai:
rm -f /tmp/tempfile
cut -c1-30 /tmp/tempfile1 > /tmp/tempfile
rm -f /tmp/fichierligne
echo `gawk '{ print $1 ":" } ' /tmp/tempfile` > /tmp/fichierligne
rm -f /tmp/tempfile
perl -pi -e 's/: /:/g;' /tmp/fichierligne  ## pour enlever les espaces
reponse=`cat /tmp/fichierligne` # toutes les partitions montées du disque, séparées par :
# reponse: sdai:sdaj:sdak ...

numero_part=0	
until  ( test $numero_part = $nombre_partitions_a_demonter )
    do
	rm -f /tmp/tempfile
	numero_part=$[$numero_part+1]
	cut -d":" -f$numero_part /tmp/fichierligne > /tmp/tempfile
	partition_a_demonter=`cat /tmp/tempfile`	## sdai
   	umount /mnt/$partition_a_demonter 2>/dev/null ; sync
	echo "/mnt/$partition_a_demonter : clé USB démontée  " >> /tmp/historique

	rm -f /tmp/tempfile
	grep -ci "/mnt/serveur_$partition_a_demonter " /etc/mtab > /tmp/tempfile
	nombre_existe=`cat /tmp/tempfile`
	if ! [ "$nombre_existe" = "0" ]	# cle USB partagee sur le reseau avec OSCAR
	then
	    umount /mnt/serveur_$partition_a_demonter 2>/dev/null ; sync
	    echo "/mnt/serveur_$partition_a_demonter : clé USB démontée  " >> /tmp/historique
	fi
	rm -f /tmp/tempfile
	rm -f /tmp/tempusb
	grep -i "$partition_a_demonter" /tmp/montage_cle_usb> /tmp/tempfile
	echo `diff /tmp/montage_cle_usb /tmp/tempfile` | perl -pi -e 's/ > /'\\n'/g; s/ < /'\\n'/g;' | \
	grep -i "dev" > /tmp/tempusb
	cp -f /tmp/tempusb /tmp/montage_cle_usb
	
    done
rm -f /tmp/fichierligne
rm -f /tmp/tempusb
rm -f /tmp/tempfile
# rmmod usb-storage -s
boite_demontage_cle_usb
}
#----------------------------------------------------------------------------------------------------
boite_choix_formatage()
{
rm -f /tmp/tempfile
output=exit
dialog  --no-cancel --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
--title " Type de formatage de cette partition " \
--menu  "\n  `cat $chemin_langue/menu_1` : \n " 10 70 0  \
	" " "\Zb\Z4Types de formatages possibles pour \Z1/dev/$repertoire :" \
	" " "" \
	Linux "Linux ext3 ou ext4" \
	Linux_swap "Linux pour une partition swap" \
	" " "" \
	NTFS "Windows XP, 2000 ou NT" \
	FAT32 "Windows 95 ou 98." \
	" " "" \
	quitter "\Z1Quitter\Zn ces commandes." \
	" " "" 2>/tmp/tempfile
	
if [ $? = "255" ]
then
    rm -f /tmp/tempfile
    rm -f /tmp/rien
    echo "" > /tmp/sortir
    return
fi
output=`cat /tmp/tempfile`
rm -f /tmp/rien
if [ "$output" = " " ]
	then
	boite_choix_formatage
elif [ "$output" = "quitter" ]
	then
	rm -f /tmp/tempfile
	rm -f /tmp/rien
	echo "" > /tmp/sortir
	return
elif [ "$output" = "" ]
	then
	boite_choix_formatage
elif [ "$output" = "Linux" ]
then
        type=linux
elif [ "$output" = "Linux_swap" ]
then
        type=linux_swap
elif [ "$output" = "NTFS" ]
then
	type=ntfs
elif [ "$output" = "FAT32" ]
then
	type=vfat
elif [ "$output" = "FAT16" ]
then
	type=vfat
fi
rm -f /tmp/tempfile
}
#----------------------------------------------------------------------------------------------------
vitesse_formatage()
{
# Caractéristique du formatage de cette partition
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/menu_124`" --ok-label "`cat $chemin_langue/menu_125`" \
	--title " `cat $chemin_langue/menu_561` " \
	--menu "\n\Zb\Z3   `cat $chemin_langue/menu_562` \Z1/dev/$repertoire :\n\n" 0 0 0 \
	"" "" \
	"" "`cat $chemin_langue/menu_123`" \
	"" "" \
	"" "\Zb\Z4`cat $chemin_langue/menu_125`\Zn, `cat $chemin_langue/menu_563`\Zn "\
	"" "" \
	"" "\Zb\Z4`cat $chemin_langue/menu_124`\Zn, `cat $chemin_langue/menu_127`" \
	"" "" \
	"" "" \
	"" "" \
	"" "`cat $chemin_langue/menu_128`\Zn "
case $? in
    0)	formatage=rapide
    	;;
    1)	formatage=minutieux
	;;
    255) 
    echo "" > /tmp/sortir
    return
    ;;
esac
}
#----------------------------------------------------------------------------------------------------
choix_type_formatage()
{
if ! [ "$formater_externe_ntfs" = "oui" ]
then
	rm -f /tmp/tempfile
	calendrier=$(date +%d/%m/%y)
	heure=$(date +%kh%Mmin)
	rm -f /tmp/rien
	type_format=`cat /tmp/type_format`
	#output=exit
	# Choix du type de formatage du système de fichiers
	dialog  --no-cancel --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
		--title " `cat $chemin_langue/menu_558` " \
		--menu  "  `cat $chemin_langue/menu_1` : " 7 75 0  \
		" " "\Zb\Z4`cat $chemin_langue/menu_559` \Zn\Z2$repertoire\Zb\Z4 `cat $chemin_langue/est` \Z3$type_format\Z4:" \
		" " "" \
		accepter "\Z1`cat $chemin_langue/menu_560` \Z2$repertoire\Zn `cat $chemin_langue/en` \Zb\Z3$type_format\Zn\Z4." \
		" " "" \
		quitter "`cat $chemin_langue/menu_61`" \
		" " "" \
		ext2 "\ZnLinux " \
		ext3 "\ZnLinux journalisé" \
		ext4 "\ZnLinux journalisé" \
		fat32 "\ZnWindows 95/98" \
		jfs "\ZnLinux JFS" \
		ntfs "\ZnWindows 2000 NT XP Seven" \
		reiserfs "\ZnLinux ReiserFS" \
		reiser4 "\ZnLinux Reiser4" \
		swap "\ZnLinux swap" \
		xfs "\ZnLinux XFS" \
		" " "" 2>/tmp/tempfile
		
	if [ $? = "255" ]
	then
	    rm -f /tmp/tempfile
	    rm -f /tmp/rien
	    echo "" > /tmp/sortir
	    return
	fi
	output=`cat /tmp/tempfile`
	rm -f /tmp/rien
	
	if [ "$output" = " " ]
	then
		choix_type_formatage
		main
	elif [ "$output" = "" ]
	then
		choix_type_formatage
		main
	elif [ "$output" = "ext2" ]
	then
	        echo "ext2" > /tmp/type_format
	        choix_type_formatage
	elif [ "$output" = "ext3" ]
	then
	        echo "ext3" > /tmp/type_format
	        choix_type_formatage
	elif [ "$output" = "ext4" ]
	then
	        echo "ext4" > /tmp/type_format
	        choix_type_formatage
	elif [ "$output" = "fat32" ]
	then
	        echo "fat32" > /tmp/type_format
	        choix_type_formatage
	elif [ "$output" = "fat16" ]
	then
	        echo "fat32" > /tmp/type_format
	        choix_type_formatage
	elif [ "$output" = "jfs" ]
	then
		echo "jfs" > /tmp/type_format
	        choix_type_formatage
	elif [ "$output" = "ntfs" ]
	then
	        echo "ntfs" > /tmp/type_format
	        choix_type_formatage
	elif [ "$output" = "reiserfs" ]
	then
	        echo "reiserfs" > /tmp/type_format
	        choix_type_formatage
	elif [ "$output" = "reiser4" ]
	then
	        echo "reiser4" > /tmp/type_format
	        choix_type_formatage
	elif [ "$output" = "swap" ]
	then
	        echo "swap" > /tmp/type_format
	        choix_type_formatage
	elif [ "$output" = "xfs" ]
	then
	        echo "xfs" > /tmp/type_format
	        choix_type_formatage
	elif [ "$output" = "quitter" ]
	then
		rm -f /tmp/tempfile
	        exit
	elif [ "$output" = "accepter" ]
	then
		rm -f /tmp/tempfile
	        return
	fi
	rm -f /tmp/tempfile
else
	echo "ntfs" > /tmp/type_format
fi
}
#----------------------------------------------------------------------------------------------------
modifier_type_table_partition() # apres le changement de type de format
{
grep -i "\/$repertoire" /tmp/table_partitions.sf > /tmp/tempfile1
cp /tmp/tempfile1 /tmp/tempfile2
perl -pi -e 's/Id= b/Id=b/g; s/Id= c/Id=c/g; s/Id= 7/Id=7/g;' /tmp/tempfile2

echo "Id=$type_id_ini" > /tmp/type1
echo "Id=$type_id" > /tmp/type2
echo "perl -pi -e 's/`cat /tmp/type1`/`cat /tmp/type2`/g;' /tmp/tempfile2" > /tmp/exec_nom
chmod +x /tmp/exec_nom
/tmp/exec_nom
rm -f /tmp/exec_nom
rm -f /tmp/type1
rm -f /tmp/type2

perl -pi -e 's/Id=c/Id= c/g; s/Id=7/Id= 7/g;' /tmp/tempfile2	# Oscar ne met que le type c en vfat
perl -pi -e 's/\/dev\//-dev-/g;' /tmp/tempfile2
perl -pi -e 's/\/dev\//-dev-/g;' /tmp/tempfile1
perl -pi -e 's/\/dev\//-dev-/g;' /tmp/table_partitions.sf

echo "perl -pi -e 's/`cat /tmp/tempfile1`/`cat /tmp/tempfile2`/g;' /tmp/table_partitions.sf" > /tmp/exec_nom
chmod +x /tmp/exec_nom
/tmp/exec_nom
rm -f /tmp/exec_nom
rm -f /tmp/tempfile1
rm -f /tmp/tempfile2
perl -pi -e 's/-dev-/\/dev\//g;' /tmp/table_partitions.sf	
echo
echo -e "\033[1;33mOSCAR\033[1;m met à jour le système de fichiers ..."
# sfdisk -f /dev/$disque < /tmp/table_partitions.sf 2>/dev/null 1>/dev/null
echo "$disque" > /tmp/disque_installer_table_sf
cp -f /tmp/table_partitions.sf /tmp/fichier_installer_table_sf
runme installer_table_partition_sf 2>/dev/null 1>/dev/null
rm -f /tmp/table_partitions.sf
runme formater_ligne_partitions_vfat_gpt
}
#----------------------------------------------------------------------------------------------------
formater_type()
{
rm -f /tmp/fs_type
rm -f /tmp/nb_fstype
if ( test -e /tmp/sortir )
then
	rm -f /tmp/type_format
        rm -f /tmp/sortir
	return
fi

type_format=`cat /tmp/type_format`
rm -f /tmp/type_format
if [ "$type_format" = "inconnu ??" ]
then
	return
fi

vitesse_formatage
if ( test -e /tmp/sortir )
then
	rm -f /tmp/sortir
	return
fi
umount /dev/$repertoire 2>/dev/null ; sync
# sfdisk -d /dev/$disque > /tmp/table_partitions.sf 2>/dev/null
echo "$disque" > /tmp/disque_table_sauvegarder_sf
sauver_table_partition_sf
cp -f /tmp/disque_table_sauvegarder_sf /tmp/table_partitions.sf
rm -f /tmp/disque_table_sauvegarder_sf



if [ "$type_format" = "ext2" ]
then
	echo
	echo -e " `cat $chemin_langue/texte_16` \033[1;34m$repertoire \033[1;m`cat $chemin_langue/en` \033[0;32mLinux ext2\033[1;m ..."
	echo
	if [ "$formatage" = "rapide" ]
	then
		mkfs.ext2 -vF /dev/$repertoire
	else		# minutieux:
		mkfs.ext2 -cvF /dev/$repertoire	#   pour chekdisk 
	fi
	fsck /dev/$repertoire
	type_id=83
	modifier_type_table_partition
elif [ "$type_format" = "ext3" ]
then
	echo
	echo -e " `cat $chemin_langue/texte_16` \033[1;34m$repertoire \033[1;m`cat $chemin_langue/en` \033[0;32mLinux ext3\033[1;m ..."
	echo
	if [ "$formatage" = "rapide" ]
	then
		mkfs.ext3 -vF /dev/$repertoire
	else		# minutieux:
		mkfs.ext3 -cvF /dev/$repertoire	#   pour chekdisk 
	fi
	fsck /dev/$repertoire
	type_id=83
	modifier_type_table_partition
elif [ "$type_format" = "ext4" ]
then
	echo
	echo -e " `cat $chemin_langue/texte_16` \033[1;34m$repertoire \033[1;m`cat $chemin_langue/en` \033[0;32mLinux ext4\033[1;m ..."
	echo
	if [ "$formatage" = "rapide" ]
	then
		mkfs.ext4 -vF /dev/$repertoire
	else		# minutieux:
		mkfs.ext4 -cvF /dev/$repertoire	#   pour chekdisk 
	fi
	fsck /dev/$repertoire
	type_id=83
	modifier_type_table_partition
elif [ "$type_format" = "fat32" ]	
then
	echo
	echo -e " `cat $chemin_langue/texte_16` \033[1;34m$repertoire \033[1;m`cat $chemin_langue/en` \033[0;32mFat32\033[1;m ..."
	echo
	if [ "$formatage" = "rapide" ]
	then
		mkdosfs -vF 32 /dev/$repertoire
	else		# minutieux:
		mkdosfs -cvF 32 /dev/$repertoire	#   pour chekdisk 
	fi
	type_id=c	# oscar ne met que le type c
	modifier_type_table_partition
elif [ "$type_format" = "fat16" ]	
then
	echo
	echo -e " `cat $chemin_langue/texte_16` \033[1;34m$repertoire \033[1;m`cat $chemin_langue/en` \033[0;32mFat32\033[1;m ..."
	echo
	if [ "$formatage" = "rapide" ]
	then
		mkdosfs -vF 32 /dev/$repertoire
	else		# minutieux:
		mkdosfs -cvF 32 /dev/$repertoire	#   pour chekdisk 
	fi
	type_id=c	# oscar ne met que le type c
	modifier_type_table_partition
elif [ "$type_format" = "jfs" ]	
then
	echo
	echo -e " `cat $chemin_langue/texte_16` \033[1;34m$repertoire \033[1;m`cat $chemin_langue/en` \033[0;32mLinux JFS\033[1;m ..."
	echo
	if [ "$formatage" = "rapide" ]
	then
		mkfs.jfs -q /dev/$repertoire
	else		# minutieux:
		mkfs.jfs -qc /dev/$repertoire
	fi
	type_id=83
	modifier_type_table_partition
elif [ "$type_format" = "ntfs" ]	
then
	echo
	echo -e " `cat $chemin_langue/texte_16` \033[1;34m$repertoire \033[1;m`cat $chemin_langue/en` \033[0;32mNTFS\033[1;m ..."
	echo
	if [ "$formatage" = "rapide" ]
	then
		mkntfs -f /dev/$repertoire 1>/dev/null
		fsck /dev/$repertoire -N 2>/tmp/ntfs_valide 1>/dev/null
		grep -ci ntfs /tmp/ntfs_valide > /tmp/nb_ntfs_valide
		nb_ntfs_valide=`cat /tmp/nb_ntfs_valide`
		rm -f /tmp/nb_ntfs_valide
		rm -f /tmp/ntfs_valide
		if [ "$nb_ntfs_valide" = 0 ]
		then
			echo
			echo -e " \033[1;33mOSCAR \033[1;34mcorrige la partition \033[1;32m$repertoire ntfs \033[1;34m:"
			echo
			mkfs.ext4 -qF /dev/$repertoire
			mkntfs -f /dev/$repertoire
		fi
	else		# minutieux:
		mkntfs /dev/$repertoire
	fi
	type_id=7
	modifier_type_table_partition	
elif [ "$type_format" = "reiserfs" ]	
then
        echo
	echo -e " `cat $chemin_langue/texte_16` \033[1;34m$repertoire \033[1;m`cat $chemin_langue/en` \033[0;32mLinux ReiserFS\033[1;m ..."
	echo
	if [ "$formatage" = "rapide" ]
	then
		mkfs.reiserfs -fq /dev/$repertoire 2>/dev/null
	else		# minutieux:
		mkfs.reiserfs -f /dev/$repertoire
	fi
	type_id=83
	modifier_type_table_partition
elif [ "$type_format" = "reiser4" ]	
then
        echo
        echo -e " \033[1;31m Linux 3.4.24 ne supporte pas \033[1;33mreiser4\033[1;31m ... "
        echo
        sleep 3
        return
	echo -e " `cat $chemin_langue/texte_16` \033[1;34m$repertoire \033[1;m`cat $chemin_langue/en` \033[0;32mLinux Reiser4\033[1;m ..."
	echo -e
	if [ "$formatage" = "rapide" ]
	then
		mkfs.reiser4 -fy /dev/$repertoire 2>/dev/null
	else		# minutieux:
		mkfs.reiser4 -f /dev/$repertoire
	fi
	type_id=83
	modifier_type_table_partition
elif [ "$type_format" = "swap" ]	
then
	echo
	echo -e " `cat $chemin_langue/texte_16` \033[1;34m$repertoire \033[1;m`cat $chemin_langue/en` \033[0;32mLinux swap\033[1;m ..."
	echo
	if [ "$formatage" = "rapide" ]
	then
	mkfs.ext3 -vF /dev/$repertoire
	else		# minutieux:
	mkfs.ext3 -cvF /dev/$repertoire	#   pour chekdisk 
	fi
	mkswap -f /dev/$repertoire
	type_id=82
	modifier_type_table_partition
elif [ "$type_format" = "xfs" ]
then
	        echo
		echo -e " `cat $chemin_langue/texte_16` \033[1;34m$repertoire \033[1;m`cat $chemin_langue/en` \033[0;32mLinux XFS\033[1;m ..."
		echo
		if [ "$formatage" = "rapide" ]
		then
			mkfs.xfs -fq /dev/$repertoire
		else		# minutieux:
			mkfs.xfs -f /dev/$repertoire
		fi
		type_id=83
		modifier_type_table_partition
fi
}
#----------------------------------------------------------------------------------------------------
monter_partition_local()
{
evms_oscar=
if ! ( test -e /mnt/$repertoire_mnt )
then
		mkdir /mnt/$repertoire_mnt
fi
fsck /dev/$partition_dev -N > /tmp/fs_type

grep -ci "ntfs" /tmp/fs_type > /tmp/nb_fstype
valeur=`cat /tmp/nb_fstype`
if [ "$valeur" = "1" ] # partition ntfs
then
		partition_ntfs_a_monter=$partition_dev
		repertoire_ntfs_a_monter=$repertoire_mnt
		monter_partition_ntfs
else
		grep -ci "reiserfs" /tmp/fs_type > /tmp/nb_fstype
		valeur=`cat /tmp/nb_fstype`
		if [ "$valeur" = "1" ] # partition ReiserFS
		then
				mount -t reiserfs /dev/$partition_dev /mnt/$repertoire_mnt
		else
				grep -ci "xfs" /tmp/fs_type > /tmp/nb_fstype
				valeur=`cat /tmp/nb_fstype`
				if [ "$valeur" = "1" ] # partition XFS
				then
						mount -t xfs /dev/$partition_dev /mnt/$repertoire_mnt
				else
						grep -ci "jfs" /tmp/fs_type > /tmp/nb_fstype
						valeur=`cat /tmp/nb_fstype`
						if [ "$valeur" = "1" ] # partition JFS
						then
								mount -t jfs /dev/$partition_dev /mnt/$repertoire_mnt
						else
								grep -ci "ext4" /tmp/fs_type > /tmp/nb_fstype
								valeur=`cat /tmp/nb_fstype`
								if [ "$valeur" = "1" ] # partition ext4
								then
										mount -t ext4 /dev/$partition_dev /mnt/$repertoire_mnt
								else
										grep -ci "reiser4" /tmp/fs_type > /tmp/nb_fstype
										valeur=`cat /tmp/nb_fstype`
										if [ "$valeur" = "1" ] # partition Reiser4
										then
												mount -t reiser4 /dev/$partition_dev /mnt/$repertoire_mnt
										else  # autres cas ext3 et ext2
												grep -ci "ext2" /tmp/fs_type > /tmp/nb_fstype
												valeur=`cat /tmp/nb_fstype`
												if [ "$valeur" = "1" ] # partition Reiser4
												then
														mount -t ext2 /dev/$partition_dev /mnt/$repertoire_mnt
												else
														grep -ci "ext2" /tmp/fs_type > /tmp/nb_fstype
														valeur=`cat /tmp/nb_fstype`
														if [ "$valeur" = "1" ]
														then
																mount -t ext2 /dev/$partition_dev /mnt/$repertoire_mnt
														else
																grep -ci "ext3" /tmp/fs_type > /tmp/nb_fstype
																valeur=`cat /tmp/nb_fstype`
																if [ "$valeur" = "1" ]
																then
																		mount -t ext3 /dev/$partition_dev /mnt/$repertoire_mnt
																else	# toutes les autres
																		mount /dev/$partition_dev /mnt/$repertoire_mnt
																fi
														fi
												fi
										fi
								fi
						fi
				fi
		fi
fi
rm -f /tmp/fs_type
rm -f /tmp/nb_fstype		
}
#----------------------------------------------------------------------------------------------------
formater_ntfs()
{
formater_externe_ntfs=oui
formater
}
#----------------------------------------------------------------------------------------------------
formater()
{
if ! [ "$formater_externe_ntfs" = "oui" ]
then
	# Formater une partition
	echo " `cat $chemin_langue/menu_554` " > /tmp/menu_titre
	echo "\n\Zb\Z1`cat $chemin_langue/menu_555`." > /tmp/menu_texte
	echo "\n\Zb\Z4`cat $chemin_langue/menu_556` \Z4:" > /tmp/fichierquestion
	echo "\n\n`cat $chemin_langue/menu_557`" >> /tmp/fichierquestion
	boites_demande_montage
	if ( test -e /tmp/sortir )
        then
	        rm -f /tmp/sortir
		return
	fi

	rm -f /tmp/menu_titre
	rm -f /tmp/menu_texte
	rm -f /tmp/fichierquestion

	perl -pi -e 's/\/dev\///g;' /tmp/tempfile
	repertoire=`cat /tmp/tempfile`
fi

disque=`expr substr $repertoire 1 3`
numero=`expr substr $repertoire 4 3`
info_ddialog
# trouver_type_partition
if [ "$finir_sousprogramme_trouver_type_partition" = "oui" ]
then
	return 1
fi

# on ne peut pas encore changer le type avec boite_choix_formatage
if ( test -e /tmp/sortir )
then
	rm -f /tmp/sortir
	return
fi

grep -i $repertoire /tmp/fichier_disque_dur | grep -c Linux > /tmp/nb_partition_linux
nb_partition_linux=`cat /tmp/nb_partition_linux`
rm -f /tmp/nb_partition_linux
if [ "$nb_partition_linux" = "1" ] # partition linux non swap
then
	fsck /dev/$repertoire -N > /tmp/fs_type	
	grep -ci "reiserfs" /tmp/fs_type > /tmp/nb_fstype
	valeur=`cat /tmp/nb_fstype`
	if [ "$valeur" = "1" ]
	then
		echo "reiserfs" > /tmp/type_format
		type_id_ini=83
		choix_type_formatage
		formater_type
		return
	fi
	grep -ci "reiser4" /tmp/fs_type > /tmp/nb_fstype
	valeur=`cat /tmp/nb_fstype`
	if [ "$valeur" = "1" ]
	then
		echo "reiser4" > /tmp/type_format
		type_id_ini=83
		choix_type_formatage
		formater_type
		return
	fi
	grep -ci "xfs" /tmp/fs_type > /tmp/nb_fstype
	valeur=`cat /tmp/nb_fstype`
	if [ "$valeur" = "1" ]
	then
		echo "xfs" > /tmp/type_format
		type_id_ini=83
		choix_type_formatage
		formater_type
		return
	fi
	grep -ci "jfs" /tmp/fs_type > /tmp/nb_fstype
	valeur=`cat /tmp/nb_fstype`
	if [ "$valeur" = "1" ]
	then
		echo "jfs" > /tmp/type_format
		type_id_ini=83
		choix_type_formatage
		formater_type
		return
	fi
	grep -ci "ext2" /tmp/fs_type > /tmp/nb_fstype
	valeur=`cat /tmp/nb_fstype`
	if [ "$valeur" = "1" ]
	then
		echo "ext2" > /tmp/type_format
		type_id_ini=83
		choix_type_formatage
		formater_type
		return
	fi
	grep -ci "ext3" /tmp/fs_type > /tmp/nb_fstype
	valeur=`cat /tmp/nb_fstype`
	if [ "$valeur" = "1" ]
	then
		echo "ext3" > /tmp/type_format
		type_id_ini=83
		choix_type_formatage
		formater_type
		return
	fi
	grep -ci "ext4" /tmp/fs_type > /tmp/nb_fstype
	valeur=`cat /tmp/nb_fstype`
	if [ "$valeur" = "1" ]
	then
		echo "ext4" > /tmp/type_format
		type_id_ini=83
		choix_type_formatage
		formater_type
		return
	fi
	echo "ext3" > /tmp/type_format
	type_id_ini=83
	choix_type_formatage
	formater_type
	return
else
	grep -i $repertoire /tmp/fichier_disque_dur | grep -ci swap > /tmp/nb_partition_swap
	nb_partition_swap=`cat /tmp/nb_partition_swap`
	rm -f /tmp/nb_partition_swap
	if [ "$nb_partition_swap" = "1" ] # partition swap
	then
		echo "swap" > /tmp/type_format
		type_id_ini=82
		choix_type_formatage
		formater_type
		return
	else
		grep -i $repertoire /tmp/fichier_disque_dur | grep -ci ntfs > /tmp/nb_partition_ntfs
		nb_partition_ntfs=`cat /tmp/nb_partition_ntfs`
		rm -f /tmp/nb_partition_ntfs
		if [ "$nb_partition_ntfs" = "1" ] # partition ntfs
		then
			echo "ntfs" > /tmp/type_format
			type_id_ini=7
			choix_type_formatage
			formater_type
			return
		else
			grep -i $repertoire /tmp/fichier_disque_dur | grep -ci fat32 > /tmp/nb_partition_fat32
			nb_partition_fat32=`cat /tmp/nb_partition_fat32`
			rm -f /tmp/nb_partition_fat32
			if [ "$nb_partition_fat32" = "1" ] # partition fat32
			then
				# deux valeurs prévues b et c
				echo "fat32" > /tmp/type_format
				type_id_ini=$id_type	# b ou c
				choix_type_formatage
				formater_type
				return
			else
				grep -i $repertoire /tmp/fichier_disque_dur | grep -ci fat16 > /tmp/nb_partition_fat16
				nb_partition_fat16=`cat /tmp/nb_partition_fat16`
				rm -f /tmp/nb_partition_fat16
				if [ "$nb_partition_fat16" = "1" ] # partition fat16 formatee en fat32
		               	then
		               		# deux valeurs prévues b et c
					echo "fat32" > /tmp/type_format
					type_id_ini=$id_type	# b ou c
					choix_type_formatage
					formater_type
					return
				else
					rm -f /tmp/fichiertmp
					# Ce type de format est inconnu
					echo "inconnu ??" > /tmp/type_format
					type_id_ini=autre
					choix_type_formatage
					formater_type
					return
					#dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
					#--ok-label "`cat $chemin_langue/Continuer`" \
					#--title " `cat $chemin_langue/DESOLE` " \
					#--msgbox "\n\Zb\Z1   `cat $chemin_langue/msgbox_74` !\n\n" 10 60
					#rm -f /tmp/fichiertmp
					#return
				fi
			fi
		fi
	fi
fi
}
#----------------------------------------------------------------------------------------------------
nettoyer_e2fsck()
{
echo " `cat $chemin_langue/menu_554a` " > /tmp/menu_titre
echo "" > /tmp/menu_texte
echo "\n\Zb\Z4`cat $chemin_langue/menu_555a` \Z4:" > /tmp/fichierquestion
echo "\n\n`cat $chemin_langue/menu_557`" >> /tmp/fichierquestion
echo "" > /tmp/sp_nettoyer_e2fsck
boites_demande_montage
rm -f /tmp/sp_nettoyer_e2fsck
if ( test -e /tmp/sortir )
then
        rm -f /tmp/sortir
	return
fi

rm -f /tmp/menu_titre
rm -f /tmp/menu_texte
rm -f /tmp/fichierquestion

e2fsck `cat /tmp/tempfile`

rm -f /tmp/tempfile
}
#----------------------------------------------------------------------------------------------------
boite_info_cfdisk()
{
# Information
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --ok-label "`cat $chemin_langue/Continuer`" \
	--no-cancel \
	--backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/Information` " \
	--menu "\n \Zb\Z1                              `cat $chemin_langue/ATTENTION` : \n " 10 80 0 \
	"" "" \
	"" "\Zn`cat $chemin_langue/menu_566` : \Zb\Z1$disque_choisi\Zn " \
	"" "" \
	"" "\Zn`cat $chemin_langue/menu_564`  : \Zb\Z1->\Zn `cat $chemin_langue/et` \Zb\Z1<-\Zn " \
	"" "\Zn`cat $chemin_langue/menu_565` \Z4Write\Zn " \
	"" ""
case $? in
0) return ;;
255) return ;;
esac
}
#----------------------------------------------------------------------------------------------------
boite_cfdisk()
{
# Partitionner un disque dur
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --ok-label "`cat $chemin_langue/Partitionner`" \
	--cancel-label "`cat $chemin_langue/Annuler`" \
	--extra-button --extra-label "`cat $chemin_langue/Demonter`" \
	--backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/menu_567` " \
	--menu "\n\Zb\Z3                    `cat $chemin_langue/menu_572` : \n " 10 80 0 \
	"" "" \
	"" "\Zn`cat $chemin_langue/msgbox_30` \Z2Linux\Zn          `cat $chemin_langue/menu_568` \Zb\Z4Type\Zn : \Z283 " \
	"" "\Zn`cat $chemin_langue/msgbox_30` \Z2Linux swap\Zn     `cat $chemin_langue/menu_568` \Zb\Z4Type\Zn : \Z282 " \
	"" "\Zn`cat $chemin_langue/msgbox_30` \Z2Linux extended\Zn `cat $chemin_langue/menu_568` \Zb\Z4Type\Zn : \Z285 " \
	"" "" \
	"" "\Zn`cat $chemin_langue/msgbox_30` \Z2NTFS\Zn `cat $chemin_langue/menu_568` \Zb\Z4Type\Zn : \Z207 " \
	"" "" \
	"" "\Zn`cat $chemin_langue/msgbox_30` \Z2W95 FAT32 (LBA)\Zn (`cat $chemin_langue/primaire`) `cat $chemin_langue/menu_568` \Zb\Z4Type\Zn : \Z20C " \
	"" "\Zn`cat $chemin_langue/msgbox_30` \Z2W95 Ext'd (LBA)\Zn (`cat $chemin_langue/etendue`)  `cat $chemin_langue/menu_568` \Zb\Z4Type\Zn : \Z20F " \
	"" "\Zn`cat $chemin_langue/msgbox_30` \Z2W95 FAT32\Zn       (`cat $chemin_langue/logique`)  `cat $chemin_langue/menu_568` \Zb\Z4Type\Zn : \Z20B " \
	"" "" \
	"" "\Z1`cat $chemin_langue/Important` :" \
	"" "" \
	"" "\Zb\Z2`cat $chemin_langue/menu_569`. " \
	"" ""
case $? in
0)  rm -f /tmp/fichierquestion
    echo "\n\Zb\Z4 `cat $chemin_langue/menu_570`\Z4 :\n\n " > /tmp/fichierquestion
    echo "\n\n`cat $chemin_langue/menu_571`" >> /tmp/fichierquestion
    serveur_disque choisir_disque_maitre
    if ( test -e /tmp/sortir )
    then
	    rm -f /tmp/sortir
	    return
    fi
	boite_info_cfdisk
	disque_choisi=`cat /tmp/partition`		## scsi/host0/bus0/target0/lun0/disc
	rm -f /tmp/partition
	echo "$disque_choisi" > /tmp/teste_disque_gpt
	tester_disque_gpt
	teste_disque_gpt=`cat /tmp/teste_disque_gpt`
	rm -f /tmp/teste_disque_gpt
	if [ "$teste_disque_gpt" = non_gpt ]
	then # sfdisk
		cfdisk /dev/$disque_choisi
	else # gpt
		cgdisk /dev/$disque_choisi
	fi
   boite_fin_cfdisk
   ;;
1) return ;;
3) demontage
if ( test -e /tmp/sortir )
    then
    rm -f /tmp/sortir
    return
fi
	echo
	echo -e "`cat $chemin_langue/boucle_1`"
	echo -ne "`cat $chemin_langue/boucle_2`"
	read reponse
    boite_cfdisk	
    ;;
255) return ;;
esac
}
#----------------------------------------------------------------------------------------------------
boite_fin_cfdisk()
{
prepare_fichier_temptaille
rm -f /tmp/bozo
rm -f /tmp/tempfile
egrep -e "^/dev" /tmp/fichier_disque_dur | \
perl -pi -e 's/\*//g;  s/\+/ /g; s/\-/ /g; s/  /:/g; s/:+/:/g;' | \
awk 'BEGIN { FS=":" } { printf ("%0s %15s %25s\n",$1,$4,$6)}' | \
perl -pi -e 's/$/\\n/g;' | perl -pi -e 's/^\\n/\\Zn/g;' >> /tmp/tempfile

cp -f /tmp/tempfile /tmp/fichier_disque_dur
boite_couleurs_fichier_disque_dur

rm -f /tmp/menu_texte
	
# Informations sur le(s) disque(s) dur(s)
echo "\Zn`cat $chemin_langue/menu_573`" > /tmp/menu_texte
echo "\n\Zn`cat /tmp/fichier_disque_dur`" >> /tmp/menu_texte	

# Formater les nouvelles partitions
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors --ok-label "`cat $chemin_langue/Formater`" \
	--cancel-label "`cat $chemin_langue/Quitter`" \
	--backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/menu_574` " \
	--menu "`cat /tmp/menu_texte`" 22 80 0 \
	"" "\Zn`cat $chemin_langue/menu_575`,  " \
	"" "\Zn`cat $chemin_langue/menu_576` " \
	"" "\Zb\Z2`cat $chemin_langue/menu_577`.\Zn "
case $? in
	0)  rm -f /tmp/menu_texte
	    formater
		echo
		echo -e "`cat $chemin_langue/boucle_1`"
		echo -ne "`cat $chemin_langue/boucle_2`"
		read reponse
		boite_fin_cfdisk ;;
	1)  rm -f /tmp/menu_texte
	    return ;;
	255) rm -f /tmp/menu_texte 
	    return ;;
esac
rm -f /tmp/menu_texte
}
#----------------------------------------------------------------------------------------------------
choix_procedure_scaner()
{
# pour clamav choisir arret du poste et eventuellemnt la programmation
calendrier=$(date +%d/%m/%y)
heure=$(date +%kh%Mmin)
rm -f /tmp/rien
echo "  \Zn  \Zn  \Zn  \Zn  \Zn  \Zn  \Zn  \Zn  \Zn \Zn  \Zn  \Zn  \Zn  " > /tmp/rien
output=exit

dialog  --begin 2 0 --no-cancel --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" --title " `cat $chemin_langue/menu_699` " \
	--menu  "  `cat $chemin_langue/menu_1` `cat /tmp/rien`  le $calendrier à $heure " 9 0 0  \
	" " "" \
	"afficher" "`cat $chemin_langue/menu_700`" \
	"supprimer" "`cat $chemin_langue/menu_703`" \
	"éteindre" "`cat $chemin_langue/menu_701`" \
	"redémarrer" "`cat $chemin_langue/menu_702`" \
	" " "" \
	"quitter" "`cat $chemin_langue/menu_61`" \
	" " "" 2>/tmp/temp_clam
	
if [ $? = "255" ]
then
    rm -f /tmp/temp_clam
    rm -f /tmp/rien
    main
fi
output=`cat /tmp/temp_clam`
rm -f /tmp/rien

if [ "$output" = " " ]
	then
	choix_procedure_scaner
elif [ "$output" = "" ]
	then
	choix_procedure_scaner
elif [ "$output" = "afficher" ]
then
	valeur_fin_scan=afficher
	rm -f /tmp/temp_clam
   	rm -f /tmp/rien
elif [ "$output" = "supprimer" ]
then
	valeur_fin_scan=supprimer
	rm -f /tmp/temp_clam
   	rm -f /tmp/rien
elif [ "$output" = "éteindre" ]
then
	valeur_fin_scan=eteindre
	rm -f /tmp/temp_clam
   	rm -f /tmp/rien
elif [ "$output" = "redémarrer" ]
then
	valeur_fin_scan=redemarrer
	rm -f /tmp/temp_clam
   	rm -f /tmp/rien
elif [ "$output" = "quitter" ]
then
	valeur_fin_scan=quitter
	rm -f /tmp/temp_clam
   	rm -f /tmp/rien
	main
fi
}
#----------------------------------------------------------------------------------------------------
boite_eteindre_le_poste()
{
rm -f /tmp/redemarrer
rm -f /tmp/annuler_eteindre
	DIALOGRC="/etc/dialogrc" dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Eteindre`" \
	--extra-button --extra-label "`cat $chemin_langue/Redemarrer`" \
	--cancel-label "`cat $chemin_langue/Annuler`" \
	--menu " " 0 0 0 \
	"" "`cat $chemin_langue/menu_157`"
case $? in
	0)	;;
	3)	echo "" > /tmp/redemarrer
		;;
	1)	echo "" > /tmp/annuler_eteindre
		;;
	255)	echo "" > /tmp/annuler_eteindre
		;;
esac
}
#----------------------------------------------------------------------------------------------------
calcul_taille_partition_MB()
{
# calcul la taille en MB d'un disque 'sdi' ou d'une partition 'sdai' a partir de /tmp/calcul_taille_partition_disque
# le resultat sera aussi dans /tmp/calcul_taille_partition_disque

perl -pi -e 's /\/dev\///g;' /tmp/calcul_taille_partition_disque
if ! ( test -e /tmp/fichier_disque_dur )
then
	info_ddialog
fi
partition_a_calculer="`cat /tmp/calcul_taille_partition_disque`:" # 'sdi:' ou 'sdij:'
cp -f /tmp/fichier_disque_dur /tmp/calcul_taille_partition
perl -pi -e 's /dev\//{/g; s/ /:/g;' /tmp/calcul_taille_partition
cut -d"{" -f2 /tmp/calcul_taille_partition > /tmp/calcul_taille_partition1
grep $partition_a_calculer /tmp/calcul_taille_partition1 | perl -pi -e 's/Disk://g; s/::/:/g;' > /tmp/calcul_taille_partition
cut -d":" -f2 /tmp/calcul_taille_partition > /tmp/calcul_taille_partition2
grep -c kB /tmp/calcul_taille_partition2 > /tmp/nb_taille_kB
nb_taille_kB=`cat /tmp/nb_taille_kB`
rm -f /tmp/nb_taille_kB
if [ "$nb_taille_kB" = 1 ] # taille en kB
then
	cut -d"k" -f1 /tmp/calcul_taille_partition2 > /tmp/calcul_taille_partition1
	taille_en_MB=`cat /tmp/calcul_taille_partition1`
	taille_en_MB=$[$taille_en_MB]
	taille_en_MB=$[$taille_en_MB]
	echo "$taille_en_MB" > /tmp/calcul_taille_partition_disque
else
	grep -c MB /tmp/calcul_taille_partition2 > /tmp/nb_taille_MB
	nb_taille_MB=`cat /tmp/nb_taille_MB`
	rm -f /tmp/nb_taille_MB
	if [ "$nb_taille_MB" = 1 ] # taille en MB
	then
		cut -d"M" -f1 /tmp/calcul_taille_partition2 > /tmp/calcul_taille_partition1
		taille_en_MB=`cat /tmp/calcul_taille_partition1`
		taille_en_MB=$[$taille_en_MB]
		# taille_en_MB=$[$taille_en_MB*974]
		taille_en_MB=$[$taille_en_MB*1000]
		echo "$taille_en_MB" > /tmp/calcul_taille_partition_disque
	else
		grep -c GB /tmp/calcul_taille_partition2 > /tmp/nb_taille_GB
		nb_taille_GB=`cat /tmp/nb_taille_GB`
		rm -f /tmp/nb_taille_GB
		if [ "$nb_taille_GB" = 1 ] # taille en GB
		then
			cut -d"G" -f1 /tmp/calcul_taille_partition2 > /tmp/calcul_taille_partition1
			grep -c "." /tmp/calcul_taille_partition1 > /tmp/nb_virgule
			nb_virgule=`cat /tmp/nb_virgule`
			rm -f /tmp/nb_virgule
			if [ "$nb_virgule" != 1 ]
			then
				taille_en_MB=`cat /tmp/calcul_taille_partition1`
				taille_en_MB=$[$taille_en_MB]
				taille_en_MB=$[$taille_en_MB*1000000]
				echo "$taille_en_MB" > /tmp/calcul_taille_partition_disque
			else # avec virgule
				cut -d"." -f1 /tmp/calcul_taille_partition1 > /tmp/calcul_taille_partition2
				taille_en_MB=`cat /tmp/calcul_taille_partition2`
				taille_en_MB=$[$taille_en_MB]
				taille_en_MB=$[$taille_en_MB*1000000]
				cut -d"." -f2 /tmp/calcul_taille_partition1 > /tmp/calcul_taille_partition2
				valeur_virgule=`cat /tmp/calcul_taille_partition2`
				valeur_virgule1=`expr substr $valeur_virgule 1 1`
				valeur_virgule1=$[$valeur_virgule1]
				valeur_virgule=$[$valeur_virgule1*100000]
				taille_virgule_MB=$[$valeur_virgule+$taille_en_MB]
				echo "$taille_virgule_MB" > /tmp/calcul_taille_partition_disque
			fi
		else
			grep -c TB /tmp/calcul_taille_partition2 > /tmp/nb_taille_TB
			nb_taille_TB=`cat /tmp/nb_taille_TB`
			rm -f /tmp/nb_taille_TB
			if [ "$nb_taille_TB" = 1 ] # taille en TB
			then
				cut -d"T" -f1 /tmp/calcul_taille_partition2 > /tmp/calcul_taille_partition1
				grep -c "." /tmp/calcul_taille_partition1 > /tmp/nb_virgule
				nb_virgule=`cat /tmp/nb_virgule`
				rm -f /tmp/nb_virgule
				if [ "$nb_virgule" != 1 ]
				then
					taille_en_MB=`cat /tmp/calcul_taille_partition1`
					taille_en_MB=$[$taille_en_MB]
					taille_en_MB=$[$taille_en_MB*1000000000000]
					echo "$taille_en_MB" > /tmp/calcul_taille_partition_disque
				else # avec virgule
					cut -d"." -f1 /tmp/calcul_taille_partition1 > /tmp/calcul_taille_partition2
					taille_en_MB=`cat /tmp/calcul_taille_partition2`
					taille_en_MB=$[$taille_en_MB]
					taille_en_MB=$[$taille_en_MB*1000000000000]
					cut -d"." -f2 /tmp/calcul_taille_partition1 > /tmp/calcul_taille_partition2
					valeur_virgule=`cat /tmp/calcul_taille_partition2`
					valeur_virgule1=`expr substr $valeur_virgule 1 1`
					valeur_virgule1=$[$valeur_virgule1]
					valeur_virgule=$[$valeur_virgule1*100000000000]
					taille_virgule_MB=$[$valeur_virgule+$taille_en_MB]
					echo "$taille_virgule_MB" > /tmp/calcul_taille_partition_disque
				fi
			else
				echo
				echo -e " Erreur du calcul de la taille ..."
				echo
				echo "100" > /tmp/calcul_taille_partition_disque
				sleep 3
			fi
		fi
	fi
fi
rm -f /tmp/calcul_taille_partition
rm -f /tmp/calcul_taille_partition1
rm -f /tmp/calcul_taille_partition2
}
#----------------------------------------------------------------------------------------------------
tester_disque_gpt()
{
teste_disque_gpt=`cat /tmp/teste_disque_gpt`
parted -s /dev/$teste_disque_gpt p 2>/dev/null | grep -c "Partition Table: gpt" > /tmp/nb_table_gpt
nb_table_gpt=`cat /tmp/nb_table_gpt`
rm -f /tmp/nb_table_gpt
if [ "$nb_table_gpt" = 0 ]
then # sfdisk
	echo "non_gpt" > /tmp/teste_disque_gpt
else # gpt
	echo "gpt" > /tmp/teste_disque_gpt
fi
}
#----------------------------------------------------------------------------------------------------
tester_sauvegarde_gpt()
{
teste_sauvegarde_gpt=`cat /tmp/teste_sauvegarde_gpt`
grep -c _oscar_gpt_ /tmp/teste_sauvegarde_gpt > /tmp/nb__oscar_gpt_
nb__oscar_gpt_=`cat /tmp/nb__oscar_gpt_`
rm -f /tmp/nb__oscar_gpt_
if [ "$nb__oscar_gpt_" = 0 ]
then # sfdisk
	echo "non_gpt" > /tmp/teste_sauvegarde_gpt
else # gpt
	echo "gpt" > /tmp/teste_sauvegarde_gpt
fi
}
#----------------------------------------------------------------------------------------------------
sauver_table_partition_sf()
{
disque_table_sauvegarder_sf=`cat /tmp/disque_table_sauvegarder_sf`
cp -f /tmp/disque_table_sauvegarder_sf /tmp/teste_disque_gpt
tester_disque_gpt
teste_disque_gpt=`cat /tmp/teste_disque_gpt`
rm -f /tmp/teste_disque_gpt
rm -f /tmp/disque_table_sauvegarder_sf
if [ "$teste_disque_gpt" = non_gpt ]
then # sfdisk
	sfdisk -d /dev/$disque_table_sauvegarder_sf > /tmp/disque_table_sauvegarder_sf 2>/dev/null
else # gpt
	sgdisk -b /tmp/disque_table_sauvegarder_sf /dev/$disque_table_sauvegarder_sf 1>/dev/null
	# chercher les partitions vfat
	blkid -n /dev/$disque_table_sauvegarder_sf | grep -i TYPE=\"vfat\" | perl -pi -e 's/\/dev\///g;' | cut -d":" -f1 > /tmp/partitions_vfat_gpt
	echo `gawk '{ print $0 "{" } ' /tmp/partitions_vfat_gpt` | perl -pi -e 's/ //g; s/{/_entre_vfat_gpt_/g;' > /tmp/ligne_partitions_vfat_gpt # mettre en une ligne
	echo "_oscar_gpt_`cat /tmp/ligne_partitions_vfat_gpt`" >> /tmp/disque_table_sauvegarder_sf
	rm -f /tmp/ligne_partitions_vfat_gpt
fi
}
#----------------------------------------------------------------------------------------------------
formater_ligne_partitions_vfat_gpt()
{
if ( test -e /tmp/ligne_partitions_vfat_gpt )
then
	ligne_partitions_vfat=`cat /tmp/ligne_partitions_vfat_gpt`
	rm -f /tmp/ligne_partitions_vfat_gpt
	for reponse in $ligne_partitions_vfat
	do
		mkdosfs -vF 32 /dev/$reponse 1>/dev/null
	done
fi
}
#----------------------------------------------------------------------------------------------------
preparer_ligne_partitions_vfat_gpt()
{
cp -f /tmp/fichier_installer_table_sf /tmp/fichier_installer_table_sf1
perl -pi -e 's/}/__RACSO__/g; s/_oscar_gpt_/}/g;' /tmp/fichier_installer_table_sf1
cut -d"}" -f1 /tmp/fichier_installer_table_sf1 > /tmp/fichier_installer_table_sf
perl -pi -e 's/__RACSO__/}/g;' /tmp/fichier_installer_table_sf
cut -d"}" -f2 /tmp/fichier_installer_table_sf1 > /tmp/ligne_partitions_vfat_gpt
perl -pi -e 's/_entre_vfat_gpt_/ /g;' /tmp/ligne_partitions_vfat_gpt
rm -f /tmp/fichier_installer_table_sf1
# /tmp/ligne_partitions_vfat_gpt sera utilise dans client_clone
}
#----------------------------------------------------------------------------------------------------
installer_table_partition_sf()
{
disque_installer_table_sf=`cat /tmp/disque_installer_table_sf`
rm -f /tmp/disque_installer_table_sf
cp -f /tmp/fichier_installer_table_sf /tmp/teste_sauvegarde_gpt
tester_sauvegarde_gpt
teste_sauvegarde_gpt=`cat /tmp/teste_sauvegarde_gpt`
rm -f /tmp/teste_sauvegarde_gpt
if [ "$teste_sauvegarde_gpt" = non_gpt ]
then # sfdisk
	sfdisk -f /dev/$disque_installer_table_sf < /tmp/fichier_installer_table_sf 2>/dev/null
else # gpt
	preparer_ligne_partitions_vfat_gpt
	sgdisk -g -l /tmp/fichier_installer_table_sf /dev/$disque_installer_table_sf 1>/dev/null 2>/dev/null
fi
rm -f /tmp/fichier_installer_table_sf
}
#----------------------------------------------------------------------------------------------------
#                   BOUCLE PRINCIPALE
#----------------------------------------------------------------------------------------------------
main() # boucle principale
{
rm -f /tmp/sortir
output=exit
rm -f /tmp/tempfile
calendrier=$(date +%d/%m/%y)
heure=$(date +%kh%Mmin)
rm -f /tmp/rien
echo "  \Zn  \Zn  \Zn  \Zn  \Zn  \Zn  \Zn \Zn  \Zn  \Zn  \Zn  " > /tmp/rien

# ipwi "`cat $chemin_langue/menu_212`" \

if ( test -e /root/sysresccd-pkg.txt )	# démarrage cd sysrcd avec ou sans option cdcache ou démarrage sur le poste si sysrcd
then	# menu pour sysrcd:
	cd_base=oscar_sysrcd
	dialog --begin 2 0 --no-cancel --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" --title " `cat $chemin_langue/menu_154` " \
	--menu  "  `cat $chemin_langue/menu_1` `cat /tmp/rien`  le $calendrier à $heure " 7 80 0  \
	vosc "`cat $chemin_langue/menu_7`" \
	" " "" \
	mt+ "`cat $chemin_langue/menu_155`" \
	mt- "`cat $chemin_langue/menu_156`" \
	mc "`cat $chemin_langue/menu_198`" \
	clam "`cat $chemin_langue/menu_698`" \
	chrch "`cat $chemin_langue/menu_199`" \
	xfce "`cat $chemin_langue/menu_200`" \
	wizar "`cat $chemin_langue/menu_201`" \
	idd "`cat $chemin_langue/menu_20`" \
	uid "`cat $chemin_langue/menu_20b`" \
	clean "`cat $chemin_langue/menu_554a`." \
	pes "`cat $chemin_langue/menu_203`" \
	mat "`cat $chemin_langue/menu_204`" \
	c-eth "`cat $chemin_langue/menu_205`" \
	" " "" \
	cd_rw "Graver un CD_DVD" \
	cd- "`cat $chemin_langue/menu_206`" \
	cd+ "`cat $chemin_langue/menu_207`" \
	a+ "`cat $chemin_langue/menu_208`" \
	a- "`cat $chemin_langue/menu_209`" \
	" " "" \
	ad "`cat $chemin_langue/menu_41`" \
	ip "`cat $chemin_langue/menu_42`" \
	sprip "`cat $chemin_langue/menu_43`" \
	dhcp "`cat $chemin_langue/menu_44`" \
	itnet "`cat $chemin_langue/menu_211`" \
	nwmgd "`cat $chemin_langue/menu_43a`" \
	nwmga "`cat $chemin_langue/menu_43b`" \
	ptg "`cat $chemin_langue/menu_213`" \
	asp "`cat $chemin_langue/menu_214`" \
	" " "" \
	s_PXE "`cat $chemin_langue/menu_38`" \
	a_PXE "`cat $chemin_langue/menu_215`" \
	" " "" \
	ssh_s "`cat $chemin_langue/menu_216`" \
	ssh_a "`cat $chemin_langue/menu_217`" \
	ssh_c "`cat $chemin_langue/menu_218`" \
	ssh_d "`cat $chemin_langue/menu_219`" \
	" " "" \
	dhcpd "`cat $chemin_langue/menu_220`" \
	dhcpa "`cat $chemin_langue/menu_221`" \
	" " "" \
	vnc "`cat $chemin_langue/menu_222`" \
	" " "" \
	cptdp "`cat $chemin_langue/menu_223`" \
	rctdp "`cat $chemin_langue/menu_224`" \
	tstdk "`cat $chemin_langue/menu_718`" \
	" " "" \
	forma "`cat $chemin_langue/menu_29`" \
	tabpt "`cat $chemin_langue/menu_28`" \
	" " "" \
	poste "`cat $chemin_langue/menu_26`" \
	repar "`cat $chemin_langue/menu_58`" \
	" " "" \
	trsav "`cat $chemin_langue/menu_15`" \
	rcsav "`cat $chemin_langue/menu_17`" \
	rcdvd "`cat $chemin_langue/menu_16`" \
	" " "" \
	infsv "`cat $chemin_langue/menu_12`" \
	restr "`cat $chemin_langue/menu_225`" \
	sauve "`cat $chemin_langue/menu_226`" \
	svblc "`cat $chemin_langue/menu_13a`" \
	" " "" \
	s "`cat $chemin_langue/menu_227`" \
	c "`cat $chemin_langue/menu_228`" \
	w "`cat $chemin_langue/menu_229`" \
	" " "" \
	vercl "`cat $chemin_langue/menu_37`" \
	" " "" \
	mc "`cat $chemin_langue/menu_198`\Zn " \
	gpt "`cat $chemin_langue/menu_25`" \
	" " "" \
	mdpg "`cat $chemin_langue/menu_230`" \
	hist "`cat $chemin_langue/menu_231`" \
	" " "" \
	franc "`cat $chemin_langue/menu_153`" \
	halt "`cat $chemin_langue/menu_152`" \
	oscar "`cat $chemin_langue/menu_21`" 2>/tmp/tempfile

	if [ $? = "255" ]
	then
		rm -f /tmp/tempfile
		rm -f /tmp/rien
		exit
	fi
else	# menu oscar avec catalyst:
	cd_base=oscar_catalyst
	dialog --begin 2 0 --no-cancel --colors --no-shadow \
	--backtitle "`cat /etc/banniere_oscar`" --title " `cat $chemin_langue/menu_154` " \
	--menu  "  `cat $chemin_langue/menu_1` `cat /tmp/rien`  le $calendrier à $heure " 7 80 0  \
	vosc "`cat $chemin_langue/menu_7`" \
	" " "" \
	mt+ "`cat $chemin_langue/menu_155`" \
	mt- "`cat $chemin_langue/menu_156`" \
	mc "`cat $chemin_langue/menu_198`\Zn " \
	clam "`cat $chemin_langue/menu_698`" \
	chrch "`cat $chemin_langue/menu_199`" \
	xfce "`cat $chemin_langue/menu_200`" \
	wizar "`cat $chemin_langue/menu_201`\Zn " \
	idd "`cat $chemin_langue/menu_20`" \
	uid "`cat $chemin_langue/menu_20b`" \
	clean "`cat $chemin_langue/menu_554a`." \
	pes "`cat $chemin_langue/menu_203`" \
	mat "`cat $chemin_langue/menu_204`" \
	c-eth "`cat $chemin_langue/menu_205`" \
	" " "" \
	cd_rw "Graver un CD_DVD" \
	cd- "`cat $chemin_langue/menu_206`" \
	cd+ "`cat $chemin_langue/menu_207`" \
	a+ "`cat $chemin_langue/menu_208`" \
	a- "`cat $chemin_langue/menu_209`" \
	" " "" \
	ad "`cat $chemin_langue/menu_41`" \
	ip "`cat $chemin_langue/menu_42`" \
	sprip "`cat $chemin_langue/menu_43`" \
	dhcp "`cat $chemin_langue/menu_44`" \
	itnet "`cat $chemin_langue/menu_211`" \
	nwmgd "`cat $chemin_langue/menu_43a`" \
	nwmga "`cat $chemin_langue/menu_43b`" \
	ptg "`cat $chemin_langue/menu_213`" \
	asp "`cat $chemin_langue/menu_214`" \
	" " "" \
	cptdp "`cat $chemin_langue/menu_223`" \
	rctdp "`cat $chemin_langue/menu_224`" \
	tstdk "`cat $chemin_langue/menu_718`" \
	" " "" \
	forma "`cat $chemin_langue/menu_29`" \
	tabpt "`cat $chemin_langue/menu_28`" \
	" " "" \
	poste "`cat $chemin_langue/menu_26`" \
	repar "`cat $chemin_langue/menu_58`" \
	" " "" \
	trsav "`cat $chemin_langue/menu_15`" \
	rcsav "`cat $chemin_langue/menu_17`" \
	rcdvd "`cat $chemin_langue/menu_16`" \
	" " "" \
	infsv "`cat $chemin_langue/menu_12`" \
	restr "`cat $chemin_langue/menu_225`" \
	sauve "`cat $chemin_langue/menu_226`" \
	svblc "`cat $chemin_langue/menu_13a`" \
	" " "" \
	s "`cat $chemin_langue/menu_227`" \
	c "`cat $chemin_langue/menu_228`" \
	w "`cat $chemin_langue/menu_229`" \
	" " "" \
	vercl "`cat $chemin_langue/menu_37`" \
	" " "" \
	mc "`cat $chemin_langue/menu_198`\Zn " \
	qtp "Gère les \Z1partitions\Zn avec \Z2QTParted\Zn " \
	gpt "`cat $chemin_langue/menu_25`" \
	" " "" \
	mdpg "`cat $chemin_langue/menu_230`" \
	hist "`cat $chemin_langue/menu_231`" \
	" " "" \
	franc "`cat $chemin_langue/menu_153`" \
	halt "`cat $chemin_langue/menu_152`" \
	oscar "`cat $chemin_langue/menu_21`" 2>/tmp/tempfile

	if [ $? = "255" ]
	then
		rm -f /tmp/tempfile
		rm -f /tmp/rien
		exit
	fi
fi

output=`cat /tmp/tempfile`
rm -f /tmp/rien
rm -f /tmp/serveur_pxe_seul
rm -f /tmp/sp_nettoyer_e2fsck

if [ "$output" = " " ]
then
	main
elif [ "$output" = "clam" ]
then
	## recherche d'une adresse ip sur le poste:
	rm -f /tmp/carte_ethi
	runme recuperer_IP	# pour verifier ip fixe donne par OSCAR sur eth0
	if ( test -e /tmp/sortir )
	then
		rm -f /tmp/sortir
	else
		## l'ip est dans le fichier ip_installe_poste
		ip_installe=`cat ip_installe_poste`
		if [ "$ip_installe" = "" ]
		then
			runme lancer_dhcp
			if ( test -e /tmp/sortir )
			then
				rm -f /tmp/sortir
			else
				freshclam -u root
			fi
		else
			freshclam -u root
		fi
	fi
	choix_procedure_scaner
	montage_clamav=oui
	montage
	montage_clamav=non
	if ( test -e /tmp/sortir )
	then
		rm -f /tmp/sortir
		main
	fi
	
	repertoire_a_scaner=$repertoire
	if [ "$valeur_fin_scan" = "afficher" ]
	then
		echo
		echo -e "`cat $chemin_langue/texte_39b` : \033[1;32m$repertoire_a_scaner\033[1;34m ..."
		echo
		clamscan -ri --bell /mnt/$repertoire_a_scaner
		umount /mnt/$repertoire_a_scaner ; sync
	elif [ "$valeur_fin_scan" = "supprimer" ]
	then
		echo
		echo -e "`cat $chemin_langue/texte_39b` : \033[1;32m$repertoire_a_scaner\033[1;34m ..."
		echo
		clamscan -ri --bell --remove /mnt/$repertoire_a_scaner
		umount /mnt/$repertoire_a_scaner ; sync
	elif [ "$valeur_fin_scan" = "eteindre" ]
	then
		echo
		echo -e "`cat $chemin_langue/texte_39b` : \033[1;32m$repertoire_a_scaner\033[1;34m ..."
		echo
		clamscan -ri --bell --remove /mnt/$repertoire_a_scaner
		umount /mnt/$repertoire_a_scaner ; sync
		eteindre_le_poste
	elif [ "$valeur_fin_scan" = "redemarrer" ]
	then
		echo
		echo -e "`cat $chemin_langue/texte_39b` : \033[1;32m$repertoire_a_scaner\033[1;34m ..."
		echo
		clamscan -ri --bell --remove /mnt/$repertoire_a_scaner
		umount /mnt/$repertoire_a_scaner ; sync
		reboot
	fi
	retour	
elif [ "$output" = "forma" ]
then
	formater
	rm -f /tmp/fichier_disque_dur
	retour
elif [ "$output" = "clean" ]
then
	nettoyer_e2fsck
	retour
elif [ "$output" = "tpart" ]
then
	rm -f /tmp/tempfile
	dimension
	if ( test -e /tmp/augmenter )
	then
	    exit
	fi
	retour
elif [ "$output" = "tabpt" ]
then
	boite_cfdisk
	main
elif [ "$output" = "tstdk" ]
then
	testdisk
	main
elif [ "$output" = "usb-" ]
then
	demonter_cle_usb
	main
elif [ "$output" = "xfce" ]
then
	run_oscar
	main
elif [ "$output" = "wizar" ]
then
	wizard
	main
elif [ "$output" = "usb+" ]
then
	monter_cle_usb
	if ( test -e /tmp/sortir )
	then
	rm -f /tmp/sortir
	fi
	main
elif [ "$output" = "" ]
then
	main
elif [ "$output" = "poste" ]
then
	maj_boot_oscar
	main
elif [ "$output" = "misjr" ]
then
	maj_boot_oscar
	main
elif [ "$output" = "repar" ]	# faire seulement le boot sans installer les fichiers oscar et supprimer expert
then
	echo "" > /tmp/repare_boot_dd
	installe_oscar_dd
	main
elif [ "$output" = "rcsav" ]
then
	recup_sauvegarde
	main
elif [ "$output" = "rcdvd" ]
then
	recup_depuis_dvd
	main
elif [ "$output" = "trsav" ]
then
	transfert_sauvegarde
	main
elif [ "$output" = "rctdp" ]
then
	recup_mbr
	main
elif [ "$output" = "cptdp" ]
then
	sauve_mbr
	main
elif [ "$output" = "halt" ]
then
	boite_eteindre_le_poste
	if ( test -e /tmp/annuler_eteindre )
	then
		rm -f /tmp/annuler_eteindre
		main
	fi
	eteindre_le_poste
elif [ "$output" = "s_tab" ]
then
	serveur_table
elif [ "$output" = "c_tab" ]
then
	client_table
elif [ "$output" = "svclo" ]
then
	serveur_clone
elif [ "$output" = "clclo" ]
then
	client_clone
elif [ $output = "oscar" ]
then
	rm -f /tmp/tempfile
	exit
elif [ $output = "perso" ]
then
	rm -f /tmp/tempfile
	echo
	cdrom_oscar # personnaliser le CDrom
	retour
elif [ $output = "sauve" ]
then
	echo
	echo "" > /tmp/sauve_fsa
	sauve # sauvegarde de la partition
	main
elif [ $output = "svblc" ]
then
	echo
	rm -f /tmp/sauve_fsa
	sauve # sauvegarde de la partition
	main
elif [ $output = "infsv" ]
then
	echo
	info_image
	while ( test -e /tmp/lancer_info )
        do
            rm -f /tmp/lancer_info
            info_image
        done
	main
elif [ "$output" = "tesav" ]
	then
	test_rst
	main
elif [ $output = "restr" ]
then
	info_image gerer_sauvegardes_rst # si plusieurs sauvegardes sur le poste
        if ( test -e /tmp/sortir )
        then
            rm -f /tmp/sortir
            exit
        fi
	echo
	echo "" > /tmp/menu_admin_rst
	rst # restauration de la partition
	retour
elif [ $output = "rstit" ]
then
	echo "" > /tmp/rst_interactif
	echo "" > /tmp/menu_admin_rst
	rst # restauration de la partition
	retour
elif [ $output = "lsr" ]
then 
	echo "" > /etc/gpm_lance	# pour internet avec sysrcd
	lancer_souris # installe la souris
	main
elif [ $output = "ptg" ]
then
	echo
	rm -f /tmp/carte_ethi
	partage
	if ( test -e /tmp/sortir )
	then
	    rm -f /tmp/sortir
	fi
	main
elif [ $output = "s_PXE" ]
then
	echo "" > /tmp/serveur_pxe_seul
	serveur_pxe
	if ( test -e /tmp/sortir )
	then
	    rm -f /tmp/sortir
	fi
	main
elif [ $output = "a_PXE" ]
then
	/etc/init.d/thttpd stop
	/etc/init.d/in.tftpd stop
	/etc/init.d/dhcpd stop
	rm -f /etc/serveur_pxe_lance
	retour
elif [ $output = "ssh_s" ]
then
	rm -f /tmp/carte_ethi
	serveur_ssh
	retour
	#screen runme
elif [ $output = "ssh_a" ]
then
	/etc/init.d/sshd stop
	retour
elif [ $output = "ssh_c" ]
then
	rm -f /tmp/carte_ethi
	client_ssh
	main
elif [ $output = "ssh_d" ]
then
	echo "" > /tmp/quitter_ssh
	exit
elif [ $output = "dhcpd" ]
then
	echo "" > /tmp/demander_next_serveur
	serveur_dhcp
	if ( test -e /tmp/sortir )
	then
		rm -f /tmp/sortir
	fi
	main
elif [ $output = "dhcpa" ]
then
	/etc/init.d/dhcpd stop
	retour
elif [ $output = "vnc" ]
then
	run_vncviewer
	main
elif [ $output = "mt+" ]
then 
	echo
	choix_montage
	if ( test -e /tmp/sortir )
	    then
	    rm -f /tmp/sortir
	fi 
	main
elif [ $output = "mt-" ]
then 
	echo
	demontage
	if ( test -e /tmp/sortir )
	    then
	    rm -f /tmp/sortir
	fi
	retour			
elif [ $output = "gpt" ]
then
	run_gparted
	texte_fin_rqt
	main
elif [ $output = "qtp" ]
then
        if [ "$cd_base" = "oscar_sysrcd" ]
        then
                /etc/init.d/gpm stop
        fi
        if ! ( test -e /etc/demarrage_cdoscar_minimal )
        then
    	    texte_avant_rqt
	fi
        if ! ( test -e /tmp/sortir )
        then
                if [ "$cd_base" = "oscar_sysrcd" ]
                then
                        run_qtpartedjf
                else
			run_qtpartedfb_oscar
                fi
                if ! ( test -e /etc/demarrage_cdoscar_minimal )
                then
                    echo "" > /tmp/fin_qt
	            texte_fin_rqt_srscd
    	            rm -f /tmp/fin_qt
		fi
        else
                rm -f /tmp/sortir
        fi
	main
elif [ $output = "rqt" ]
then
        echo "rqt lance" > /tmp/rqt_lance
	/etc/init.d/gpm stop
        texte_avant_rqt
        if ! ( test -e /tmp/sortir )
        then
                run_qtpartedjf
                texte_fin_rqt
        else
                rm -f /tmp/sortir
        fi
	main
elif [ $output = "mc" ]
then 
	mc
	main		
elif [ $output = "chrch" ]
then
	echo
	# prépare la recherche
	echo -en "\033[1;33m OSCAR\033[1;34m `cat $chemin_langue/menu_622` ... "
	echo
	updatedb
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Annuler`"  --title " `cat $chemin_langue/Recherche` " \
	--inputbox "\n\n\Zb\Z4`cat $chemin_langue/menu_621` : \n " 0 0 2>/tmp/tempfile
	case $? in
		1)	;;
		255)	;;
		0)	cherche_fichier=`cat /tmp/tempfile`
			locate -u $cherche_fichier
			echo "" > /tmp/fichiertmp
			echo `locate -i $cherche_fichier` >> /tmp/fichiertmp
			perl -pi -e 's/ /\n/g;' /tmp/fichiertmp
			# Résultat de la recherche
			dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
			--exit-label "`cat $chemin_langue/Continuer`" \
			--title " `cat $chemin_langue/menu_623` " \
			--textbox "/tmp/fichiertmp" 0 0
			rm -f /tmp/fichiertmp
			;;
	esac
	rm -f /tmp/tempfile
	main
elif [ $output = "ptm" ]
then
echo
echo -en "`cat $chemin_langue/menu_624` ? (\033[1;33mo\033[1;m/\033[1;33mn\033[1;m)"
read yon
	if [ $yon = "o" ] || [ $yon = "y" ] || [ $yon = "O" ] || [ $yon = "Y" ]
	then 
		montage # montage d'une partition
		if ( test -e /tmp/sortir )
		    then
		    rm -f /tmp/sortir
		    main
		fi
		cd /mnt/$repertoire	# pour être dans le repertoire de sauvegarde
	fi
	partimage
	main
elif [ $output = "cd_rw" ]
then
	run_xfburn
	main
elif [ $output = "cd-" ]
then
	echo
	umount /mnt/cdrom 2>/dev/null  ; sync
	eject	
	if ! ( test -e /etc/cdrom_ejecte )
	then
		if ( test -e /etc/demarrage_cdcache )
		then
			echo "cd ejecte" > /etc/cdrom_ejecte
		fi
	fi
	retour	
elif [ $output = "cd+" ]
then
	echo
	eject -t
	mount /dev/cdrom /mnt/cdrom
	rm -f /tmp/fichiertmp
	ls /mnt/cdrom >> /tmp/fichiertmp
	# Contenu du CDROM
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--exit-label "`cat $chemin_langue/Continuer`" \
	--title " `cat $chemin_langue/texte_67` " \
	--textbox "/tmp/fichiertmp" 0 0
	rm -f /tmp/fichiertmp
	main
elif [ $output = "a+" ]
then
	echo
	echo -en "Installez une disquette formatée\033[0;32m vfat \033[1;mdans le lecteur puis appuyer sur\033[1;37m Entrée\033[1;m"
	read choix
	if ! ( test -e /mnt/floppy )
	then mkdir /mnt/floppy
	fi
	mount -t vfat /dev/fd0 /mnt/floppy
	echo
	echo -e "\033[1;34m`cat $chemin_langue/repertoire_5` :\033[1;m"
	ls /mnt/floppy
	echo
	echo -e "\033[1;31mATTENTION\033[1;m avant d'enlever la disquette,\033[1;31m démontez\033[1;m le lecteur avec \033[1;33ma-\033[1;m"
	retour
elif [ $output = "a-" ]
then
	echo
	umount /mnt/floppy 2>/dev/null  ; sync
	retour	
elif [ $output = "asp" ]
then
	echo
	arret_protocole
	retour	
elif [ $output = "dsk" ]
then 
	echo
	dsk_boot
	retour
elif [ $output = "ip" ]
then 
	echo
	rm -f /tmp/carte_ethi
	ip_poste
	if ( test -e /tmp/sortir )
	then
	    rm -f /tmp/sortir
	else
	    afficher_IP
	fi	    
	main
elif [ $output = "ad" ]
then  
	afficher_IP
	main
elif [ $output = "sprip" ]
then  
	supprimer_ip_ethernet
	afficher_IP
	main
elif [ "$output" = "dhcp" ]
then
	rm -f /tmp/carte_ethi
	lancer_dhcp
	if ( test -e /tmp/sortir )
	then
	    rm -f /tmp/sortir
	else
            afficher_IP
	fi
	main
elif [ $output = "itnet" ]
then
	if ( test -e /usr/bin/firefox-bin )
	then
		run_mozilla
	elif ( test -e /usr/bin/midori )
	then
		run_midori
	fi
	main
elif [ $output = "itnet_ancien" ] # ancien avec links
then
	## recherche d'une adresse ip sur le poste:
	rm -f /tmp/carte_ethi
	recuperer_IP
	if ( test -e /tmp/sortir )
	then
	    rm -f /tmp/sortir
	else
	## l'ip est dans le fichier ip_installe_poste
	    ip_installe=`cat ip_installe_poste`
	    if [ "$ip_installe" = "" ]
	    then
		lancer_dhcp
		if ( test -e /tmp/sortir )
		then
		    rm -f /tmp/sortir
		    main
		fi
	    fi
	    if [ "$cd_base" = "oscar_sysrcd" ]
	    then
		if ! ( test -e  /etc/gpm_lance )
		then
			/etc/init.d/gpm restart
			echo "" > /etc/gpm_lance
		fi
	    fi
	    internet # ancien avec links
	fi
	main
elif [ $output = "ipwi" ] # est supprime
then
        if [ "$cd_base" = "oscar_sysrcd" ]
        then
                net-setup
        else
        	net-setup eth0
        fi
	retour
elif [ $output = "nwmgd" ]
then	
	/etc/init.d/NetworkManager start
	main
elif [ $output = "nwmga" ]
then	
	sp_arreter_NetworkManager
	main
elif [ $output = "w" ]
then
	echo
	client_serveur_sous_windows
	if (test -e /tmp/sortir )
	then
	    rm -f /tmp/sortir
	fi
	main
elif [ $output = "s" ]
then 
	echo
	choix_serveur
	main
elif [ $output = "c" ]
then 
	echo
	choix_client
	main
elif [ $output = "idd" ]
then  
	information_dd
	main
elif [ $output = "uid" ]
then  
	information_uuid
	main	
elif [ $output = "pes" ]
then
	# Adresses des ports d'Entrées/Sorties
	rm -f /tmp/fichiertmp
	cat /proc/ioports >> /tmp/fichiertmp
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--exit-label "`cat $chemin_langue/Continuer`" \
	--title " `cat $chemin_langue/texte_68` " \
	--textbox "/tmp/fichiertmp" 0 0
	rm -f /tmp/fichiertmp
	main
elif [ $output = "mat" ]
then
	rm -f /tmp/fichiertmp
	echo "" >> /tmp/fichiertmp
	echo `uname -mspior` >> /tmp/fichiertmp
	echo "" >> /tmp/fichiertmp
	echo "`lspci`" >> /tmp/fichiertmp
	perl -pi -e 's/0000:/ /g;' /tmp/fichiertmp
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--exit-label "`cat $chemin_langue/Continuer`" \
	--title " `cat $chemin_langue/texte_69` " \
	--textbox "/tmp/fichiertmp" 0 0
	rm -f /tmp/fichiertmp
	main
elif [ $output = "c-eth" ]
then
	rm -f /tmp/carte_ethi
	installe_ethernet carte_ethernet
	retour
elif [ $output = "cdisq" ]
	then
	client_disque
        main
elif [ $output = "sdisq" ]
	then
	serveur_disque
        main
elif [ $output = "simag" ]
	then
		serveur_nfs
		main
elif [ $output = "clmag" ]
	then
		client_nfs
	main
elif [ $output = "vercl" ]
	then
		client_verif
	main
elif [ $output = "vosc" ]
then
	version_oscar
	main
	
elif [ $output = "mdpg" ]
then
	gespere_mdp
	main
elif [ $output = "hist" ]
then
	historique
	main
elif [ $output = "franc" ]
then
	rm -f /tmp/tempfile
	langage
	oscar
	exit
else
output
retour
fi
}
#----------------------------------------------------------------------------------------------------
#  commandes externes de procédures
case "$1" in
    cherche_partition_lvm)
	# partition cherchee est dans /tmp/partition_lvm_cherchee
	cherche_partition_lvm
	# si oui resultat dans /tmp/partition_lvm_existe
	exit 0
	;;
    compacte_chemin)
	compacte_chemin
	exit 0
	;;
    boite_cfdisk)
        boite_cfdisk
        exit 0
        ;;
    boite_idd)
        information_dd
        exit 0
        ;;
    formater)
    	formater
    	exit 0
    	;;
    formater_ntfs)
    	repertoire=`cat /tmp/tempbase`
    	rm -f /tmp/tempbase
    	formater_ntfs
    	exit 0
    	;;
    recuperer_IP)
    	recuperer_IP
	exit 0
	;;
    installer_IP)
	installer_IP
	exit 0
	;;
    supprimer_ip_ethernet)
	supprimer_ip_ethernet
	exit 0
	;;
    historique)
    	historique
	exit 0
	;;
    client_serveur_sous_windows)
	client_serveur_sous_windows
	if (test -e /tmp/sortir )
	then
	    rm -f /tmp/sortir
	fi
	exit 0
	;;
    choix_serveur)
	choix_serveur
	exit 0
	;;
    choix_client)
	choix_client
	exit 0
	;;
    version_oscar)
    	version_oscar
	exit 0
	;;
    monter_partition_en_local)
		partition_dev=`cat /tmp/partition_dev_a_monter_local`
		repertoire_mnt=`cat /tmp/repertoire_mnt_a_monter_local`
    		monter_partition_local
		exit 0
    	;;
    montage_local)
    	montage
    	echo "$repertoire" > /tmp/tempfile	# repertoire monte
	exit 0
	;;
    montage)
    	choix_montage
	exit 0
	;;
    demontage)
    	demontage
	if ( test -e /tmp/sortir )
        then
	    rm -f /tmp/sortir
	fi 
	exit 0
	;;
    partage)
    	partage
	exit 0
	;;
    montage_serveur_samba_distant)
    	montage_serveur_samba_distant
    	exit 0
    	;;
    arret_protocole)
    	arret_protocole
	exit 0
	;;
    dsk_boot)
	dsk_boot
	exit 0
	;;
    afficher_IP)
	afficher_IP
	exit 0
	;;
    ip_poste)
    	ip_poste
    	exit 0
    	;;
    serveur_windows)
	serveur_samba
	if ( test -e /tmp/sortir )
        then
	rm -f /tmp/sortir
	fi
	exit 0
	;;
    client_windows)
	client_samba
	exit 0
	;;
    serveur_linux)
	serveur_linux
	if ( test -e /tmp/sortir )
	then
	    rm -f /tmp/sortir
	fi
	exit 0
	;;
    client_linux)
	client_linux
	exit 0
	;;
    info_ddialog)
	info_ddialog
	exit 0
	;;
    info_dd)
	info_dd
	exit 0
	;;
    info_ddialog_menu)
	info_ddialog_menu
	exit 0
	;;
    boite_couleurs_fichier_disque_dur)
	boite_couleurs_fichier_disque_dur
	exit 0
	;;
    demande_autre_partage)
	demande_autre_partage
	exit 0
	;;
    boite_couleurs_exec_dialog)
	boite_couleurs_exec_dialog
	exit 0
	;;
    info_disque)
	info_disque	
	exit 0
	;;
    boite_selection_bozo)
	boite_selection_bozo	
	exit 0
	;;
    demonter_cle_usb)
	demonter_cle_usb	
	exit 0
	;;
    monter_cle_usb)
	monter_cle_usb	
	exit 0
	;;
    selection_disque)
	selection_disque
	exit 0
	;;
    prepare_boucle_partition)
	prepare_boucle_partition
	exit 0
	;;
    cherche_disque_boot)
	cherche_disque_boot
	exit 0
	;;
    autoriser_monter_partition_oscar)
	autoriser_monter_partition_oscar
	exit 0
	;;
    autoriser_monter_partition_oscar_montage)
	autoriser_monter_partition_oscar_montage
	exit 0
	;;
    verifier_partition_linux_oscar_sur_poste)
	verifier_partition_linux_oscar_sur_poste
	exit 0
	;;
    information_dd)
	information_dd
	exit 0
	;;
    information_uuid)
	information_uuid
	exit 0
	;;
    prepare_fichier_temptaille)
	prepare_fichier_temptaille
	exit 0
	;;
    lecture_connecteur_usb)
	lecture_connecteur_usb
	exit 0
	;;
    choix_partition_restauration)
	choix_partition_restauration
	exit 0
	;; 
    lancer_dhcp)
	lancer_dhcp
	exit 0
	;;
    test_cdrom_sysresccd)
	test_cdrom_sysresccd
	exit 0
	;;
    boite_aide_cable_croise)
	boite_aide_cable_croise
	exit 0
	;;
    monter_ntfs)
	monter_ntfs
	exit 0
	;;
    wizar)
	wizard_oscar
	exit 0
	;;
    eteindre_le_poste)
	eteindre_le_poste
	exit 0
	;;
    boite_eteindre_ordinateur)
	boite_eteindre_ordinateur
	exit 0
	;;
    colorier_selection_info)
	colorier_selection_info
	exit 0
	;;
    modifier_Linux_en_OSCAR)
    	modifier_Linux_en_OSCAR
    	exit 0
    	;;
    choisir_partition_a_restaurer)
    	choisir_partition_a_restaurer
    	exit 0
    	;;
    boite_eteindre_le_poste)
    	boite_eteindre_le_poste
    	exit 0
    	;;
    sp_arreter_NetworkManager)
	sp_arreter_NetworkManager
	exit 0
	;;
    calcul_taille_partition_MB)
	calcul_taille_partition_MB
	exit 0
	;;
    tester_disque_gpt)
	tester_disque_gpt
	exit 0
	;;
    tester_sauvegarde_gpt)
	tester_sauvegarde_gpt
	exit 0
	;;
    sauver_table_partition_sf)
	sauver_table_partition_sf
	exit 0
	;;
    installer_table_partition_sf)
	installer_table_partition_sf
	exit 0
	;;
    formater_ligne_partitions_vfat_gpt)
	formater_ligne_partitions_vfat_gpt
	exit 0
	;;
    verifier_partition_oscar)
	verifier_partition_oscar
	if [ "$oscar_sur_partition" = oui ]	# oscar installe sur le poste
	then
		echo "oui" > /tmp/verifier_partition_montee_oscar
	else
		echo "" > /tmp/verifier_partition_montee_oscar
	fi
	exit 0
	;;
    tester_gpt_provisoire)
	# procedure a supprimer si OK dans 2 fichiers depart et installe_oscar_dd
	tester_gpt_provisoire
	exit 0
	;;
esac
#---------------------------------------------------------------------------------------------------

main



