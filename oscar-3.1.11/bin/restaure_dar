#!/bin/sh


## Copyright (c) 2003-2013 Tissoires Jean-François & Benjamin,  jftissoires@gmail.com
## Outil Système Complet d'Assistance Réseau: OSCAR
## Rapide de Sauvegarde aux Ordinateurs et Systèmes: RapideSOS
## Ce programme est sous Licence Publique Générale GNU publiée par la Free Software Foundation.

# 3 variables /tmp/correcteur_compression_restaure selon linux ou  2 pour ntfs


PATH="/usr/share/oscar/bin:$PATH"
/usr/share/oscar/usr/version_theme_oscar
if ( test -e /usr/share/oscar/usr/choix_langue )
then
	choix_langue=`cat /usr/share/oscar/usr/choix_langue`
else
	echo "fr" > /usr/share/oscar/usr/choix_langue
	choix_langue=fr
	traduction
fi
chemin_langue=/usr/share/oscar/usr/langue/$choix_langue

partition_restaure_dar=`cat /tmp/partition_restaure_dar`
rm -f /tmp/partition_restaure_dar
base=`cat /tmp/base_restaure_dar`
rm -f /tmp/base_restaure_dar
texte_ecrire=`cat /tmp/texte_ecrire`
rm -f /tmp/texte_ecrire
affiche_numero_poste=
if ( test -e /tmp/tmp_numero_poste_client )
then
	poste=`cat /tmp/tmp_numero_poste_client`
	rm -f /tmp/tmp_numero_poste_client
	affiche_numero_poste="`cat $chemin_langue/Poste` : \Zb\Z1$poste "
fi

if ! ( test -e /tmp/partition_lvm_existe )
then
	mesure_base=/dev/$base
	taille_partition_de_base=taille_partition_$base
else
	#	cp -f /tmp/partition_lvm_cherchee /tmp/mesure_base_lvm
	#	perl -pi -e 's/-/}/g;' /tmp/mesure_base_lvm
	#	mesure_base="`cat /tmp/mesure_base_lvm` "
	#	rm -f /tmp/mesure_base_lvm
	mesure_base="/dev/mapper/`cat /tmp/partition_lvm_cherchee` "
	taille_partition_de_base=taille_partition_`cat /tmp/partition_lvm_cherchee`
fi

#----------------------------------------------------------------------------------------------------
verification_pour_ntfsclone()
{
# dans /tmp/sortie_fin_restaure_ntfsclone il y a le code du resultat 0 si OK sinon autre
if ( test -e /tmp/sortie_fin_restaure_ntfsclone )
then
	valeur_fin_restaure=1
	grep -ci "0" /tmp/sortie_fin_restaure_ntfsclone > /tmp/valeur_fin_restaure	# OK fin de restauration
	test_valeur_fin_restaure=`cat /tmp/valeur_fin_restaure`
	rm -f /tmp/sortie_fin_restaure_ntfsclone
	rm -f /tmp/valeur_fin_restaure
	if ! [ "$test_valeur_fin_restaure" = "1" ]
	then
		echo "\n\033[1;31m  `cat $chemin_langue/ERREUR` : ntfsclone ...\n" > /tmp/sortie_fin_restaure
		echo "" > /tmp/erreur_ntfsclone
	else
		echo "\n\033[1;31m  ntfsclone : 100% \n" > /tmp/sortie_fin_restaure
		pourcentage_compression=100
		rm -f /tmp/sortie_ntfsclone
	fi
else
	grep -i "percent comp" /tmp/sortie_ntfsclone > /tmp/affiche_progression
	# afficher la derniere ligne
	awk '{ ligne=$0 } END { print ligne }' /tmp/affiche_progression > /tmp/affiche_progression1
perl -pi -e 's/percent completed/{/g; s/ /}/g; s/\./_/g; s/}}/
/g; s/}/
Z/g; ' /tmp/affiche_progression1
	grep -v "Z{" /tmp/affiche_progression1 > /tmp/affiche_progression
	cut -d "_" -f1 /tmp/affiche_progression > /tmp/affiche_progression1
	# afficher la derniere ligne
	awk '{ ligne=$0 } END { print ligne }' /tmp/affiche_progression1 > /tmp/affiche_progression
	perl -pi -e 's/Z//g;' /tmp/affiche_progression
	pourcentage_compression=`cat /tmp/affiche_progression`
	pourcentage_compression=$[$pourcentage_compression]
	rm -f /tmp/affiche_progression
	rm -f /tmp/affiche_progression1
fi
}
#----------------------------------------------------------------------------------------------------
verification_pour_dar()
{
grep -ci "Total number of inode" /tmp/sortie_fin_restaure > /tmp/fin_restaure_dar
valeur_fin_restaure=`cat /tmp/fin_restaure_dar`
rm -f /tmp/fin_restaure_dar

	#	# taille des fichiers decompresses
	#	ls -sR /mnt/$base | grep total | awk '{print $2 "+" }' > /tmp/liste_du_total_fichiers_base	# par ligne : total valeur
	#	perl -pi -e 's/ //g;' /tmp/liste_du_total_fichiers_base
	#	taille_fichiers_decompresses=`cat /tmp/liste_du_total_fichiers_base`1-1
	#	rm -f /tmp/liste_du_total_fichiers_base
	#	taille_fichiers_decompresses=$[$taille_fichiers_decompresses]

# taille des fichiers decompresses
# df -P | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
taille_fichiers_decompresses=`cat /tmp/fichiers_decompresses`
rm -f /tmp/fichiers_decompresses
taille_fichiers_decompresses=$[$taille_fichiers_decompresses]
taille_fichiers_decompresses=$[100*$taille_fichiers_decompresses]

if ! ( test -e /tmp/fin_dar )
then
	fraction_compression=$[$multiplicateur_initial*($taille_fichiers_decompresses)/($taille_fichiers_avant_sauvegarde_corrigee)]
else
	valeur_fin_restaure=1
	fraction_compression=100
	# mise a jour taux de compression multiplie par 100 :
	taux_compression_sauvegarde=$[$taille_fichiers_decompresses/$taille_fichiers_compresses]
	taille_fichiers_decompresses=$[$taille_fichiers_decompresses/100]
	# df -P | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
	df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
	echo "`cat /tmp/taille_partition_base`,$taille_fichiers_decompresses,$taux_compression_sauvegarde" > $partition_restaure_dar/$taille_partition_de_base
	rm -f /tmp/taille_partition_base
fi
pourcentage_compression=$[$fraction_compression]
}
#----------------------------------------------------------------------------------------------------
verification_pour_fsa()
{
#		# taille des fichiers decompresses
#		# df -P | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
#		df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
#		taille_fichiers_decompresses=`cat /tmp/fichiers_decompresses`
#		rm -f /tmp/fichiers_decompresses
#		taille_fichiers_decompresses=$[$taille_fichiers_decompresses]
#		taille_fichiers_decompresses=$[100*$taille_fichiers_decompresses]
#
#		dans /tmp/affichage_evolution_fsa derniere ligne pourcentage réalisé

if ! ( test -e /tmp/sortie_fin_restaure_fsa )
then
	#		fraction_compression=$[$multiplicateur_initial*($taille_fichiers_decompresses)/($taille_fichiers_avant_sauvegarde_corrigee)]
	if ( test -e /tmp/affichage_evolution_fsa )
	then
		cp -f /tmp/affichage_evolution_fsa /tmp/affichage_evolution_fsa1
		tail -n -1 /tmp/affichage_evolution_fsa1 |  awk '{print $2}' > /tmp/affichage_evolution_fsa2
		cut -d"%" -f1 /tmp/affichage_evolution_fsa2 > /tmp/affichage_evolution_fsa1
		fraction_compression=`cat /tmp/affichage_evolution_fsa1`
	else
		fraction_compression=50
	fi
	# fraction_compression=$[$fraction_compression]
	rm -f /tmp/affichage_evolution_fsa1
	rm -f /tmp/affichage_evolution_fsa2
else
	valeur_fin_restaure=1
	rm -f /tmp/sortie_fin_restaure_fsa
	fraction_compression=100
	echo "\n\033[1;31m  `cat $chemin_langue/Restauration` : 100% \n" > /tmp/sortie_fin_restaure
	#	# mise a jour taux de compression multiplie par 100 :
	#	taux_compression_sauvegarde=$[$taille_fichiers_decompresses/$taille_fichiers_compresses]
	#	taille_fichiers_decompresses=$[$taille_fichiers_decompresses/100]
	#	# echo "`fdisk -s /dev/$base`,$taille_fichiers_decompresses,$taux_compression_sauvegarde" > $partition_restaure_dar/$taille_partition_de_base
	#	# df -P | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
	#	df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
	#	echo "`cat /tmp/taille_partition_base`,$taille_fichiers_decompresses,$taux_compression_sauvegarde" > $partition_restaure_dar/$taille_partition_de_base
	#	rm -f /tmp/taille_partition_base
fi
pourcentage_compression=$fraction_compression
}
#----------------------------------------------------------------------------------------------------
boite_restaure_dialog()
{
valeur_fin_restaure=0
echo "$valeur_fin_restaure" > /tmp/sortie_fin_restaure

while [ "$valeur_fin_restaure" != 1 ]
do
	sleep 4
	if ( test -e /tmp/sauve_diag )
	then
		if ! ( test -e /tmp/sauve_diag_fsa )
		then
			verification_pour_ntfsclone
		else
			verification_pour_fsa
		fi
	else
		verification_pour_dar
	fi
	echo $pourcentage_compression
done | DIALOGRC="/etc/dialogmenu_bloque" dialog --colors\
	--backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/Restauration` " \
	--gauge "\n\Zb\Z3  `cat $chemin_langue/texte_30a` \Z2$base $texte_ecrire \n \
	\n  \Zb\Z2`cat $chemin_langue/Taille` = $valeur_taille_mo Mo     $affiche_numero_poste \n\n
	\n  `cat $chemin_langue/menu_74`\n\n  \Zb\Z2`cat $chemin_langue/Patience` ... " 14 90

echo -e "`cat /tmp/sortie_fin_restaure`"
rm -f /tmp/sortie_fin_restaure
rm -f /tmp/affiche_progression
rm -f /tmp/fin_dar
rm -f /tmp/affichage_evolution_fsa

if ( test -e /tmp/erreur_ntfsclone )
then
	rm -f /tmp/erreur_ntfsclone
	echo
	echo -e "  `cat $chemin_langue/boucle_2`"
	echo
	read p
	exit
fi
}
#----------------------------------------------------------------------------------------------------
bargraphe_restaure()
{
perl -pi -e 's/ //g;' /tmp/fichiers_compresses
taille_fichiers_compresses=`cat /tmp/fichiers_compresses`1-1
rm -f /tmp/fichiers_compresses
taille_fichiers_compresses=$[$taille_fichiers_compresses]

cp -f $partition_restaure_dar/$taille_partition_de_base /tmp/test_taille_fichiers_avant_sauvegarde
perl -pi -e 's/,/,
/g;' /tmp/test_taille_fichiers_avant_sauvegarde

grep -ci "," /tmp/test_taille_fichiers_avant_sauvegarde > /tmp/test_taille_fichiers_avant_sauvegarde1
test_taille_fichiers_avant_sauvegarde=`cat /tmp/test_taille_fichiers_avant_sauvegarde1`
rm -f /tmp/test_taille_fichiers_avant_sauvegarde
rm -f /tmp/test_taille_fichiers_avant_sauvegarde1

correcteur_compression_restaure=`cat /tmp/correcteur_compression_restaure`
rm -f /tmp/correcteur_compression_restaure

taille_fichiers_avant_sauvegarde_corrigee=$[$taille_fichiers_compresses*$correcteur_compression_restaure]
valeur_taille_mo=$[$taille_fichiers_avant_sauvegarde_corrigee/102400]
multiplicateur_initial=100
if [ "$test_taille_fichiers_avant_sauvegarde" = 2 ]
then
	cut -d"," -f2 $partition_restaure_dar/$taille_partition_de_base > /tmp/taille_fichiers_avant_sauvegarde
	taille_fichiers_avant_sauvegarde=`cat /tmp/taille_fichiers_avant_sauvegarde`
	if [ "$taille_fichiers_avant_sauvegarde" != "ancien" ] # test ancienne version
	then
		taille_fichiers_avant_sauvegarde_corrigee=`cat /tmp/taille_fichiers_avant_sauvegarde`
		valeur_taille_mo=$[$taille_fichiers_avant_sauvegarde_corrigee/1024]
		rm -f /tmp/taille_fichiers_avant_sauvegarde
		multiplicateur_initial=1
	fi
fi
pourcentage_compression=0
boite_restaure_dialog
}
#----------------------------------------------------------------------------------------------------
copier_fichiers_partition_demarrage_vers_ntfs()
{
numero_partition_sd_demarrage=`expr substr $base 4 6`
numero_partition_win_sys=$[$numero_partition_sd_demarrage+1]
partition_win_sys=$disque_sd_demarrage$numero_partition_win_sys

echo "ntfs" > /tmp/besoin_type
echo "$partition_win_sys" > /tmp/monter_partition
runme autoriser_monter_partition_oscar
rm -f /tmp/monter_partition
rm -f /tmp/besoin_type

cp -fr /mnt/$base/* /mnt/$partition_win_sys/
umount /mnt/$base 2>/dev/null ; sync
umount /mnt/$partition_win_sys 2>/dev/null ; sync
}
#----------------------------------------------------------------------------------------------------
restaure_fsa()
{
if ! ( test -e /tmp/fichier_disque_dur )
then
	runme info_ddialog
fi
rm -f /tmp/affichage_evolution_fsa
disque=`expr substr $base 1 3`
numero_hd=`expr substr $base 4 3`
disque_sd_demarrage=`expr substr $base 1 3`
# id_type=`sfdisk /dev/$disque -c $numero_hd 2>/dev/null`
type_dell_utility=
grep -i $base /tmp/fichier_disque_dur | grep -ci diag > /tmp/nb_partition_diag
nb_partition_diag=`cat /tmp/nb_partition_diag`
rm -f /tmp/nb_partition_diag
if [ "$nb_partition_diag" = "1" ] # partition diag
then # partition dell utility car 'diag' avec parted
	grep -i $base /tmp/fichier_disque_dur | grep -ci ntfs > /tmp/nb_partition_ntfs_diag
	nb_partition_ntfs_diag=`cat /tmp/nb_partition_ntfs_diag`
	rm -f /tmp/nb_partition_ntfs_diag
	if [ "$nb_partition_ntfs_diag" = "1" ] # partition ntfs diag
	then # partition dell utility ou 'ntfs' et 'diag' au lieu de '27' avec parted
		type_dell_utility=ntfs_diag
		# copier les fichiers de cette partition WinRE dans la partition systeme Windows
		umount /mnt/$base 2>/dev/null ; sync
		# sfdisk -d /dev/$disque_sd_demarrage > /tmp/table_partition_WinRE 2>/dev/null
		echo "$disque_sd_demarrage" > /tmp/disque_table_sauvegarder_sf
		runme sauver_table_partition_sf
		cp -f /tmp/disque_table_sauvegarder_sf /tmp/table_partition_WinRE
		cp -f /tmp/table_partition_WinRE /tmp/table_partition_WinRE1
		cp -f /tmp/disque_table_sauvegarder_sf /tmp/teste_disque_gpt
		rm -f /tmp/disque_table_sauvegarder_sf
		runme tester_disque_gpt
		teste_disque_gpt=`cat /tmp/teste_disque_gpt`
		rm -f /tmp/teste_disque_gpt
		if [ "$teste_disque_gpt" = non_gpt ] # si ntfs diag il semble ne rien faire
		then # sfdisk
			perl -pi -e 's/Id=27/Id=7/g;' /tmp/table_partition_WinRE1
		fi
		# sfdisk -f /dev/$disque_sd_demarrage < /tmp/table_partition_WinRE1 1>/dev/null 2>/dev/null
		echo "$disque_sd_demarrage" > /tmp/disque_installer_table_sf
		cp -f /tmp/table_partition_WinRE1 /tmp/fichier_installer_table_sf
		runme installer_table_partition_sf 1>/dev/null 2>/dev/null
		sleep 2
		runme formater_ligne_partitions_vfat_gpt
		rm -f /tmp/table_partition_WinRE1
	else
		# partition dell utility non ntfs soit 'fat32' ou autre et 'diag' au lieu de 'de' avec parted
		type_dell_utility=fat32_diag
		umount /mnt/$base 2>/dev/null ; sync
		# sfdisk -d /dev/$disque_sd_demarrage > /tmp/table_partition_dell 2>/dev/null
		echo "$disque_sd_demarrage" > /tmp/disque_table_sauvegarder_sf
		runme sauver_table_partition_sf
		cp -f /tmp/disque_table_sauvegarder_sf /tmp/table_partition_dell
		cp -f /tmp/table_partition_dell /tmp/table_partition_dell1
		cp -f /tmp/disque_table_sauvegarder_sf /tmp/teste_disque_gpt
		rm -f /tmp/disque_table_sauvegarder_sf
		runme tester_disque_gpt
		teste_disque_gpt=`cat /tmp/teste_disque_gpt`
		rm -f /tmp/teste_disque_gpt
		if [ "$teste_disque_gpt" = non_gpt ] # si diag il semble ne rien faire
		then # sfdisk
			perl -pi -e 's/Id=de/Id=83/g;' /tmp/table_partition_dell1
		fi
		# sfdisk -f /dev/$disque_sd_demarrage < /tmp/table_partition_dell1 1>/dev/null 2>/dev/null
		echo "$disque_sd_demarrage" > /tmp/disque_installer_table_sf
		cp -f /tmp/table_partition_dell1 /tmp/fichier_installer_table_sf
		runme installer_table_partition_sf 1>/dev/null 2>/dev/null
		sleep 2
		runme formater_ligne_partitions_vfat_gpt
		mkfs.ext4 -Fq /dev/$base 2>/dev/null 1>/dev/null
	fi
fi

if ! ( test -e /tmp/partition_lvm_existe )
then
	fsarchiver restfs $partition_restaure_dar/image_fsa.fsa id=0,dest=/dev/$base -v 1>/dev/null 2>/tmp/affichage_evolution_fsa
	echo $? > /tmp/sortie_fin_restaure_fsa
else
	fsarchiver restfs $partition_restaure_dar/image_fsa.fsa id=0,dest=/dev/mapper/`cat /tmp/partition_lvm_cherchee` -v 1>/dev/null 2>/tmp/affichage_evolution_fsa
	echo $? > /tmp/sortie_fin_restaure_fsa
fi
if [ "$type_dell_utility" = fat32_diag ] # 'de'
then # partition dell utility
	mount /dev/$base /mnt/$base 2>/dev/null
	if ! ( test -e $partition_linux/oscar/dell_utility_$base )
	then
		mkdir $partition_linux/oscar/dell_utility_$base
	fi

	cp -fr /mnt/$base/* $partition_linux/oscar/dell_utility_$base/
	umount /mnt/$base 2>/dev/null
	cp -f /tmp/table_partition_dell /tmp/table_partition_dell1
	if [ "$teste_disque_gpt" = non_gpt ] # si diag il semble ne rien faire
	then # sfdisk
		perl -pi -e 's/Id=de/Id=c/g;' /tmp/table_partition_dell1
	fi
	# sfdisk -f /dev/$disque_sd_demarrage < /tmp/table_partition_dell1 1>/dev/null 2>/dev/null
	echo "$disque_sd_demarrage" > /tmp/disque_installer_table_sf
	cp -f /tmp/table_partition_dell1 /tmp/fichier_installer_table_sf
	runme installer_table_partition_sf 1>/dev/null 2>/dev/null
	sleep 2
	runme formater_ligne_partitions_vfat_gpt
	rm -f /tmp/table_partition_dell1
	mkdosfs -vF 32 /dev/$repertoire 2>/dev/null 1>/dev/null
	mount /dev/$base /mnt/$base 2>/dev/null
	if ( test -e $partition_linux/oscar/dell_utility_$base )
	then
		cp -fr $partition_linux/oscar/dell_utility_$base/* /mnt/$base/
	fi
	copier_fichiers_partition_demarrage_vers_ntfs
	# sfdisk -f /dev/$disque_sd_demarrage < /tmp/table_partition_dell 1>/dev/null 2>/dev/null
	echo "$disque_sd_demarrage" > /tmp/disque_installer_table_sf
	cp -f /tmp/table_partition_dell /tmp/fichier_installer_table_sf
	runme installer_table_partition_sf 1>/dev/null 2>/dev/null
	sleep 2
	runme formater_ligne_partitions_vfat_gpt
elif [ "$type_dell_utility" = ntfs_diag ] # '27'
then
	echo "ntfs" > /tmp/besoin_type
	echo "$base" > /tmp/monter_partition
	runme autoriser_monter_partition_oscar
	copier_fichiers_partition_demarrage_vers_ntfs
	# sfdisk -f /dev/$disque_sd_demarrage < /tmp/table_partition_WinRE 1>/dev/null 2>/dev/null
	echo "$disque_sd_demarrage" > /tmp/disque_installer_table_sf
	cp -f /tmp/table_partition_WinRE /tmp/fichier_installer_table_sf
	runme installer_table_partition_sf 1>/dev/null 2>/dev/null
	sleep 2
	runme formater_ligne_partitions_vfat_gpt
fi
rm -f /tmp/table_partition_dell
rm -f /tmp/table_partition_WinRE
}
#----------------------------------------------------------------------------------------------------
tester_place_disponible_sur_base()
{
# tester la taille partition suffisante pour dar :
grep -ci "," $partition_restaure_dar/$taille_partition_de_base > /tmp/test_taille_fichiers_avant_sauvegarde_restaure
test_taille_fichiers_avant_sauvegarde_restaure=`cat /tmp/test_taille_fichiers_avant_sauvegarde_restaure`
rm -f /tmp/test_taille_fichiers_avant_sauvegarde_restaure

if [ "$test_taille_fichiers_avant_sauvegarde_restaure" != 0 ]
then
	cut -d"," -f2 $partition_restaure_dar/$taille_partition_de_base > /tmp/taille_fichiers_avant_sauvegarde_restaure
	taille_fichiers_avant_sauvegarde_restaure=`cat /tmp/taille_fichiers_avant_sauvegarde_restaure`
	taille_fichiers_avant_sauvegarde_restaure=$[$taille_fichiers_avant_sauvegarde_restaure]
	rm -f /tmp/taille_fichiers_avant_sauvegarde_restaure
	# place_disponible_base=`fdisk -s /dev/$base`
	# df -P | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
	df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
	place_disponible_base=`cat /tmp/taille_partition_base`
	rm -f /tmp/taille_partition_base
	controle_place_base=$[$place_disponible_base-$taille_fichiers_avant_sauvegarde_restaure]
	signe_negatif_base=`expr substr $controle_place_base 1 1`

	if [ "$signe_negatif_base" = "-" ]
	then	# taille disponible trop petite sur la partition base
		dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
		--title " `cat $chemin_langue/DESOLE` " --ok-label "`cat $chemin_langue/Quitter`" \
		--msgbox "\n\n\Zb   `cat $chemin_langue/msgbox_79`\Z2 $base \Z1!!!" 10 67
		echo "" > /tmp/sortir
		exit
	fi
fi
}
#----------------------------------------------------------------------------------------------------
restaure_dar()
{
rm -f /tmp/fin_dar
dar -x $partition_restaure_dar/image_dar -R /mnt/$base -b -w 1>/tmp/sortie_fin_restaure # à voir option -b
erreur=$?
echo "" > /tmp/fin_dar
if ! [ "$erreur" = "0" ]
then	# des erreurs
        umount /mnt/$base 2>/dev/null ; sync
	echo
	echo -e "`cat $chemin_langue/boucle_2`"
	echo
	read p
	echo "" > /tmp/sortir
	exit
fi
}
#----------------------------------------------------------------------------------------------------
restaure_ntfsclone()	# inutilise car ntfs non montee
{
rm -f /tmp/sortie_fin_restaure_ntfsclone
cat $partition_restaure_dar/image.ntfs.* | gunzip -c | ntfsclone --restore-image --overwrite /dev/$base - 2>/dev/null 1>/tmp/sortie_ntfsclone
echo $? > /tmp/sortie_fin_restaure_ntfsclone
erreur=`cat /tmp/sortie_fin_restaure_ntfsclone`
if ! [ "$erreur" = "0" ]
then	# des erreurs
	echo
	echo -e "`cat $chemin_langue/boucle_2`"
	echo
	read p
	echo "" > /tmp/sortir
	exit
fi
}
#----------------------------------------------------------------------------------------------------
#  commandes externes de procédures

case "$1" in
	restaure_ntfsclone)
		rm -f /tmp/sortie_fin_restaure_ntfsclone
		restaure_ntfsclone &
		
		echo "178" > /tmp/correcteur_compression_restaure	# compression 1,78 pour ntfs avec ntfsclone
		# taille des fichiers compresses pour affichage
		echo `ls -s $partition_restaure_dar/*.ntfs.* | awk '{print $1 "+" }'` > /tmp/fichiers_compresses
		bargraphe_restaure
		
		if ( test -e /tmp/sauve_diag )
		then
			echo "ntfs" > /tmp/besoin_type
			echo "$base" > /tmp/monter_partition
			runme autoriser_monter_partition_oscar
			rm -f /tmp/monter_partition
			rm -f /tmp/besoin_type

			# taux de compression multiplie par 1 :
			echo `ls -s $partition_restaure_dar/*.ntfs.* | awk '{print $1 "+" }'` > /tmp/fichiers_compresses_apres_sauvegarde
			perl -pi -e 's/ //g;' /tmp/fichiers_compresses_apres_sauvegarde
			taille_fichiers_compresses_apres_sauvegarde=`cat /tmp/fichiers_compresses_apres_sauvegarde`1-1
			rm -f /tmp/fichiers_compresses_apres_sauvegarde
			taille_fichiers_compresses_apres_sauvegarde=$[$taille_fichiers_compresses_apres_sauvegarde]
			
			#	# taille des fichiers decompresses
			#	ls -sR /mnt/$base | grep total | awk '{print $2 "+" }' > /tmp/liste_du_total_fichiers_base	# par ligne : total valeur
			#	perl -pi -e 's/ //g;' /tmp/liste_du_total_fichiers_base
			#	taille_fichiers_decompresses=`cat /tmp/liste_du_total_fichiers_base`1-1
			#	rm -f /tmp/liste_du_total_fichiers_base
			
			# taille des fichiers decompresses
			# df -P | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
			df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
			taille_fichiers_decompresses=`cat /tmp/fichiers_decompresses`
			rm -f /tmp/fichiers_decompresses
			taille_fichiers_decompresses=$[$taille_fichiers_decompresses]
		
			# taux de compression multiplie par 100 :
			taux_compression_sauvegarde=$[100*$taille_fichiers_decompresses/$taille_fichiers_compresses_apres_sauvegarde]
		
			# echo "`fdisk -s /dev/$base`,$taille_fichiers_decompresses,$taux_compression_sauvegarde" > $partition_restaure_dar/$taille_partition_de_base
			#df -P | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
			df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
			echo "`cat /tmp/taille_partition_base`,$taille_fichiers_decompresses,$taux_compression_sauvegarde" > $partition_restaure_dar/$taille_partition_de_base
			rm -f /tmp/taille_partition_base
			
			# nettoyer desktop.ini intempestif (deja fait dans restaure_dar)
			rm -f /mnt/$base/Documents\ and\ Settings/All\ Users/Menu\ Démarrer/Programmes/Démarrage/desktop.ini
			rm -f /mnt/$base/ProgramData/Microsoft/Windows/Start\ Menu/Programs/Startup/desktop.ini
		fi
		
		exit 0
	;;
	restaure_fsa)
		rm -f /tmp/sortie_fin_restaure_fsa
		restaure_fsa &
		
		# taille des fichiers compresses pour affichage
		echo `ls -s $partition_restaure_dar/*_fsa* | awk '{print $1 "+" }'` > /tmp/fichiers_compresses
		
		echo "" > /tmp/sauve_diag_fsa
		echo "" > /tmp/sauve_diag
		bargraphe_restaure
		rm -f /tmp/sauve_diag_fsa
		rm -f /tmp/sauve_diag
				
		if ! ( test -e /tmp/partition_lvm_existe )
		then
			if ( test -e /tmp/partition_ntfs_sauvegardee )
			then
				rm -f /tmp/partition_ntfs_sauvegardee
				echo "ntfs" > /tmp/besoin_type
				echo "$base" > /tmp/monter_partition
				runme autoriser_monter_partition_oscar
				rm -f /tmp/monter_partition
				rm -f /tmp/besoin_type
				
				# nettoyer desktop.ini intempestif (deja fait dans restaure_dar)
				rm -f /mnt/$base/Documents\ and\ Settings/All\ Users/Menu\ Démarrer/Programmes/Démarrage/desktop.ini
				rm -f /mnt/$base/ProgramData/Microsoft/Windows/Start\ Menu/Programs/Startup/desktop.ini
			else	# partition linux non lvm
				mount /dev/$base /mnt/$base 1>/dev/null 2>/dev/null
			fi
		
			# taux de compression multiplie par 1 :
			echo `ls -s $partition_restaure_dar/*_fsa* | awk '{print $1 "+" }'` > /tmp/fichiers_compresses_apres_sauvegarde
			perl -pi -e 's/ //g;' /tmp/fichiers_compresses_apres_sauvegarde
			taille_fichiers_compresses_apres_sauvegarde=`cat /tmp/fichiers_compresses_apres_sauvegarde`1-1
			rm -f /tmp/fichiers_compresses_apres_sauvegarde
			taille_fichiers_compresses_apres_sauvegarde=$[$taille_fichiers_compresses_apres_sauvegarde]
			
			#	# taille des fichiers decompresses
			#	ls -sR /mnt/$base | grep total | awk '{print $2 "+" }' > /tmp/liste_du_total_fichiers_base	# par ligne : total valeur
			#	perl -pi -e 's/ //g;' /tmp/liste_du_total_fichiers_base
			#	taille_fichiers_decompresses=`cat /tmp/liste_du_total_fichiers_base`1-1
			#	rm -f /tmp/liste_du_total_fichiers_base
			
			# taille des fichiers decompresses
			# df -P | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
			df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
			taille_fichiers_decompresses=`cat /tmp/fichiers_decompresses`
			rm -f /tmp/fichiers_decompresses
			taille_fichiers_decompresses=$[$taille_fichiers_decompresses]
		
			# taux de compression multiplie par 100 :
			taux_compression_sauvegarde=$[100*$taille_fichiers_decompresses/$taille_fichiers_compresses_apres_sauvegarde]
		
			# echo "`fdisk -s /dev/$base`,$taille_fichiers_decompresses,$taux_compression_sauvegarde" > $partition_restaure_dar/$taille_partition_de_base
			# df -P | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
			df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
			echo "`cat /tmp/taille_partition_base`,$taille_fichiers_decompresses,$taux_compression_sauvegarde" > $partition_restaure_dar/$taille_partition_de_base
			rm -f /tmp/taille_partition_base
			
		else	# partition lvm
			mount /dev/mapper/`cat /tmp/partition_lvm_cherchee` /mnt/$base 1>/dev/null 2>/dev/null
		fi
		
		exit 0
	;;
esac

tester_place_disponible_sur_base
rm -f /tmp/sortie_fin_restaure
restaure_dar &

# taille des fichiers compresses
echo `ls -s $partition_restaure_dar/*.dar | awk '{print $1 "+" }'` > /tmp/fichiers_compresses
bargraphe_restaure

# nettoyer desktop.ini intempestif
rm -f /mnt/$base/Documents\ and\ Settings/All\ Users/Menu\ Démarrer/Programmes/Démarrage/desktop.ini
rm -f /mnt/$base/ProgramData/Microsoft/Windows/Start\ Menu/Programs/Startup/desktop.ini
