#!/bin/sh


## Copyright (c) 2003-2013 Tissoires Jean-François & Benjamin,  jftissoires@gmail.com
## Outil Système Complet d'Assistance Réseau: OSCAR
## Ce programme est sous Licence Publique Générale GNU publiée par la Free Software Foundation.


# sauvegarde une partition hdji au choix sur la partition linux

## si /tmp/sauve_ntfs_dar existe   : faire sauvegarde_dar
## si /tmp/sauve_fsa ln1143 existe : faire sauvegarde_fsa
# pour dar correcteur_compression 181 pour linux
# pour dar correcteur_compression 140 pour vfat

PATH="/usr/share/oscar/bin:$PATH"
if ( test -e /usr/share/oscar/usr/choix_langue )
then
	choix_langue=`cat /usr/share/oscar/usr/choix_langue`
else
	echo "fr" > /usr/share/oscar/usr/choix_langue
	choix_langue=fr
	traduction
fi
chemin_langue=/usr/share/oscar/usr/langue/$choix_langue

rm -f /tmp/base_choisie

grandeur_fichiers_sauvegarde_defaut=2000

# pour tenir compte de la compression enlever la compression soit 16% :
# pourcentage a enlever : pour 16,6% valeur_pourcentage_a_enlever=6 , pour 20% valeur_pourcentage_a_enlever=5 ...
valeur_pourcentage_a_enlever=6 



#----------------------------------------------------------------------------------------------------
info_veille_sauve()
{
info_veille
echo -e "\033[1;31m `cat $chemin_langue/texte_47a`\033[1;m"
}
#----------------------------------------------------------------------------------------------------
nettoyer_fin()
{
	rm -f /tmp/pas_repertoire_oscar_par_defaut
	rm -f /tmp/nom_simple
	rm -f /tmp/une_seule_image_trouvee
	rm -f /tmp/nouvelle_sauvegarde
	rm -f /tmp/incrementer_sauvegarde
	decrementer_oscar_vide
	rm -f /tmp/partition_oscar_sauvegarde
	rm -f /tmp/partition_linux_oscar_sauvegarde
	rm -f /tmp/partition_possible_sauvegarde
	rm -f /tmp/sauvegarde_trouvee
	rm -f /tmp/recup_sauvegarde_lance
	rm -f /tmp/base_a_recuperer
	rm -f /tmp/choix_partition_sauvegarde_recup_fait
	rm -f /tmp/sortir
	rm -f /tmp/temp_commentaire.txt
	exit
}
#----------------------------------------------------------------------------------------------------
decrementer_oscar_vide()
{
echo "$partition_linux" > /tmp/monter_partition
perl -pi -e 's/\/mnt\///g;' /tmp/monter_partition
test_existe=`cat /tmp/monter_partition`
if [ "$test_existe" != "" ]
then
	runme autoriser_monter_partition_oscar
	partition_linux=`cat /tmp/monter_partition`
fi
rm -f /tmp/monter_partition
if ( test -e $partition_linux/oscar )
then
	if ! ( test -e $partition_linux/oscar/image.partimage.000 )
	then
		if ! ( test -e $partition_linux/oscar/image.ntfs.00 )
		then
			if ! ( test -e $partition_linux/oscar/image_dar.1.dar )
			then
				if ! ( test -e $partition_linux/oscar/image_fsa.fsa )
				then
					for x in 1 2 3 4 5 6 7 8 9 10 12 12 13 14 15 16 17 18 19 20
					do
						    if ( test -e $partition_linux/oscar$x/partition_sauvegardee )
						    then
							oscar_plus=oscar$x
						    fi
					done
					if [ "oscar_plus" != "" ]
					then
						#	if ( test -e $partition_linux/oscar/livecd.squashfs )
						#	then
						#		mv $partition_linux/oscar/livecd.squashfs $partition_linux/$oscar_plus
						#	fi
						if ( test -e $partition_linux/oscar/var_poste )
						then
							mv $partition_linux/oscar/var_poste $partition_linux/$oscar_plus
						fi
						rm -f $partition_linux/oscar/commentaire_oscar.txt
						rm -fR $partition_linux/oscar
						mv $partition_linux/$oscar_plus $partition_linux/oscar
					fi
				fi
			fi
		fi
	fi
fi

if ( test -e $partition_linux/oscar1 )
then
	if ! ( test -e $partition_linux/oscar/partition_sauvegardee )
	then
		#	if ( test -e $partition_linux/oscar/livecd.squashfs )
		#	then
		#		mv $partition_linux/oscar/livecd.squashfs $partition_linux/oscar1
		#	fi
		if ( test -e $partition_linux/oscar/var_poste )
		then
			mv $partition_linux/oscar/var_poste $partition_linux/oscar1
		fi
	    rm -f $partition_linux/oscar/commentaire_oscar.txt
	    rm -fR $partition_linux/oscar
	    mv $partition_linux/oscar1 $partition_linux/oscar
	fi
fi
}
#----------------------------------------------------------------------------------------------------
boites_choix_sauvegarde()    # sauvegarde taille de sauvegarde
{
#	"" "Vous pouvez faire une \Z2sauvegarde simple \Znde ce poste" \
#	"" "ou une \Z2sauvegarde suivie d'une vérification\Zn sauf pour les partitions \Zb\Z4NTFS\Zn. " \
#	"" "      Pour une sauvegarde\Z4 simple\Zn le poste s'éteint à la fin, \Zn " \
#	"" "      pour une sauvegarde\Z4 vérifiée\Zn le poste ne s'éteint pas (sauf pour les \Zb\Z4NTFS\Zn). " \

	rm -f /tmp/fichiertmp2
	# Taille des fichiers de sauvegarde
	boite_graver
	grandeur_fichiers_sauvegarde=$grandeur_fichiers_sauvegarde_defaut # par défaut pour graver des DVD 2 fichiers par DVD
	return # taille des sauvegarde maintenant toujours 2000Mo
	echo  "\n\Zb\Z3 `cat $chemin_langue/menu_259` :\Zn\n " > /tmp/fichiertmp2
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Accepter`" --cancel-label "`cat $chemin_langue/Annuler`" --title " `cat $chemin_langue/Sauvegarde` " \
	--extra-button --extra-label "`cat $chemin_langue/Modifier`" \
	--menu "`cat /tmp/fichiertmp2`" 0 0 0 \
	"" "" \
	"" "" \
	"" "`cat $chemin_langue/menu_260` \Zb\Z1$grandeur_fichiers_sauvegarde\Zn Mo  " \
	"" "`cat $chemin_langue/menu_261`." \
	"" "" \
	"" ""
       case $? in
	    0)	rm -f /tmp/fichiertmp
		rm -f /tmp/fichiertmp2
		type_sauvegarde=verifiee
		return
		;;
	    1)  rm -f /tmp/fichiertmp
		rm -f /tmp/fichiertmp2
		decrementer_oscar_vide
		echo "" > /tmp/sortir
	    	return
		#type_sauvegarde=simple
		;;
	    3)	taille_fichiers_sauvegarde
	    	boites_choix_sauvegarde
	    	;;
	    255) rm -f /tmp/fichiertmp
		rm -f /tmp/fichiertmp2
		decrementer_oscar_vide
		echo "" > /tmp/sortir
		return
		;;
	esac 
}
#----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------
taille_fichiers_sauvegarde()  # choix de la grandeur des fichiers de sauvegarde
{
    rm -f /tmp/tempfile
    # Taille des fichiers de sauvegarde
    DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
    --backtitle "`cat /etc/banniere_oscar`" \
    --cancel-label "`cat $chemin_langue/Annuler`"  --title " `cat $chemin_langue/menu_259` " \
    --inputbox "\n\n\Zn `cat $chemin_langue/inputbox_36` :  " 0 0 $grandeur_fichiers_sauvegarde_defaut 2>/tmp/tempfile
        case $? in
	    1)  grandeur_fichiers_sauvegarde=$grandeur_fichiers_sauvegarde_defaut
	    	rm -f /tmp/tempfile    	
		return
		;;
	    255) grandeur_fichiers_sauvegarde=$grandeur_fichiers_sauvegarde_defaut
	   	 rm -f /tmp/tempfile
		return
		;;
	esac

    grandeur_fichiers_sauvegarde=`cat /tmp/tempfile`
    rm -f /tmp/tempfile
	if (( "$grandeur_fichiers_sauvegarde" < 1 )) || (( "$grandeur_fichiers_sauvegarde" > "2000" ))
	then
	taille_fichiers_sauvegarde
	fi
}
#----------------------------------------------------------------------------------------------------
boites_choix_controle_sauvegarde()    # sauvegarde avec vérification ou non
{
	# Contrôle de sauvegarde
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/menu_263`" --cancel-label "`cat $chemin_langue/Annuler`" --title " `cat $chemin_langue/menu_262` " \
	--extra-button --extra-label "`cat $chemin_langue/Controlee`" \
	--menu "\Zb\Z3 `cat $chemin_langue/menu_278` : " 0 0 0 \
	"" "" \
	"" "`cat $chemin_langue/menu_264`" \
	"" "`cat $chemin_langue/menu_265`." \
	"" "" \
	"" "" \
	"" "" \
	"" "\Z1`cat $chemin_langue/Remarque` :\Zn " \
	"" "" \
	"" "      `cat $chemin_langue/menu_266`" \
	"" "      `cat $chemin_langue/menu_267`" \
	"" ""
       case $? in
	    3)	type_sauvegarde=verifiee
		;;
	    0)  type_sauvegarde=simple;;
	    1) 
	    decrementer_oscar_vide
	    echo "" > /tmp/sortir
	    return
	    ;;
	    255) 
	    decrementer_oscar_vide
	    echo "" > /tmp/sortir
	    return
	    ;;

	esac 
}
#----------------------------------------------------------------------------------------------------
question_test()
{
	echo
  	echo -en "`cat $chemin_langue/texte_45` :\033[1;m"
  	read lettre_reponse

  	if [ "$lettre_reponse" = "C" ] || [ "$lettre_reponse" = "c" ]
	then
		return
	else
		question_test
	fi
}
#----------------------------------------------------------------------------------------------------
eteindre_le_poste()
{
	rm -f /tmp/partition_lvm_cherchee
	rm -f /tmp/partition_lvm_existe
	rm -f /tmp/une_seule_image_trouvee
	rm -f /tmp/nouvelle_sauvegarde
	rm -f /tmp/incrementer_sauvegarde
	decrementer_oscar_vide
	rm -f /tmp/partition_oscar_sauvegarde
	rm -f /tmp/partition_linux_oscar_sauvegarde
	rm -f /tmp/partition_possible_sauvegarde
	rm -f /tmp/sauvegarde_trouvee
	rm -f /tmp/pas_repertoire_oscar_par_defaut
	rm -f /tmp/sortir
	rm -f /tmp/taille_partition_base

# umount /mnt/$repertoire 2>/dev/null ; sync
		if [ "$type_sauvegarde" = "simple" ]
		then
			# Le poste s'éteint
			DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
			--backtitle "`cat /etc/banniere_oscar`" \
			--title " `cat $chemin_langue/infobox_1` " \
			--infobox "\n\n\n`cat $chemin_langue/infobox_2`\n\n\n\n" 0 0
			for decompte in 12 11 10 9 8 7 6 5 4 3 2 1 STOP
			do
			sleep 1
			echo -en "\033[1;31m  > $decompte"
			done
			echo -e "\033[1;m "
			if ( test -e /etc/cdrom_ejecte )
			then
				eject -t
			fi
			umount -a 2>/dev/null ; sync
			halt
			sleep 10
			exit
		else
		echo
		echo -e " \033[1;33m`cat $chemin_langue/texte_46`\033[1;m ..."
	  	question_test
		exit
		fi
}
#----------------------------------------------------------------------------------------------------
boite_partition_a_sauver()
{
#	runme prepare_fichier_temptaille
#	cut -d"," -f1 /tmp/fichier_disque_dur > /tmp/bozo
#	cp -f /tmp/bozo /tmp/fichier_disque_dur
#	grep -v "swap" /tmp/fichier_disque_dur | egrep -e "^/dev" | grep -v "W95 Ext'd" | grep -v "Extended" | \
#	perl -pi -e 's/\*//g;  s/\+/ /g; s/\-/ /g; s/  /:/g; s/:+/:/g;' | \
#	awk 'BEGIN { FS=":" } { printf ("%0s %15s %25s\n","\""$1"\" \"",$4,$6"\" \\")}' > /tmp/bozo

runme info_ddialog_menu
grep -v "swap" /tmp/bozo | grep -v "Linux LVM" > /tmp/bozo1
cp -f /tmp/bozo1 /tmp/bozo
rm -f /tmp/bozo1
runme boite_selection_bozo
if ( test -e /tmp/sortir )
then
	return
fi
}
#----------------------------------------------------------------------------------------------------
boite_partition_de_sauvegarde() # selectionner seulement les partitions linux vides de donnees non swap et pas celle de la sauvegardee
{
#	runme prepare_fichier_temptaille
#	rm -f /tmp/bozo
#   
#	egrep -e "^/dev" /tmp/fichier_disque_dur | grep -i "linux" | grep -v "swap" | grep -v "$base" | \
#	perl -pi -e 's/\*//g;  s/\+/ /g; s/\-/ /g; s/  /:/g; s/:+/:/g;' | \
#	awk 'BEGIN { FS=":" } { printf ("%0s %15s %25s\n","\""$1"\" \"",$4,$6"\" \\")}' >> /tmp/bozo
#	runme boite_selection_bozo

type="linux"
boucle_partition
if ( test -e /tmp/base_choisie )	# toujours le cas
then
	base=`cat /tmp/base_choisie`
	rm -f /tmp/base_choisie
fi
if ( test -e /tmp/sortir )
then
	return
fi

grep -v "$base" /tmp/partition_linux_oscar_sauvegarde > /tmp/bozo
rm -f /tmp/partition_linux_oscar_sauvegarde

runme boite_selection_bozo
if ( test -e /tmp/sortir )
then
	return
fi
perl -pi -e 's/ //g;' /tmp/tempfile
}
#----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------
boite_graver()
{
if ! ( test -e /etc/oscar )
then	# Utilisation du cédérom OSCAR
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "Réaliser le cédérom OSCAR" --cancel-label "`cat $chemin_langue/Annuler`" --title " `cat $chemin_langue/Attention` " \
	--menu "\Zb\Z3 `cat $chemin_langue/menu_179` " 7 78 0 \
	"" "" \
	"" "`cat $chemin_langue/menu_268`" \
	"" "`cat $chemin_langue/menu_269`" \
	"" "" \
	"" "" \
	"" "\Z2Copyright (c) 2003-2013 Tissoires Jean-François & Benjamin" \
	"" "\Z2Cédérom \Zb\Z1O\Z3util\Zb\Z1 S\Z3ystème \Zb\Z1C\Z3omplet d'\Zb\Z1A\Z3ssistance\Zb\Z1 R\Z3éseau, \Zb\Z1OSCAR" \
	"" "\Z2Cédérom \Zb\Z1Rapide \Z3de\Zb\Z1 S\Z3auvegarde aux\Zb\Z1 O\Z3rdinateurs et\Zb\Z1 S\Z3ystèmes, \Zb\Z1RapideSOS " \
	"" "\Z2jftissoires@gmail.com \Zn " \
	"" "" \
	"" "\Zn`cat $chemin_langue/menu_182`." \
	"" ""
       case $? in
	    0)  cdrom_oscar
		nettoyer_fin;;
	    1) 	nettoyer_fin
		;;
	    255) nettoyer_fin;;
	esac
fi
}
#----------------------------------------------------------------------------------------------------
autoriser()
{
	runme prepare_fichier_temptaille
	runme colorier_selection_info
	# cp -f /tmp/couleurs_info /tmp/bozo
	cp -f /tmp/fichier_disque_dur /tmp/bozo
	rm -f /tmp/couleurs_info
        perl -pi -e ' s/:/:\\Zb\\Z1/g; s/,/\\Zn,/g;' /tmp/bozo
        
        if [ "$repertoire" = "" ]
        then
        	# proposer la premiere partition linux possible
		grep -ci "OSCAR" /tmp/partition_linux_oscar_sauvegarde > /tmp/partition_linux_oscar_sauvegarde1
		test=`cat /tmp/partition_linux_oscar_sauvegarde1`
		if [ "$test" != "0" ] # proposer le premier OSCAR
		then
			grep -i "OSCAR" /tmp/partition_linux_oscar_sauvegarde > /tmp/partition_linux_oscar_sauvegarde1
		else	# proposer le premier qui n'est pas OSCAR
			cp -f /tmp/partition_linux_oscar_sauvegarde /tmp/partition_linux_oscar_sauvegarde1
		fi

		perl -pi -e 's/oui//g; s/non//g; s/ //g;' /tmp/partition_linux_oscar_sauvegarde1
		cut -d"\"" -f2 /tmp/partition_linux_oscar_sauvegarde1 > /tmp/temp_partition_linux_oscar1
		rm -f /tmp/partition_linux_oscar_sauvegarde1
		# prendre le premier du fichier :
		perl -pi -e 's/
/,/g;' /tmp/temp_partition_linux_oscar1 # attention ne pas mettre d'espace en debut de ligne
		cut -d"," -f1 /tmp/temp_partition_linux_oscar1 > /tmp/temp_partition_linux_oscar
		repertoire=`cat /tmp/temp_partition_linux_oscar`
		rm -f /tmp/temp_partition_linux_oscar
		rm -f /tmp/temp_partition_linux_oscar1
        fi

	echo "$repertoire" > /tmp/affichage_repertoire
	perl -pi -e 's/\/mnt\///g;' /tmp/affichage_repertoire
	repertoire=`cat /tmp/affichage_repertoire`
	rm -f /tmp/affichage_repertoire
	if ( test -e /mnt/$repertoire/oscar/partition_sauvegardee )
	then
		base=`cat /mnt/$repertoire/oscar/partition_sauvegardee`	# car different si une partition boot existe
	fi

	# Sauvegarde
	if [ "$base" = "non" ] # demander la partition a sauvegarder
	then
		repertoire=non
		return
	fi
	runme modifier_Linux_en_OSCAR
	perl -pi -e 's/ 1  1  /      /g;' /tmp/bozo
	grep -v swap /tmp/bozo | grep -v Extended | grep -v Disque > /tmp/bozo1
	cp -f /tmp/bozo1 /tmp/bozo
	rm -f /tmp/bozo1
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Accepter`" --cancel-label "`cat $chemin_langue/Annuler`" --title " `cat $chemin_langue/Sauvegarde` " \
	--extra-button --extra-label "`cat $chemin_langue/Modifier`" \
	--menu "\n`cat /tmp/bozo`" 0 0 0 2>/tmp/erreur \
	"" "\Zn\Z2`cat $chemin_langue/menu_270` \Zb\Z4$base \Zn\Z2`cat $chemin_langue/menu_271` \Zb\Z4$repertoire\Zn\Z2 ? " \
	"" "\Zn\Z2`cat $chemin_langue/menu_272`\Zn\Z2."
	choix_clavier=$?
	erreur_boite=`cat /tmp/erreur`
	rm -f /tmp/erreur
	if [ "$erreur_boite" != "" ]
	then
		rm -f /tmp/fichier_disque_dur
		info_erreur_definition_ecran
		nettoyer_fin
	fi
       case $choix_clavier in
	    0)	rm -f /tmp/fichier_disque_dur
		return;;
	    3) 	rm -f /tmp/fichier_disque_dur
	    	repertoire=non
		return;;
	    1)  # annuler
	    	decrementer_oscar_vide
	        echo "" > /tmp/sortir
	    	return
	    	;;

	    255) rm -f /tmp/fichier_disque_dur
	         repertoire=non
	    	 echo "" > /tmp/sortir
		 decrementer_oscar_vide
		 return
		 ;;
	esac
}
#----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------
boite_sauver()
{
	verif=`cat /usr/share/oscar/bin/fichier_s`
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--cancel-label "`cat $chemin_langue/Annuler`"  --title " `cat $chemin_langue/wordbox_3` " \
	--passwordbox "\n\n`cat $chemin_langue/wordbox_4` : \n " 15 60 2>/tmp/tempfile
	reponse=`cat /tmp/tempfile`
	rm -f /tmp/tempfile
	if ( test -e $reponse )
	then
	    nettoyer_fin
	elif  [ $reponse = $verif ]
	then
	    return
	else
	    boite_sauver
	fi
}
#----------------------------------------------------------------------------------------------------
boucle_partition() # sortir la partition dans la reponse
{
	rm -f /tmp/tempfile
	echo "$type" > /tmp/tempfile
	runme prepare_boucle_partition
	nombretype=`cat /tmp/nombre`
	rm -f /tmp/nombre

numero=0
rm -f /tmp/partition_linux_oscar_sauvegarde
cp -f /tmp/tempfile /tmp/temp_ligne_deux_points
rm -f /tmp/tempfile
until  ( test  $numero = $nombretype )
    do
	rm -f /tmp/temp_ligne_deux_points1
#	rm -f /tmp/partfile1
	numero=$[$numero+1]
	cut -d":" -f$numero /tmp/temp_ligne_deux_points > /tmp/temp_ligne_deux_points1	#hdaiii
#	cut -d":" -f$numero /tmp/partfile > /tmp/partfile1	#ide/h0/b0/t0/l0/hdaiii
	reponse=`cat /tmp/temp_ligne_deux_points1`
	reparti=$reponse
#	reparti=`cat /tmp/partfile1`
	rm -f /tmp/temp_ligne_deux_points1
	if ! [ "$reponse" = "" ] # si la partition existe
	then 
		numero_hd=`expr substr $reponse 4 3`
#		disque=`cut -d/ -f1-5 /tmp/partfile1`/disc	#ide/h0/b0/t0/l0/disc
#		rm -f /tmp/partfile1
		disque=`expr substr $reponse 1 3`       #hda
	        if [ "$type" = "linux" ]
		then
	        	# id_type=`sfdisk /dev/$disque -c $numero_hd 2>/dev/null`
			grep -i $reponse /tmp/fichier_disque_dur | grep -c Linux > /tmp/nb_partition_linux
		        nb_partition_linux=`cat /tmp/nb_partition_linux`
		        rm -f /tmp/nb_partition_linux
			if [ "$nb_partition_linux" = "1" ] # partition linux non swap
			then
				nombre_partitions_linux=$nombretype			
				if [ "$premiere_partition" = "non" ]
				then
					premiere_partition=$reponse # premiere partition linux
				fi
				derniere_partition_linux=$reponse
				
				#if ! ( test -e /mnt/$reponse )
				#	then	mkdir /mnt/$reponse
				#fi
				
				echo "$reponse" > /tmp/monter_partition
				runme autoriser_monter_partition_oscar
				partition_linux=`cat /tmp/monter_partition`
				rm -f /tmp/monter_partition
	
				if ( test -e $partition_linux/image.partimage.000 ) ## sauvegarde dans ancienne version
				then
					rm -f partition_de_sauvegarde
					echo "$reponse" > partition_de_sauvegarde
					changement_version_oscar changement_partition_sauvegarde
				fi
				
				#sfdisk -s /dev/$reponse > /tmp/taille_partition_linux 2>/dev/null
				#valeur_Mo_taille=`cat /tmp/taille_partition_linux`
				echo "$reponse" > /tmp/calcul_taille_partition_disque
				runme calcul_taille_partition_MB
				valeur_Mo_taille=`cat /tmp/calcul_taille_partition_disque`
				rm -f /tmp/calcul_taille_partition_disque

				valeur_Mo_taille=$[$valeur_Mo_taille]
				valeur_Mo_taille=$[$valeur_Mo_taille/1000]
				rm -f /tmp/taille_partition_linux
				
				if ( test -e $partition_linux/etc/conf.d/hostname )	# tous les linux installes
				then
					cut -d"\"" -f2 $partition_linux/etc/conf.d/hostname > /tmp/test_partition_gentoo_oscar
					hostname_oscar=`cat /tmp/test_partition_gentoo_oscar`
					rm -f /tmp/test_partition_gentoo_oscar
					if [ "$hostname_oscar" = OSCAR ]	# oscar installe sur le poste
					then
						echo "\"$reponse\" \"             $valeur_Mo_taille                   OSCAR  \" \\" >> /tmp/partition_linux_oscar_sauvegarde
					fi
					if ( test -e $partition_linux/oscar/partition_sauvegardee ) # partition sauvegardée existe
					then
						repertoire=$reponse
						base=`cat $partition_linux/oscar/partition_sauvegardee`
					fi
				elif ( test -e $partition_linux/oscar/partition_sauvegardee ) # partition sauvegardée existe
				then
					repertoire=$reponse
					base=`cat $partition_linux/oscar/partition_sauvegardee`
					echo "\"$reponse\" \"             $valeur_Mo_taille                   Linux  \" \\" >> /tmp/partition_linux_oscar_sauvegarde
				else	# linux vide ou de donnees ou home
					if ! ( test -e $partition_linux/etc )
					then
						if ! ( test -e $partition_linux/boot )
						then
							echo "\"$reponse\" \"             $valeur_Mo_taille                   Linux  \" \\" >> /tmp/partition_linux_oscar_sauvegarde
						fi
					fi
				fi
			else
				grep -i $reponse /tmp/fichier_disque_dur | grep -ci swap > /tmp/nb_partition_swap
				nb_partition_swap=`cat /tmp/nb_partition_swap`
				rm -f /tmp/nb_partition_swap
				if [ "$nb_partition_swap" = "1" ] # partition swap linux
				then  # partition linux swap
					partition_linux_swap=oui
				fi			
			fi
		else
			if [ "$premiere_partition" = "non" ]
			then
				premiere_partition=$reponse # autre type, ntfs ou fat32
			fi
		fi
	fi
#	rm -f /tmp/partfile1
    done
rm -f /tmp/tempfile
# rm -f /tmp/partfile
}
#----------------------------------------------------------------------------------------------------
test_windows_en_fat32() # inutile avec fsa mais obligatoire pour avoir id_type
{
type_disque=`expr substr $base 1 2`       # hd ou sd
disque=`expr substr $base 1 3`       # sda
numero_sd=`expr substr $base 4 3`       # iii
# id_type=`sfdisk /dev/$disque -c $numero_sd 2>/dev/null`
grep -i $base /tmp/fichier_disque_dur | grep -ci fat32 > /tmp/nb_partition_fat32
nb_partition_fat32=`cat /tmp/nb_partition_fat32`
rm -f /tmp/nb_partition_fat32
if [ "$nb_partition_fat32" = "1" ] # partition fat32
then
	if ! ( test -e /mnt/$base )
	then 
		mkdir /mnt/$base
	fi
	mount /dev/$base /mnt/$base
	if ( test -e /mnt/$base/WINDOWS/system32/drivers/vga.sys ) || ( test -e /mnt/$base/WINNT/system32/drivers/vga.sys )
	then 	# windows trouvé sur fat 32
		if ( test -e /mnt/$base/WINDOWS/system32/convert.exe ) || ( test -e /mnt/$base/WINNT/system32/convert.exe )
		then
			echo "%windir%\\system32\\convert.exe c: /fs:ntfs /nochkdsk" > /mnt/$base/oscar_convert_NTFS.bat
		fi
		boite_refuse_sauvegarde_win_fat32
	fi
	umount /mnt/$base 2>/dev/null ; sync
fi
}
#----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------
tester_lecture_ecriture_ntfs()
{
if ( test -e /tmp/erreur_montage_ntfs )
then
	rm -f /tmp/erreur_montage_ntfs
	# Sauvegarder tout de même
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/menu_273` " --ok-label "`cat $chemin_langue/Annuler`" --cancel-label "`cat $chemin_langue/menu_274`" \
	--menu "\n\n\Zb\Z1 `cat $chemin_langue/msgbox_30` ntfs\Z3 $base \Z1`cat $chemin_langue/menu_275` !!! " 10 72 0 \
	"" "`cat $chemin_langue/menu_276`"
	case $? in
	    0)  nettoyer_fin
	    	;;
	    1) 	;;
	    255) nettoyer_fin;;
	esac
fi
}
#----------------------------------------------------------------------------------------------------
version_oscar()
{
cp -f /usr/share/oscar/usr/numero_version_oscar /tmp/tempversion
perl -pi -e 's/Version OSCAR/;/g; s/du/;/g;' /tmp/tempversion
cut -f2 -d";" /tmp/tempversion > $partition_linux/oscar/version_oscar
rm -f /tmp/tempversion
}
#----------------------------------------------------------------------------------------------------
faire_fichiers_oscar_sauvegarde()
{
if ( test -e $partition_linux/oscar/partition_lvm )
then
	cp -f $partition_linux/oscar/partition_lvm /tmp/partition_lvm_cherchee
	echo "" > /tmp/partition_lvm_existe
fi
if ! ( test -e /tmp/partition_lvm_existe )
then
	mesure_base=/dev/$base
	taille_partition_de_base=taille_partition_$base
	sauvegarde_de_base=sauvegarde_$base
else
	cp -f /tmp/partition_lvm_cherchee /tmp/mesure_base_lvm
	perl -pi -e 's/-/}/g;' /tmp/mesure_base_lvm
	mesure_base="`cat /tmp/mesure_base_lvm` "
	rm -f /tmp/mesure_base_lvm
	taille_partition_de_base=taille_partition_`cat /tmp/partition_lvm_cherchee`
	sauvegarde_de_base=sauvegarde_`cat /tmp/partition_lvm_cherchee`
fi
if ( test -e $partition_linux/oscar/image_dar.1.dar )
then
	if ( test -e $partition_linux/oscar/$taille_partition_de_base )
	then
		grep -ci "," $partition_linux/oscar/$taille_partition_de_base > /tmp/nbr_valeurs_tailles
		nbr_valeurs_tailles=`cat /tmp/nbr_valeurs_tailles`
		rm -f /tmp/nbr_valeurs_tailles
		if [ "$nbr_valeurs_tailles" = "2" ]
		then
			cut -d"," -f3 $partition_linux/oscar/$taille_partition_de_base > /tmp/taux_compression_sauvegarde_precedente
			correcteur_compression=`cat /tmp/taux_compression_sauvegarde_precedente`
			rm -f /tmp/taux_compression_sauvegarde_precedente
		fi
	fi
fi

rm -f $partition_linux/oscar/taille_partition_*
# fdisk -s /dev/$base > $partition_linux/oscar/$taille_partition_de_base

#	# taille des fichiers avant sauvegarde : trop long
#	ls -sR /mnt/$base | grep total | awk '{print $2 "+" }' > /tmp/fichiers_decompresses_avant_sauvegarde	# par ligne : total valeur
#	perl -pi -e 's/ //g;' /tmp/fichiers_decompresses_avant_sauvegarde
#	fichiers_decompresses_avant_sauvegarde=`cat /tmp/fichiers_decompresses_avant_sauvegarde`1-1
#	rm -f /tmp/fichiers_decompresses_avant_sauvegarde

# taille des fichiers avant sauvegarde
# df -P | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses_avant_sauvegarde
df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses_avant_sauvegarde
fichiers_decompresses_avant_sauvegarde=`cat /tmp/fichiers_decompresses_avant_sauvegarde`
rm -f /tmp/fichiers_decompresses_avant_sauvegarde
fichiers_decompresses_avant_sauvegarde=$[$fichiers_decompresses_avant_sauvegarde]

# df -P | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $2}' > /tmp/taille_partition_base
echo "`cat /tmp/taille_partition_base`,$fichiers_decompresses_avant_sauvegarde" > $partition_linux/oscar/$taille_partition_de_base
if ( test -e /tmp/partition_lvm_existe )
then
	echo "`cat /tmp/partition_lvm_cherchee`" > $partition_linux/oscar/partition_lvm
fi

rm -f $partition_linux/oscar/sauvegarde_*
taille_partition=`cat /tmp/taille_partition_base`
cp -f $partition_linux/oscar/$taille_partition_de_base $partition_linux/oscar/$sauvegarde_de_base.$[$taille_partition/1024].Mo_$date

if ( test -e $partition_linux/oscar/date_de_sauvegarde )
then
	rm -f $partition_linux/oscar/date_de_sauvegarde
fi
echo "le $date" > $partition_linux/oscar/date_de_sauvegarde
if ( test -e $partition_linux/oscar/partition_sauvegardee )
then
	rm -f $partition_linux/oscar/partition_sauvegardee
fi
echo "$base" > $partition_linux/oscar/partition_sauvegardee
version_oscar

if ! ( test -e /tmp/partition_lvm_existe ) ### sauvegarder le mbr et sf
then
	numero_sd=`expr substr $base 4 3`
	disque=`expr substr $base 1 3`       		#sda
	# ligne suivante inutile avec parted
	# id_type=`sfdisk /dev/$disque -c $numero_sd 2>/dev/null`
	dd if=/dev/$disque of=$partition_linux/oscar/table_partitions.mbr count=1 bs=512 2>/dev/null
	# sfdisk -d /dev/$disque > $partition_linux/oscar/table_partitions.sf 2>/dev/null
	echo "$disque" > /tmp/disque_table_sauvegarder_sf
	runme sauver_table_partition_sf
	cp -f /tmp/disque_table_sauvegarder_sf $partition_linux/oscar/table_partitions.sf
	rm -f /tmp/disque_table_sauvegarder_sf
	echo "$disque" > $partition_linux/oscar/disque_boot	# sda
fi

if ! ( test -e $partition_linux/oscar/commentaire_oscar.txt )
then
	if ( test -e /tmp/temp_commentaire.txt )
	then
		cp -f /tmp/temp_commentaire.txt $partition_linux/oscar/commentaire_oscar.txt
		rm -f /tmp/temp_commentaire.txt
	fi
fi

texte_ecrire="`cat $partition_linux/oscar/commentaire_oscar.txt` "
}
#----------------------------------------------------------------------------------------------------
faire_de_la_place()
{
rm -f $partition_linux/oscar/image.partimage.*  # s'il y en a faire de la place !
rm -f $partition_linux/oscar/image.ntfs.*
rm -f $partition_linux/oscar/image_dar.*
rm -f $partition_linux/oscar/image_fsa.*

###   supprimer les fichiers numero de poste
rm -f $partition_linux/oscar/oscar.bat
rm -f $partition_linux/oscar/oscar_modifstartup_nom.reg
rm -f $partition_linux/oscar/fin_numero_poste_oscar.reg
rm -f $partition_linux/oscar/demarre_oscar/fin_numero_poste_oscar.bat
rm -f $partition_linux/oscar/partition_oscar
rm -f $partition_linux/oscar/liste_postes_sysprep

rm -f $partition_linux/oscar/table_partitions.mbr
rm -f $partition_linux/oscar/table_partitions.sf
}
#----------------------------------------------------------------------------------------------------
controle_place_disponible_sur_oscar()
{
	# controle de la place sur linux :
	
	# taille disponible
		#	# taille utilisee linux
		#	ls -sR /mnt/$repertoire | grep total | awk '{print $2 "+" }' > /tmp/fichiers_sur_linux	# par ligne : total valeur
		#	perl -pi -e 's/ //g;' /tmp/fichiers_sur_linux
		#	taille_utilisee_linux=`cat /tmp/fichiers_sur_linux`1-1
		#	taille_utilisee_linux=$[$taille_utilisee_linux]
		#	rm -f /tmp/fichiers_sur_base
		#	taille_utilisee_linux=$[$taille_utilisee_linux/1024]
		#	# taille partition linux
		#	sfdisk /dev/$repertoire -s > /tmp/taille_partition_linux 2>/dev/null
		#	taille_linux=`cat /tmp/taille_partition_linux`
		#	taille_linux=$[$taille_linux]
		#	taille_linux=$[$taille_linux/1024]
		#	rm -f /tmp/taille_partition_linux
		#	taille_disponible_linux=$[$taille_linux-$taille_utilisee_linux]
		
	taille_disponible_linux=`df -P -m | grep /dev/$repertoire | tail -n 1 | awk '{print $4}'`
	taille_disponible_linux=$[$taille_disponible_linux]
	
	# taille de suppression de sauvegarde :
	#	ls -sR $partition_linux/oscar | grep total | awk '{print $2 "+" }' > /tmp/fichiers_oscar_sur_linux	# par ligne : total valeur
	#	perl -pi -e 's/ //g;' /tmp/fichiers_oscar_sur_linux
	#	taille_sauvegarde_a_supprimer=`cat /tmp/fichiers_oscar_sur_linux`1-1
	#	taille_sauvegarde_a_supprimer=$[$taille_sauvegarde_a_supprimer]
	#	rm -f /tmp/fichiers_oscar_sur_linux
	#	taille_sauvegarde_a_supprimer=$[$taille_sauvegarde_a_supprimer/1024]
	
	# taille de suppression de sauvegarde :
		du -m $partition_linux/oscar > /tmp/taille_sauvegarde_a_supprimer
		perl -pi -e 's/oscar\//_rien_du_tout_/g;' /tmp/taille_sauvegarde_a_supprimer
		grep -i "/oscar" /tmp/taille_sauvegarde_a_supprimer | tail -n 1 | awk '{print $1}'  > /tmp/taille_sauvegarde_a_supprimer1
		taille_sauvegarde_a_supprimer=`cat /tmp/taille_sauvegarde_a_supprimer1`
		taille_sauvegarde_a_supprimer=$[$taille_sauvegarde_a_supprimer]
		rm -f /tmp/taille_sauvegarde_a_supprimer
		rm -f /tmp/taille_sauvegarde_a_supprimer1

	taille_disponible_linux=$[$taille_disponible_linux+$taille_sauvegarde_a_supprimer]
	
	# taille utilisee base
	#	ls -sR /mnt/$base | grep total | awk '{print $2 "+" }' > /tmp/fichiers_sur_base	# par ligne : total valeur
	#	perl -pi -e 's/ //g;' /tmp/fichiers_sur_base
	#	taille_utilisee_base=`cat /tmp/fichiers_sur_base`1-1
	#	rm -f /tmp/fichiers_sur_base
	#	taille_utilisee_base=$[$taille_utilisee_base]
	#	taille_utilisee_base=$[$taille_utilisee_base/1024]
	
	# taille utilisee base
	taille_utilisee_base=`df -P -m | grep /mnt/$base | tail -n 1 | awk '{print $3}'`
	taille_utilisee_base=$[$taille_utilisee_base]
	
	# enlever la compression soit 16% :
	taille_retiree_par_compression_base=$[$taille_utilisee_base/$valeur_pourcentage_a_enlever]
	taille_utilisee_base=$[$taille_utilisee_base-$taille_retiree_par_compression_base]
	
	controle_place=$[$taille_disponible_linux-$taille_utilisee_base]
	signe_negatif=`expr substr $controle_place 1 1`

	if [ "$signe_negatif" = "-" ]
	then	# taille libre trop petite sur la partition OSCAR
		dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
		--title " `cat $chemin_langue/DESOLE` " --ok-label "`cat $chemin_langue/Quitter`" \
		--msgbox "\n\n\Zb   `cat $chemin_langue/msgbox_79`\Z2 $repertoire \Z1!!!" 10 67
		echo "" > /tmp/sortir
		return
	fi
}
#----------------------------------------------------------------------------------------------------
diminuer_image_sur_ntfs()
{
# diminuer l'image :
rm -f /mnt/$base/pagefile.sys
rm -f /mnt/$base/hiberfil.sys
rm -rf /mnt/$base/System\ Volume\ Information
if ! ( test -e /mnt/$base/Windows/System32/oscar_down.exe )
then
	if ( test -e /mnt/$base/Windows/System32/shutdown.exe )
	then
		cp -f /mnt/$base/Windows/System32/shutdown.exe /mnt/$base/Windows/System32/oscar_down.exe
	fi
fi
}
#----------------------------------------------------------------------------------------------------
enlever_fichiers_inutiles_linux()
{
rm -fR sys/*
rm -fR proc/*
rm -fR lost+found/*
}
#----------------------------------------------------------------------------------------------------
copier_fichiers_partition_demarrage_vers_ntfs()
{
numero_partition_sd_demarrage=`expr substr $base 4 6`
numero_partition_win_sys=$[$numero_partition_sd_demarrage+1]
partition_win_sys=$disque_sd_demarrage$numero_partition_win_sys

echo "ntfs" > /tmp/besoin_type
echo "$partition_win_sys" > /tmp/monter_partition
runme autoriser_monter_partition_oscar
rm -f /tmp/monter_partition
rm -f /tmp/besoin_type

cp -fr /mnt/$base/* /mnt/$partition_win_sys/
umount /mnt/$base 2>/dev/null ; sync
umount /mnt/$partition_win_sys 2>/dev/null ; sync
}
#----------------------------------------------------------------------------------------------------
sauvegarde_fsa()
{
rm -f /tmp/sortie_fin_sauvegarde_fsa
rm -f /tmp/affichage_evolution_fsa

disque_sd_demarrage=non_demarrage
type_dell_utility=
grep -i $base /tmp/fichier_disque_dur | grep -ci diag > /tmp/nb_partition_diag
nb_partition_diag=`cat /tmp/nb_partition_diag`
rm -f /tmp/nb_partition_diag
if [ "$nb_partition_diag" = "1" ] # partition diag
then # partition dell utility car 'diag' avec parted
	grep -i $base /tmp/fichier_disque_dur | grep -ci ntfs > /tmp/nb_partition_ntfs_diag
	nb_partition_ntfs_diag=`cat /tmp/nb_partition_ntfs_diag`
	rm -f /tmp/nb_partition_ntfs_diag
	if [ "$nb_partition_ntfs_diag" = "1" ] # partition ntfs diag
	then # partition dell utility ou 'ntfs' et 'diag' au lieu de '27' avec parted
		type_dell_utility=ntfs_diag
		# copier les fichiers de cette partition WinRE dans la partition systeme Windows
		disque_sd_demarrage=`expr substr $base 1 3`
		# sfdisk -d /dev/$disque_sd_demarrage > /tmp/table_partition_WinRE 2>/dev/null
		echo "$disque_sd_demarrage" > /tmp/disque_table_sauvegarder_sf
		runme sauver_table_partition_sf
		cp -f /tmp/disque_table_sauvegarder_sf /tmp/table_partition_WinRE
		rm -f /tmp/disque_table_sauvegarder_sf
		cp -f /tmp/table_partition_WinRE /tmp/table_partition_WinRE1
		cp -f /tmp/table_partition_WinRE /tmp/teste_disque_gpt
		runme tester_disque_gpt
		teste_disque_gpt=`cat /tmp/teste_disque_gpt`
		rm -f /tmp/teste_disque_gpt
		if [ "$teste_disque_gpt" = non_gpt ] # si ntfs diag ne rien faire
		then # sfdisk
			perl -pi -e 's/Id=27/Id=7/g;' /tmp/table_partition_WinRE1
		fi
		# sfdisk -f /dev/$disque_sd_demarrage < /tmp/table_partition_WinRE1 1>/dev/null 2>/dev/null
		echo "$disque_sd_demarrage" > /tmp/disque_installer_table_sf
		cp -f /tmp/table_partition_WinRE1 /tmp/fichier_installer_table_sf
		runme installer_table_partition_sf 1>/dev/null 2>/dev/null
		sleep 2
		runme formater_ligne_partitions_vfat_gpt
		rm -f /tmp/table_partition_WinRE1
		echo "ntfs" > /tmp/besoin_type
		echo "$base" > /tmp/monter_partition
		runme autoriser_monter_partition_oscar
		copier_fichiers_partition_demarrage_vers_ntfs
	else
		# partition dell utility non ntfs soit 'fat32' ou autre et 'diag' au lieu de 'de' avec parted
		type_dell_utility=fat32_diag
		disque_sd_demarrage=`expr substr $base 1 3`
		# sfdisk -d /dev/$disque_sd_demarrage > /tmp/table_partition_dell 2>/dev/null
		echo "$disque_sd_demarrage" > /tmp/disque_table_sauvegarder_sf
		runme sauver_table_partition_sf
		cp -f /tmp/disque_table_sauvegarder_sf /tmp/table_partition_dell
		cp -f /tmp/table_partition_dell /tmp/table_partition_dell1
		cp -f /tmp/disque_table_sauvegarder_sf /tmp/teste_disque_gpt
		rm -f /tmp/disque_table_sauvegarder_sf
		runme tester_disque_gpt
		teste_disque_gpt=`cat /tmp/teste_disque_gpt`
		rm -f /tmp/teste_disque_gpt
		if [ "$teste_disque_gpt" = non_gpt ] # si ntfs diag il semble ne rien faire
		then # sfdisk
			perl -pi -e 's/Id=de/Id=4/g;' /tmp/table_partition_dell1
		fi
		# sfdisk -f /dev/$disque_sd_demarrage < /tmp/table_partition_dell1 1>/dev/null 2>/dev/null
		echo "$disque_sd_demarrage" > /tmp/disque_installer_table_sf
		cp -f /tmp/table_partition_dell1 /tmp/fichier_installer_table_sf
		runme installer_table_partition_sf 1>/dev/null 2>/dev/null
		sleep 2
		runme formater_ligne_partitions_vfat_gpt
		mount /dev/$base /mnt/$base 2>/dev/null
		if ! ( test -e $partition_linux/oscar/dell_utility_$base )
		then
			mkdir $partition_linux/oscar/dell_utility_$base
		fi
	
		cp -fr /mnt/$base/* $partition_linux/oscar/dell_utility_$base/
		umount /mnt/$base 2>/dev/null ; sync
		cp -f /tmp/table_partition_dell /tmp/table_partition_dell1
		if [ "$teste_disque_gpt" = non_gpt ] # si diag il semble ntfs ne rien faire
		then # sfdisk
			perl -pi -e 's/Id=de/Id=83/g;' /tmp/table_partition_dell1
		fi
		# sfdisk -f /dev/$disque_sd_demarrage < /tmp/table_partition_dell1 1>/dev/null 2>/dev/null
		echo "$disque_sd_demarrage" > /tmp/disque_installer_table_sf
		cp -f /tmp/table_partition_dell1 /tmp/fichier_installer_table_sf
		runme installer_table_partition_sf 1>/dev/null 2>/dev/null
		sleep 2
		runme formater_ligne_partitions_vfat_gpt
		rm -f /tmp/table_partition_dell1
		mkfs.ext4 -Fq /dev/$base 2>/dev/null 1>/dev/null
		mount /dev/$base /mnt/$base
		cp -fr $partition_linux/oscar/dell_utility_$base/* /mnt/$base
		copier_fichiers_partition_demarrage_vers_ntfs
	fi
fi

if ! ( test -e /tmp/partition_lvm_existe )
then
	fsarchiver -j2 -ov savefs -s $grandeur_fichiers_sauvegarde $partition_linux/oscar/image_fsa.fsa /dev/$base  1>/dev/null 2>/tmp/affichage_evolution_fsa
	echo $? > /tmp/sortie_fin_sauvegarde_fsa
else
	# demonter 2 fois pour mapper et scribe
	umount /dev/mapper/`cat /tmp/partition_lvm_cherchee` 2>/dev/null
	umount /dev/mapper/`cat /tmp/partition_lvm_cherchee` 2>/dev/null
	fsarchiver -j2 -ov savefs -s $grandeur_fichiers_sauvegarde $partition_linux/oscar/image_fsa.fsa /dev/mapper/`cat /tmp/partition_lvm_cherchee` 1>/dev/null 2>/tmp/affichage_evolution_fsa
	echo $? > /tmp/sortie_fin_sauvegarde_fsa
fi
sortie_fin_sauvegarde_fsa=`cat /tmp/sortie_fin_sauvegarde_fsa`
if [ "$type_dell_utility" = fat32_diag ] # 'de'
then
	umount /mnt/$base 2>/dev/null
	cp -f /tmp/table_partition_dell /tmp/table_partition_dell1
	if [ "$teste_disque_gpt" = non_gpt ] # si diag semble ne rien faire
	then # sfdisk
		perl -pi -e 's/Id=de/Id=c/g;' /tmp/table_partition_dell1
	fi
	# sfdisk -f /dev/$disque_sd_demarrage < /tmp/table_partition_dell1 1>/dev/null 2>/dev/null
	echo "$disque_sd_demarrage" > /tmp/disque_installer_table_sf
	cp -f /tmp/table_partition_dell1 /tmp/fichier_installer_table_sf
	runme installer_table_partition_sf 1>/dev/null 2>/dev/null
	sleep 2
	runme formater_ligne_partitions_vfat_gpt
	mkdosfs -vF 32 /dev/$repertoire 2>/dev/null 1>/dev/null
	mount /dev/$base /mnt/$base 2>/dev/null
	if ( test -e $partition_linux/oscar/dell_utility_$base )
	then
		cp -fr $partition_linux/oscar/dell_utility_$base/* /mnt/$base/
	fi
	umount /mnt/$base 2>/dev/null ; sync
	# sfdisk -f /dev/$disque_sd_demarrage < /tmp/table_partition_dell 1>/dev/null 2>/dev/null
	echo "$disque_sd_demarrage" > /tmp/disque_installer_table_sf
	cp -f /tmp/table_partition_dell /tmp/fichier_installer_table_sf
	runme installer_table_partition_sf 1>/dev/null 2>/dev/null
	sleep 2
	runme formater_ligne_partitions_vfat_gpt
	rm -f /tmp/table_partition_dell1
elif [ "$type_dell_utility" = ntfs_diag ] # '27'
then
	umount /mnt/$base 2>/dev/null ; sync
	# sfdisk -f /dev/$disque_sd_demarrage < /tmp/table_partition_WinRE 1>/dev/null 2>/dev/null
	echo "$disque_sd_demarrage" > /tmp/disque_installer_table_sf
	cp -f /tmp/table_partition_WinRE /tmp/fichier_installer_table_sf
	runme installer_table_partition_sf 1>/dev/null 2>/dev/null
	sleep 2
	runme formater_ligne_partitions_vfat_gpt
fi
rm -f /tmp/table_partition_dell
rm -f /tmp/table_partition_WinRE
}
#----------------------------------------------------------------------------------------------------
sauvegarde_dar()
{
# dar -c $partition_linux/oscar/image_dar -s "$grandeur_fichiers_sauvegarde"M -z2 -v -R  /mnt/$base -P "sys/*" -P "proc/*" -P "lost+found/*"
dar -c $partition_linux/oscar/image_dar -s "$grandeur_fichiers_sauvegarde"M -z1 -R /mnt/$base 1>/tmp/sortie_fin_sauvegarde
}
#----------------------------------------------------------------------------------------------------
sauvegarde_ntfs()
{
rm -f /tmp/sortie_fin_sauvegarde_ntfsclone
ntfsclone --save-image -o - /dev/$evms_oscar$base 2>/tmp/sortie_ntfsclone | gzip -c | split -b "$grandeur_fichiers_sauvegarde"m -d - oscar/image.ntfs.
echo $? > /tmp/sortie_fin_sauvegarde_ntfsclone
erreur=`cat /tmp/sortie_fin_sauvegarde_ntfsclone`
if ! [ "$erreur" = "0" ]
then	# des erreurs
	echo
	echo -e "`cat $chemin_langue/boucle_2`"
	echo
	read p
	echo "" > /tmp/sortir
	exit
fi
}
#----------------------------------------------------------------------------------------------------
verification_pour_ntfsclone()
{
# dans /tmp/sortie_fin_sauvegarde_ntfsclone il y a le code du resultat 0 si OK sinon autre
if ( test -e /tmp/sortie_fin_sauvegarde_ntfsclone )
then
	valeur_fin_sauvegarde=1
	grep -ci "0" /tmp/sortie_fin_sauvegarde_ntfsclone > /tmp/valeur_fin_sauvegarde	# OK fin de sauvegarde
	test_valeur_fin_sauvegarde=`cat /tmp/valeur_fin_sauvegarde`
	rm -f /tmp/sortie_fin_sauvegarde_ntfsclone
	rm -f /tmp/valeur_fin_sauvegarde
	if ! [ "$test_valeur_fin_sauvegarde" = "1" ]
	then
		echo "\n\033[1;31m  `cat $chemin_langue/ERREUR` : ntfsclone ...\n" > /tmp/sortie_fin_sauvegarde
		echo "" > /tmp/erreur_ntfsclone
	else
		echo "\n\033[1;31m  ntfsclone : 100% \n" > /tmp/sortie_fin_sauvegarde
		pourcentage_compression=100
		rm -f /tmp/sortie_ntfsclone
	fi
else
	grep -i "percent comp" /tmp/sortie_ntfsclone > /tmp/affiche_progression
	# afficher la derniere ligne
	awk '{ ligne=$0 } END { print ligne }' /tmp/affiche_progression > /tmp/affiche_progression1
perl -pi -e 's/percent completed/{/g; s/ /}/g; s/\./_/g; s/}}/
/g; s/}/
Z/g; ' /tmp/affiche_progression1
	grep -v "Z{" /tmp/affiche_progression1 > /tmp/affiche_progression
	cut -d "_" -f1 /tmp/affiche_progression > /tmp/affiche_progression1
	# afficher la derniere ligne
	awk '{ ligne=$0 } END { print ligne }' /tmp/affiche_progression1 > /tmp/affiche_progression
	perl -pi -e 's/Z//g;' /tmp/affiche_progression
	pourcentage_compression=`cat /tmp/affiche_progression`
	pourcentage_compression=$[$pourcentage_compression]
	rm -f /tmp/affiche_progression
	rm -f /tmp/affiche_progression1
fi
}
#----------------------------------------------------------------------------------------------------
verification_pour_dar()
{
grep -ci "Total number of inode" /tmp/sortie_fin_sauvegarde > /tmp/fin_sauvegarde_dar
valeur_fin_sauvegarde=`cat /tmp/fin_sauvegarde_dar`
rm -f /tmp/fin_sauvegarde_dar

# taille des fichiers compresses
echo `ls -s $partition_linux/oscar/*.dar | awk '{print $1 "+" }'` > /tmp/fichiers_compresses
perl -pi -e 's/ //g;' /tmp/fichiers_compresses
taille_fichiers_compresses=`cat /tmp/fichiers_compresses`1-1
rm -f /tmp/fichiers_compresses
taille_fichiers_compresses=$[$taille_fichiers_compresses]

if [ "$valeur_fin_sauvegarde" != 1 ]
then
	fraction_compression=$[100*($taille_fichiers_compresses)/($taille_fichiers_avant_sauvegarde_corrigee)]
else
	fraction_compression=100
	# taux de compression multiplie par 100 :
	taux_compression_sauvegarde=$[100*$taille_fichiers_avant_sauvegarde/$taille_fichiers_compresses]
	echo "`cat $partition_linux/oscar/$taille_partition_de_base`,$taux_compression_sauvegarde" > $partition_linux/oscar/$taille_partition_de_base
fi
pourcentage_compression=$[$fraction_compression]
}
#----------------------------------------------------------------------------------------------------
verification_pour_fsa()
{
#	# taille des fichiers compresses
#	echo `ls -s $partition_linux/oscar/*_fsa* | awk '{print $1 "+" }'` > /tmp/fichiers_compresses
#	perl -pi -e 's/ //g;' /tmp/fichiers_compresses
#	taille_fichiers_compresses=`cat /tmp/fichiers_compresses`1-1
#	rm -f /tmp/fichiers_compresses
#	taille_fichiers_compresses=$[$taille_fichiers_compresses]

if ! ( test -e /tmp/sortie_fin_sauvegarde_fsa )
then
	#	fraction_compression=$[100*($taille_fichiers_compresses)/$taille_fichiers_avant_sauvegarde_corrigee]
	if ( test -e /tmp/affichage_evolution_fsa )
	then
		cp -f /tmp/affichage_evolution_fsa /tmp/affichage_evolution_fsa1
		tail -n -1 /tmp/affichage_evolution_fsa1 |  awk '{print $2}' > /tmp/affichage_evolution_fsa2
		cut -d"%" -f1 /tmp/affichage_evolution_fsa2 > /tmp/affichage_evolution_fsa1
		fraction_compression=`cat /tmp/affichage_evolution_fsa1`
	else
		fraction_compression=50
	fi

	rm -f /tmp/affichage_evolution_fsa1
	rm -f /tmp/affichage_evolution_fsa2
else
	valeur_fin_sauvegarde=1
	rm -f /tmp/sortie_fin_sauvegarde_fsa
	fraction_compression=100
	echo "\n\033[1;31m  `cat $chemin_langue/Sauvegarde` : 100% \n" > /tmp/sortie_fin_sauvegarde
	if [ "$type_dell_utility" = ntfs_diag ] || [ "$type_dell_utility" = fat32_diag ]
	then
		echo "\033[1;31m  `cat $chemin_langue/texte_47b`\033[1;m" > /tmp/sortie_fin_sauvegarde_demarrage
	fi
fi

pourcentage_compression=$fraction_compression
}
#----------------------------------------------------------------------------------------------------
boite_sauvegarde_dialog()
{
taille_fichiers_avant_sauvegarde_corrigee=$[100*$taille_fichiers_avant_sauvegarde/$correcteur_compression]
oui_ou_non_eteindre=`cat $chemin_langue/menu_266a`	# eteindre a la fin
if [ "$sauvegarde_pour_client_nfs" = "non" ]
then
	if [ "$type_sauvegarde" = "verifiee" ]
	then	# ne pas eteindre a la fin
		oui_ou_non_eteindre=`cat $chemin_langue/menu_267a`
	fi
fi

valeur_fin_sauvegarde=0
echo "$valeur_fin_sauvegarde" > /tmp/sortie_fin_sauvegarde
while [ "$valeur_fin_sauvegarde" != 1 ]
do
	sleep 4
	if ( test -e /tmp/sauve_diag )
	then
		verification_pour_ntfsclone
	elif ( test -e /tmp/sauve_fsa )
	then
		verification_pour_fsa
	else
		verification_pour_dar
	fi
	echo $pourcentage_compression
done | DIALOGRC="/etc/dialogmenu_bloque" dialog --colors\
	--backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/Sauvegarde` " \
	--gauge "\n\Zb\Z3  `cat $chemin_langue/texte_47` \Z2$base $texte_ecrire\Z3`cat $chemin_langue/sur` \Z1$repertoire 
	\n  \Zb\Z2`cat $chemin_langue/Taille` = $valeur_taille_mo Mo\n
	\n\Z1  --- $oui_ou_non_eteindre ---\Z1\n  `cat $chemin_langue/texte_47a`\n
	\n  `cat $chemin_langue/menu_74`\n\n  \Zb\Z2`cat $chemin_langue/Patience` ... " 14 90

echo -e "`cat /tmp/sortie_fin_sauvegarde`"
if [ "$type_dell_utility" = ntfs_diag ] || [ "$type_dell_utility" = fat32_diag ]
then
	echo -e "`cat /tmp/sortie_fin_sauvegarde_demarrage`"
	sleep 3
fi
rm -f /tmp/sortie_fin_sauvegarde_demarrage
rm -f /tmp/sortie_fin_sauvegarde
rm -f /tmp/affiche_progression
rm -f /tmp/affichage_evolution_fsa
if ( test -e /tmp/erreur_ntfsclone )
then
	rm -f /tmp/erreur_ntfsclone
	echo
	echo -e "  `cat $chemin_langue/boucle_2`"
	echo
	read p
	exit
fi
}
#----------------------------------------------------------------------------------------------------
bargraphe_sauvegarde()
{
cut -d"," -f2 $partition_linux/oscar/$taille_partition_de_base > /tmp/taille_fichiers_avant_sauvegarde
taille_fichiers_avant_sauvegarde=`cat /tmp/taille_fichiers_avant_sauvegarde`
valeur_taille_mo=$[$taille_fichiers_avant_sauvegarde/1024]
rm -f /tmp/taille_fichiers_avant_sauvegarde
pourcentage_compression=0
boite_sauvegarde_dialog
}
#----------------------------------------------------------------------------------------------------
sauve_avec_ntfsclone()
{
umount /mnt/$base 2>/dev/null ; sync
info_veille_sauve
if [ "$repertoire" = "" ]	# car demarrage par le poste
then
	etude_montage donner_partition_oscar_poste
	repertoire=`cat /tmp/partition_oscar_sur_poste`
	rm -f /tmp/partition_oscar_sur_poste
fi
echo -e "\033[1;33m `cat $chemin_langue/texte_47` \033[1;32m$base $texte_ecrire\033[1;34mNTFS \033[1;33m`cat $chemin_langue/sur` \033[1;31m$repertoire \033[1;33m..."

oui_ou_non_eteindre=`cat $chemin_langue/menu_266a`	# eteindre a la fin
if [ "$sauvegarde_pour_client_nfs" = "non" ]
then
	if [ "$type_sauvegarde" = "verifiee" ]
	then	# ne pas eteindre a la fin
		oui_ou_non_eteindre=`cat $chemin_langue/menu_267a`
	fi
fi
echo -e "\033[1;m `cat $chemin_langue/Taille` = $taille_fichiers_avant_sauvegarde Mo \033[1;31m --- $oui_ou_non_eteindre ---\033[1;31m"
echo

ntfsclone --save-image -o - /dev/$evms_oscar$base | gzip -c | split -b "$grandeur_fichiers_sauvegarde"m -d - oscar/image.ntfs.

# taux de compression multiplie par 100 :
echo `ls -s $partition_linux/oscar/*.ntfs.* | awk '{print $1 "+" }'` > /tmp/fichiers_compresses_apres_sauvegarde
perl -pi -e 's/ //g;' /tmp/fichiers_compresses_apres_sauvegarde
taille_fichiers_compresses_apres_sauvegarde=`cat /tmp/fichiers_compresses_apres_sauvegarde`1-1
rm -f /tmp/fichiers_compresses_apres_sauvegarde
taille_fichiers_compresses_apres_sauvegarde=$[$taille_fichiers_compresses_apres_sauvegarde]
taux_compression_sauvegarde=$[100*$fichiers_decompresses_avant_sauvegarde/$taille_fichiers_compresses_apres_sauvegarde]

echo "`cat $partition_linux/oscar/$taille_partition_de_base`,$taux_compression_sauvegarde" > $partition_linux/oscar/$taille_partition_de_base

echo "ntfs" > /tmp/besoin_type
echo "$base" > /tmp/monter_partition
runme autoriser_monter_partition_oscar
rm -f /tmp/monter_partition
rm -f /tmp/besoin_type
}
#----------------------------------------------------------------------------------------------------
cherche_base_lvm()
{
rm -f /tmp/partition_lvm_cherchee
rm -f /tmp/partition_lvm_existe
perl -pi -e 's/\/dev\///g;' /tmp/test_base_lvm
cp -f /tmp/test_base_lvm /tmp/nom_simple
grep -ci "/" /tmp/test_base_lvm > /tmp/nb_test_base_lvm
nb_test_base_lvm=`cat /tmp/nb_test_base_lvm`
rm -f /tmp/nb_test_base_lvm
if [ "$nb_test_base_lvm" != "0" ]
then
	# id_type=lvm
	# faire /tmp/partition_lvm_cherchee
	# perl -pi -e 's/\// | grep /g;' /tmp/test_base_lvm
	# echo "sfdisk -l 2>/dev/null | grep "`cat /tmp/test_base_lvm`:" > /tmp/test_base_lvm1" > /tmp/exec_nom
	# chmod +x /tmp/exec_nom
	# /tmp/exec_nom
	perl -pi -e 's/\//\-/g;' /tmp/test_base_lvm
	# cut -d":" -f2 /tmp/test_base_lvm1 > /tmp/partition_lvm_cherchee
	cp -f /tmp/test_base_lvm /tmp/partition_lvm_cherchee
	# rm -f /tmp/test_base_lvm1
	cp -f /tmp/nom_simple /tmp/partition_lvm_existe
fi
rm -f /tmp/test_base_lvm
}
#----------------------------------------------------------------------------------------------------
preparation_partition_sauvegarde()
{
if ! [ "$incrementer_fait" = "oui" ]
then
	incrementer_oui
	if ( test -e /tmp/sortir )
	then
		return
	fi
fi

if ! ( test -e /tmp/partition_lvm_existe )
then
	test_windows_en_fat32
#else
#	id_type=lvm
fi

date=$(date +%d-%m-%y)

# monter si client en nfs et demarrage cdrom
echo "$repertoire" > /tmp/monter_partition
runme autoriser_monter_partition_oscar
rm -f /tmp/monter_partition

## donner le chemin avec peut etre sur oscar installe sur le disque dur 
echo "$repertoire" > /tmp/linux_poste

runme verifier_partition_linux_oscar_sur_poste
linux_poste=`cat /tmp/linux_poste`
rm -f /tmp/linux_poste
if [ "$linux_poste" = "" ]
then
	partition_linux=
else
	partition_linux=$linux_poste
fi
## fin chemin oscar

if ! ( test -e $partition_linux/oscar )
then
	mkdir $partition_linux/oscar
fi

rm -f /tmp/monter_partition
echo "$base" > /tmp/monter_partition
runme autoriser_monter_partition_oscar_montage
nombpart=`cat /tmp/nombpart`

if ! [ "$nombpart" = 0 ]
then
	umount /mnt/$base 2>/dev/null ; sync
fi


if ( test -e /dev/evms/$base )
then
    evms_oscar="evms/"
else
    evms_oscar=
fi

echo  "$base" > /tmp/test_base_lvm
cherche_base_lvm

if ! ( test -e $partition_linux/oscar/commentaire_oscar.txt )
then
	if ! ( test -e /tmp/temp_commentaire.txt )
	then
		boite_premier_commentaire
		if ( test -e /tmp/sortir )
		then
		        return
		fi
	fi
fi
if [ "$repertoire" = "" ]	# car demarrage par le poste
then
	etude_montage donner_partition_oscar_poste
	repertoire=`cat /tmp/partition_oscar_sur_poste`
	rm -f /tmp/partition_oscar_sur_poste
fi
# cd $partition_linux/
}
#----------------------------------------------------------------------------------------------------
verifier_premiere_partition_boot_ntfs()
{
# sauvegarde ntfs
if ( test -e /mnt/$base/Windows ) || ( test -e /mnt/$base/WINDOWS ) || ( test -e /mnt/$base/WINNT )
then
	numero_partition_ntfs_sauvegardee=`expr substr $base 4 3`
	if [ "$numero_partition_ntfs_sauvegardee" = 2 ]
	then # verifier la taille de sda1 si moins que 2Go en ntfs
		nom_disque_base=`expr substr $base 1 3`
		partition_boot_devant_base=$nom_disque_base"1"
		# id_type_partition_boot_devant_base=`sfdisk /dev/$nom_disque_base -c 1 2>/dev/null`
		grep -i $partition_boot_devant_base /tmp/fichier_disque_dur > /tmp/type_partition_boot_devant_base

		# sfdisk -s /dev/$partition_boot_devant_base > /tmp/taille_partition_boot_devant_base 2>/dev/null
		# taille_partition_boot_devant_base=`cat /tmp/taille_partition_boot_devant_base`
		# rm -f /tmp/taille_partition_boot_devant_base
		echo "$partition_boot_devant_base" > /tmp/calcul_taille_partition_disque
		runme calcul_taille_partition_MB
		taille_partition_boot_devant_base=`cat /tmp/calcul_taille_partition_disque`
		rm -f /tmp/calcul_taille_partition_disque
		
		taille_partition_boot_devant_base=$[$taille_partition_boot_devant_base]
		taille_partition_boot_devant_base=$[$taille_partition_boot_devant_base/1000]
		controle_taille_partition_boot_devant_base=$[2000-$taille_partition_boot_devant_base]
		signe_negatif_boot=`expr substr $controle_taille_partition_boot_devant_base 1 1`
		if ! [ "$signe_negatif_boot" = "-" ]
		then	# partition plus petite que 2 Go
			if ! ( test -e /mnt/$partition_boot_devant_base )
			then
				mkdir /mnt/$partition_boot_devant_base
			fi
			grep -ci ntfs /tmp/type_partition_boot_devant_base > /tmp/nb_partition_boot_devant_base_ntfs
			nb_partition_boot_devant_base_ntfs=`cat /tmp/nb_partition_boot_devant_base_ntfs`
			rm -f /tmp/nb_partition_boot_devant_base_ntfs
			if [ "$nb_partition_boot_devant_base_ntfs" = "1" ] # partition ntfs ou diag '27' devant base 
			then # partition ntfs ou win RE
				# copier les fichiers de sda1 sur sda2
				echo "ntfs" > /tmp/besoin_type
				echo "$partition_boot_devant_base" > /tmp/monter_partition
				runme autoriser_monter_partition_oscar
				rm -f /tmp/monter_partition
				rm -f /tmp/besoin_type
				cp -fr /mnt/$partition_boot_devant_base/* /mnt/$base/
				umount /mnt/$partition_boot_devant_base ; sync
			else
				grep -ci fat32 /tmp/type_partition_boot_devant_base > /tmp/nb_partition_boot_devant_base_fat32_diag
				nb_partition_boot_devant_base_fat32_diag=`cat /tmp/nb_partition_boot_devant_base_fat32_diag`
				rm -f /tmp/nb_partition_boot_devant_base_fat32_diag
				if [ "$nb_partition_boot_devant_base_fat32_diag" = "1" ] # partition fat32 et diag 'de' devant base 
				then # partition dell utility
					mount /dev/$partition_boot_devant_base /mnt/$partition_boot_devant_base 2>/dev/null
					cp -fr /mnt/$partition_boot_devant_base/* /mnt/$base/
					umount /mnt/$partition_boot_devant_base 2>/dev/null ; sync
				fi
			fi
		rm -f /tmp/type_partition_boot_devant_base
		fi
	fi
fi
}
#----------------------------------------------------------------------------------------------------
sauvegarder()
{
if ! ( test -e /tmp/fichier_disque_dur )
then
	runme info_ddialog
fi
preparation_partition_sauvegarde
cd $partition_linux/
	grep -i $base /tmp/fichier_disque_dur | grep -ci ntfs > /tmp/nb_partition_ntfs
	nb_partition_ntfs=`cat /tmp/nb_partition_ntfs`
	rm -f /tmp/nb_partition_ntfs
	if [ "$nb_partition_ntfs" = "1" ] # partition ntfs
	then
		correcteur_compression=$[173]	# compression 1,73 pour ntfs
		echo "ntfs" > /tmp/besoin_type
		echo "$base" > /tmp/monter_partition
		runme autoriser_monter_partition_oscar
		rm -f /tmp/monter_partition
		rm -f /tmp/besoin_type
		tester_lecture_ecriture_ntfs
		diminuer_image_sur_ntfs
		controle_place_disponible_sur_oscar
		if ( test -e /tmp/sortir )
		then
		        return
		fi
		
		faire_fichiers_oscar_sauvegarde
		faire_de_la_place
		verifier_premiere_partition_boot_ntfs
		
		# taille des fichiers avant sauvegarde
		#	ls -sR /mnt/$base | grep total | awk '{print $2 "+" }' > /tmp/fichiers_avant_sauvegarde	# par ligne : total valeur
		#	perl -pi -e 's/ //g;' /tmp/fichiers_avant_sauvegarde
		#	taille_fichiers_avant_sauvegarde=`cat /tmp/fichiers_avant_sauvegarde`1-1
		#	rm -f /tmp/fichiers_decompresses_avant_sauvegarde
		#	taille_fichiers_avant_sauvegarde=$[$taille_fichiers_avant_sauvegarde]
		#	taille_fichiers_avant_sauvegarde=$[$taille_fichiers_avant_sauvegarde/1024]
		
		# taille des fichiers avant sauvegarde
		taille_fichiers_avant_sauvegarde=`df -P -m /mnt/$base | grep "$base" | tail -n 1 | grep -i "dev"  | awk '{print$3}'`
		taille_fichiers_avant_sauvegarde=$[taille_fichiers_avant_sauvegarde]
		
		if ! ( test -e /tmp/sauve_ntfs_dar )
		then
			# echo "" > /tmp/sauve_fsa
			if ! ( test -e /tmp/sauve_fsa )
			then
				echo "" > /tmp/sauve_diag
				if ( test -e /tmp/sauve_diag ) # impossible car ntfs non montee pour la restauration
				then
					umount /mnt/$base 2>/dev/null ; sync
					
					correcteur_compression=$[178]	# compression 1,78 pour ntfs avec ntfsclone
					sauvegarde_ntfs &
					bargraphe_sauvegarde
					rm -f /tmp/sauve_diag
					
					echo "ntfs" > /tmp/besoin_type
					echo "$base" > /tmp/monter_partition
					runme autoriser_monter_partition_oscar
					rm -f /tmp/monter_partition
					rm -f /tmp/besoin_type
					
					# taux de compression multiplie par 1 :
					echo `ls -s $partition_linux/oscar/*.ntfs.* | awk '{print $1 "+" }'` > /tmp/fichiers_compresses_apres_sauvegarde
					perl -pi -e 's/ //g;' /tmp/fichiers_compresses_apres_sauvegarde
					taille_fichiers_compresses_apres_sauvegarde=`cat /tmp/fichiers_compresses_apres_sauvegarde`1-1
					rm -f /tmp/fichiers_compresses_apres_sauvegarde
					taille_fichiers_compresses_apres_sauvegarde=$[$taille_fichiers_compresses_apres_sauvegarde]
					
					# taille des fichiers avant sauvegarde
					#	ls -sR /mnt/$base | grep total | awk '{print $2 "+" }' > /tmp/fichiers_decompresses	# par ligne : total valeur
					#	perl -pi -e 's/ //g;' /tmp/fichiers_decompresses
					#	taille_fichiers_decompresses=`cat /tmp/fichiers_decompresses`1-1
					#	rm -f /tmp/fichiers_decompresses
					
					# taille des fichiers avant sauvegarde
					# df -P | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
					df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
					taille_fichiers_decompresses=`cat /tmp/fichiers_decompresses`
					rm -f /tmp/fichiers_decompresses
					taille_fichiers_decompresses=$[$taille_fichiers_decompresses]
					
				
					# taux de compression multiplie par 100 :
					taux_compression_sauvegarde=$[100*$taille_fichiers_decompresses/$taille_fichiers_compresses_apres_sauvegarde]
				
					echo "`cat /tmp/taille_partition_base`,$taille_fichiers_decompresses,$taux_compression_sauvegarde" > $partition_linux/oscar/$taille_partition_de_base
				else	# n'est plus utilise ancien
					sauve_avec_ntfsclone
				fi
			else # avec /tmp/sauve_fsa
				umount /mnt/$base 2>/dev/null ; sync
				correcteur_compression=$[182]	# compression a mesurer 1,82 pour ntfs avec fsa
				sauvegarde_fsa &
				bargraphe_sauvegarde
				
				echo "ntfs" > /tmp/besoin_type
				echo "$base" > /tmp/monter_partition
				runme autoriser_monter_partition_oscar
				rm -f /tmp/monter_partition
				rm -f /tmp/besoin_type
				
				# taux de compression multiplie par 1 :
				echo `ls -s $partition_linux/oscar/*_fsa* | awk '{print $1 "+" }'` > /tmp/fichiers_compresses_apres_sauvegarde
				perl -pi -e 's/ //g;' /tmp/fichiers_compresses_apres_sauvegarde
				taille_fichiers_compresses_apres_sauvegarde=`cat /tmp/fichiers_compresses_apres_sauvegarde`1-1
				rm -f /tmp/fichiers_compresses_apres_sauvegarde
				taille_fichiers_compresses_apres_sauvegarde=$[$taille_fichiers_compresses_apres_sauvegarde]
				
				# taille des fichiers avant sauvegarde
				# df -P | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
				df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
				taille_fichiers_decompresses=`cat /tmp/fichiers_decompresses`
				rm -f /tmp/fichiers_decompresses
				taille_fichiers_decompresses=$[$taille_fichiers_decompresses]
				
				# taux de compression multiplie par 100 :
				taux_compression_sauvegarde=$[100*$taille_fichiers_decompresses/$taille_fichiers_compresses_apres_sauvegarde]
				
				echo "`cat /tmp/taille_partition_base`,$taille_fichiers_decompresses,$taux_compression_sauvegarde" > $partition_linux/oscar/$taille_partition_de_base
			fi
			rm -f /tmp/sauve_fsa
		else # avec /tmp/sauve_ntfs_dar
			# ici les acl ne sont pas sauvegardes
			sauvegarde_dar &
			bargraphe_sauvegarde
		fi
		# nettoyer desktop.ini intempestif (deja fait dans restaure_dar)
		rm -f /mnt/$base/Documents\ and\ Settings/All\ Users/Menu\ Démarrer/Programmes/Démarrage/desktop.ini
		rm -f /mnt/$base/ProgramData/Microsoft/Windows/Start\ Menu/Programs/Startup/desktop.ini

		
		# tester_sysprep newsid et oscar_deploie:
		if ( test -e /mnt/$base/sysprep/sysprep_var.inf ) || ( test -e /mnt/$base/Windows/System32/sysprep/sysprep_var.xml )
		then
			if ( test -e /mnt/$base/sysprep/sysprep_oscar.inf ) || ( test -e /mnt/$base/Windows/System32/sysprep/sysprep_oscar.xml )
			then
				le=`cat $chemin_langue/le`
				echo "$le $date;sysprep" > $partition_linux/oscar/date_de_sauvegarde
				if ( test -e /mnt/$base/Windows/System32/sysprep/sysprep_var.xml )
				then
					cp -f /mnt/$base/Windows/System32/sysprep/sysprep_var.xml /tmp/sysprepvar_temp
					cp -f /mnt/$base/Windows/System32/sysprep/sysprep_var.xml /tmp/sysprepvar_temp_sysprep_var.xml
					sysprep fichier_correspondance_oscar_win
					rm -f /tmp/sysprepvar_temp_sysprep_var.xml
					# cp -f /tmp/sysprepvar_temp_sysprep_var.xml /mnt/$base/Windows/System32/sysprep/sysprep_var.xml
					rm -f /mnt/$base/Windows/System32/sysprep/sysprep_var.xml
					rm -f /mnt/$base/Windows/System32/sysprep/oscar_var.xml
				elif ( test -e /mnt/$base/sysprep/sysprep_var.inf )
				then
					cp -f /mnt/$base/sysprep/sysprep_var.inf /tmp/sysprepvar_temp
					cp -f /mnt/$base/sysprep/sysprep_var.inf /tmp/sysprepvar_temp_sysprep_var.inf
					sysprep fichier_correspondance_oscar_win
					rm -f /tmp/sysprepvar_temp_sysprep_var.inf
					# cp -f /tmp/sysprepvar_temp_sysprep_var.inf /mnt/$base/sysprep/sysprep_var.inf
					rm -f /mnt/$base/sysprep/sysprep_var.inf
					rm -f /mnt/$base/sysprep/sysprep_oscar.inf
				fi
				cp -f /tmp/liste_postes_sysprep $partition_linux/oscar/
				rm -f /tmp/liste_postes_sysprep
			fi
		elif ( test -e /mnt/$base/Windows/oscar_deploie/oscar_var.txt ) || ( test -e /mnt/$base/WINDOWS/oscar_deploie/oscar_var.txt )
		then
			le=`cat $chemin_langue/le`
			echo "$le $date;oscar_deploie" > $partition_linux/oscar/date_de_sauvegarde
			if ( test -e /mnt/$base/Windows/oscar_deploie/oscar_var.txt )
			then
				cp -f /mnt/$base/Windows/oscar_deploie/oscar_var.txt /tmp/sysprepvar_temp
			elif ( test -e /mnt/$base/WINDOWS/oscar_deploie/oscar_var.txt )
			then
				cp -f /mnt/$base/WINDOWS/oscar_deploie/oscar_var.txt /tmp/sysprepvar_temp
			fi
			sysprep fichier_correspondance_oscar_win
			rm -f /mnt/$base/Windows/oscar_deploie/oscar_var.txt
			rm -f /mnt/$base/WINDOWS/oscar_deploie/oscar_var.txt
			cp -f /tmp/liste_postes_sysprep $partition_linux/oscar/
			rm -f /tmp/liste_postes_sysprep
		elif ( test -e /mnt/$base/oscar/newsid.exe )
		then
			le=`cat $chemin_langue/le`
			echo "$le $date;newsid" > $partition_linux/oscar/date_de_sauvegarde
		fi
		umount /mnt/$base 2>/dev/null ; sync
	#    else 	# autre type de partition
	#	sleep 1
	#	partimage -z0 -o -d -b -f3 -V$grandeur_fichiers_sauvegarde save /dev/$base oscar/image.partimage

	else	# autre type de partition
		if ! ( test -e /mnt/$base )
		then
			mkdir -p /mnt/$base
		fi
		
		correcteur_compression=$[181]	# pour linux avec dar 181 correcteur_compression ancien 2,34 soit 234 
		grep -i $base /tmp/fichier_disque_dur | grep -c Linux > /tmp/nb_partition_linux
		nb_partition_linux=`cat /tmp/nb_partition_linux`
		rm -f /tmp/nb_partition_linux
		if [ "$nb_partition_linux" = "1" ] # partition linux non swap
		then # partition linux non swap
			fsck /dev/$evms_oscar$base -N > /tmp/fs_type
			grep -ci "reiserfs" /tmp/fs_type > /tmp/nb_fstype
    			valeur=`cat /tmp/nb_fstype`
            		if [ "$valeur" = "1" ] # partition ReiserFS
		        then
				mount -t reiserfs /dev/$evms_oscar$base /mnt/$base
				controle_place_disponible_sur_oscar
				if ( test -e /tmp/sortir )
				then
				        return
				fi
				faire_fichiers_oscar_sauvegarde
				faire_de_la_place
		        else
        		        grep -ci "xfs" /tmp/fs_type > /tmp/nb_fstype
	        		valeur=`cat /tmp/nb_fstype`
		                if [ "$valeur" = "1" ] # partition XFS
    			        then
                        	        mount -t xfs /dev/$evms_oscar$base /mnt/$base
                        	        controle_place_disponible_sur_oscar
					if ( test -e /tmp/sortir )
					then
					        return
					fi
					faire_fichiers_oscar_sauvegarde
					faire_de_la_place
                        	else
                        		grep -ci "jfs" /tmp/fs_type > /tmp/nb_fstype
	        			valeur=`cat /tmp/nb_fstype`
		                	if [ "$valeur" = "1" ] # partition JFS
    			        	then
	                        	        mount -t jfs /dev/$evms_oscar$base /mnt/$base
	                        	        controle_place_disponible_sur_oscar
						if ( test -e /tmp/sortir )
						then
						        return
						fi
						faire_fichiers_oscar_sauvegarde
						faire_de_la_place
					else
						grep -ci "ext4" /tmp/fs_type > /tmp/nb_fstype
		        			valeur=`cat /tmp/nb_fstype`
			                	if [ "$valeur" = "1" ] # partition ext4
	    			        	then
							mount -t ext4 /dev/$evms_oscar$base /mnt/$base
							controle_place_disponible_sur_oscar
							if ( test -e /tmp/sortir )
							then
							        return
							fi
							faire_fichiers_oscar_sauvegarde
							faire_de_la_place
						else
							grep -ci "reiser4" /tmp/fs_type > /tmp/nb_fstype
			            			valeur=`cat /tmp/nb_fstype`
				            		if [ "$valeur" = "1" ] # partition ReiserFS
			        		        then
					                    	mount -t reiser4 /dev/$evms_oscar$base /mnt/$base
					                    	controle_place_disponible_sur_oscar
								if ( test -e /tmp/sortir )
								then
								        return
								fi
								faire_fichiers_oscar_sauvegarde
								faire_de_la_place
			    			        else  # autres cas ext3 et ext2
            		            				mount -t ext3 /dev/$evms_oscar$base /mnt/$base
            		            				controle_place_disponible_sur_oscar
								if ( test -e /tmp/sortir )
								then
								        return
								fi
								faire_fichiers_oscar_sauvegarde
								faire_de_la_place
            		            			fi
            		            		fi
            		            	fi
            			fi
    			fi
			rm -f /tmp/fs_type
			rm -f /tmp/nb_fstype
                else    # partition  autre et lvm
			if ! ( test -e /tmp/partition_lvm_existe )
			then
				mount /dev/$base /mnt/$base 1>/dev/null 2>/dev/null
			else
				mount /dev/mapper/`cat /tmp/partition_lvm_cherchee` /mnt/$base 1>/dev/null 2>/dev/null
			fi
			controle_place_disponible_sur_oscar
			if ( test -e /tmp/sortir )
			then
			        return
			fi
			faire_fichiers_oscar_sauvegarde
			faire_de_la_place
                fi

		enlever_fichiers_inutiles_linux
		rm -f /tmp/sauve_fsa
		
		## remettre le test suivant pour sauvegarde en dar Linux
		grep -i $base /tmp/fichier_disque_dur | grep -ci fat32 > /tmp/nb_partition_fat32
		nb_partition_fat32=`cat /tmp/nb_partition_fat32`
		rm -f /tmp/nb_partition_fat32
		if [ "$nb_partition_fat32" = "1" ] # partition fat32
               	then
			# sauvegarder vfat avec dar
			correcteur_compression=$[140]	# pour vfat avec dar 140 correcteur_compression
			rm -f /tmp/sauve_fsa
			sauvegarde_dar &
			bargraphe_sauvegarde
		else
			echo "" > /tmp/sauve_fsa
			if ! ( test -e /tmp/sauve_fsa )
			then
				sauvegarde_dar &
				bargraphe_sauvegarde
			else
				umount /mnt/$base 2>/dev/null ; sync
				correcteur_compression=$[182]	# compression a mesurer 1,82 pour ntfs avec fsa
				sauvegarde_fsa &
				bargraphe_sauvegarde
				
				if ! ( test -e /tmp/partition_lvm_existe )
				then
					mount /dev/$base /mnt/$base 1>/dev/null 2>/dev/null
				else
					mount /dev/mapper/`cat /tmp/partition_lvm_cherchee` /mnt/$base 1>/dev/null 2>/dev/null
				fi
				
				# taux de compression multiplie par 1 :
				echo `ls -s $partition_linux/oscar/*_fsa* | awk '{print $1 "+" }'` > /tmp/fichiers_compresses_apres_sauvegarde
				perl -pi -e 's/ //g;' /tmp/fichiers_compresses_apres_sauvegarde
				taille_fichiers_compresses_apres_sauvegarde=`cat /tmp/fichiers_compresses_apres_sauvegarde`1-1
				rm -f /tmp/fichiers_compresses_apres_sauvegarde
				taille_fichiers_compresses_apres_sauvegarde=$[$taille_fichiers_compresses_apres_sauvegarde]
				
				# taille des fichiers avant sauvegarde
				# df -P | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
				df -P | perl -pi -e 's/-/}/g;' | grep $mesure_base | tail -n 1 | awk '{print $3}' > /tmp/fichiers_decompresses
				taille_fichiers_decompresses=`cat /tmp/fichiers_decompresses`
				rm -f /tmp/fichiers_decompresses
				taille_fichiers_decompresses=$[$taille_fichiers_decompresses]
				
				# taux de compression multiplie par 100 :
				taux_compression_sauvegarde=$[100*$taille_fichiers_decompresses/$taille_fichiers_compresses_apres_sauvegarde]
				
				echo "`cat /tmp/taille_partition_base`,$taille_fichiers_decompresses,$taux_compression_sauvegarde" > $partition_linux/oscar/$taille_partition_de_base
				rm -f /tmp/sauve_fsa
			fi
		fi
		
		# nettoyer desktop.ini intempestif (deja fait dans restaure_dar)
		rm -f /mnt/$base/Documents\ and\ Settings/All\ Users/Menu\ Démarrer/Programmes/Démarrage/desktop.ini
		rm -f /mnt/$base/ProgramData/Microsoft/Windows/Start\ Menu/Programs/Startup/desktop.ini

		umount /mnt/$base 2>/dev/null ; sync			
	fi
cd /root/
if [ "$sauvegarde_pour_client_nfs" = "non" ]
then
	eteindre_le_poste
fi
}
#-----------------------------------------------------------------------------------------------------
autre_sauvegarde()
{
	#	if [ "$partition_linux_swap" = "oui" ]
	#	then
	#		nombre_partitions_linux=$[$nombre_partitions_linux-1]
	#	fi
#si une seule partition linux ne proposer que les partitions à sauvegarder, sinon proposer après seulement linux:
if [ "$nombre_partitions_linux" = "1" ]
then 	#  proposer toutes les partitions à sauvegarder, sauf swap, sur linux
	rm -f /tmp/fichier_disque_dur
	# Partition à sauvegarder
	echo " `cat $chemin_langue/menu_277` " > /tmp/menu_titre
	echo "" > /tmp/menu_texte
	echo "\n`cat $chemin_langue/selection_41`\n\n\n " > /tmp/fichierquestion
	echo "\Zn`cat $chemin_langue/selection_32`" >> /tmp/fichierquestion
	boite_partition_a_sauver
	if ( test -e /tmp/sortir )
	then
	        return
	fi
	rm -f /tmp/menu_titre
	rm -f /tmp/menu_texte
	rm -f /tmp/fichierquestion
	
	cp -f /tmp/tempfile /tmp/partition_lvm_cherchee
	runme cherche_partition_lvm
	if ( test -e /tmp/partition_lvm_existe )
	then
		base=`cat /tmp/nom_simple`
	else
		perl -pi -e 's/\/dev\///g; s/ //g;' /tmp/tempfile
		base=`cat /tmp/tempfile`	# hdaiii
		dev_mapper_base=`cat /tmp/partition_lvm_cherchee`
	fi
	rm -f /tmp/tempfile
	
	echo "$partition_linux" > /tmp/templinux
	perl -pi -e 's/\/mnt\///g;' /tmp/templinux
	repertoire=`cat /tmp/templinux`
	rm -f /tmp/templinux

else	# proposer toutes les partitions à sauvegarder sur seulement linux non swap
	if ! [ "$demander_seulement_sauvegarde_pour_recup" = "oui" ]
	then
		rm -f /tmp/fichier_disque_dur
		# Partition à sauvegarder
		echo " `cat $chemin_langue/menu_277` " > /tmp/menu_titre
		echo "" > /tmp/menu_texte
		echo "\n`cat $chemin_langue/selection_41`\n\n\n " > /tmp/fichierquestion
		echo "\Zn`cat $chemin_langue/selection_32`" >> /tmp/fichierquestion
		boite_partition_a_sauver
		if ( test -e /tmp/sortir )
		then
		        return
		fi
		rm -f /tmp/menu_titre
		rm -f /tmp/menu_texte
		rm -f /tmp/fichierquestion
		
		cp -f /tmp/tempfile /tmp/partition_lvm_cherchee
		runme cherche_partition_lvm
		if ( test -e /tmp/partition_lvm_existe )
		then
			base=`cat /tmp/nom_simple`
		else
			perl -pi -e 's/\/dev\///g; s/ //g;' /tmp/tempfile
			base=`cat /tmp/tempfile`	# hdaiii
			dev_mapper_base=`cat /tmp/partition_lvm_cherchee`
		fi
		rm -f /tmp/tempfile
	else
		base=`cat /tmp/base_a_recuperer`
		
		cp -f /tmp/base_a_recuperer /tmp/partition_lvm_cherchee
		runme cherche_partition_lvm
		if ( test -e /tmp/partition_lvm_existe )
		then
			base=`cat /tmp/nom_simple`
		else
			perl -pi -e 's/\/dev\///g; s/ //g;' /tmp/base_a_recuperer
			base=`cat /tmp/base_a_recuperer`	# hdaiii
			dev_mapper_base=`cat /tmp/partition_lvm_cherchee`
		fi
		rm -f /tmp/base_a_recuperer
		
	fi
	echo "$base" > /tmp/base_choisie
	
	# Partition de sauvegarde
	echo " `cat $chemin_langue/selection_1` " > /tmp/menu_titre
	echo "" > /tmp/menu_texte
	echo "\n`cat $chemin_langue/selection_43` \Zb\Z2$base\Z4 :\n\n " > /tmp/fichierquestion
	echo "\n\n\Zn`cat $chemin_langue/selection_44`" >> /tmp/fichierquestion
	boite_partition_de_sauvegarde
	if ( test -e /tmp/sortir )
	then
	        return
	fi
	
	rm -f /tmp/menu_titre
	rm -f /tmp/menu_texte
	rm -f /tmp/fichierquestion

	perl -pi -e 's/\/dev\///g; s/ //g; s/}/\+/g;' /tmp/tempfile
	repertoire=`cat /tmp/tempfile`	# hdaiii
	rm -f /tmp/tempfile
	
	
	echo "$repertoire_oscar_par_defaut" > /tmp/temp
	perl -pi -e 's/\/mnt\///g;' /tmp/temp
	repertoire_oscar_par_defaut=`cat /tmp/temp`
	rm -f /tmp/temp
	if [ "$repertoire_oscar_par_defaut" = "$repertoire" ]
	then
		# essai ici : OK pour tous les cas oui si c'est la meme
		echo "$repertoire" > /tmp/partition_nouvelle_sauvegarde
		info_image deplacer_pour_nouvelle_sauvegarde
	else	# nouvelle sauvegarde sur une partition vide
		# demander le commentaire si pas deja demande :
		if ! [ "$commentaire_deja_demande" = "oui" ]
		then
			echo "$repertoire" > /tmp/partition_nouvelle_sauvegarde
			echo "\n\n\Zb\Z4`cat $chemin_langue/inputbox_45` \Zb\Z4:" > /tmp/text_commentaire
			info_image boite_commentaire # commentaire provisoire dans :/tmp/commentaire_oscar_a_installer.txt
			if ( test -e /tmp/sortir )
			then
				exit 0
			fi
		fi	
	fi
	incrementer_fait=oui
fi
$commande_sauvegarder_transferer_ou_recuperer
if ( test -e /tmp/sortir )
then
	return
fi
}
#-----------------------------------------------------------------------------------------------------
boite_info_conversion_ntfs()
{
if ( test -e /mnt/$base/oscar_convert_NTFS.bat )
then
	# Pour convertir votre partition Fat32 en NTFS
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/Information` " \
	--ok-label "`cat $chemin_langue/Continuer`"  \
	--msgbox "\n\n`cat $chemin_langue/msgbox_42`" 19 75
	case $? in
	    0)
	    ;;
	    255)
	    ;;
	esac
else
	# Pour convertir votre partition Fat32 en NTFS
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--title " Information " \
	--ok-label "`cat $chemin_langue/Continuer`"  \
	--msgbox "\n\n`cat $chemin_langue/msgbox_43`" 18 65
	case $? in
	    0)
	    ;;
	    255)
	    ;;
	esac

fi
umount /mnt/$base 2>/dev/null ; sync
nettoyer_fin
}
#-----------------------------------------------------------------------------------------------------
boite_refuse_sauvegarde_win_fat32()
{
	# format fat32
	DIALOGRC="/etc/dialogmenu_bloque" dialog --colors \
	--backtitle "`cat /etc/banniere_oscar`" \
	--title " `cat $chemin_langue/DESOLE` " \
	--ok-label "`cat $chemin_langue/Continuer`"  \
	--msgbox "\n\n `cat $chemin_langue/msgbox_41`" 15 74
	case $? in
	    0) 	boite_info_conversion_ntfs
	    nettoyer_fin;;
	    255) boite_info_conversion_ntfs
	    nettoyer_fin;;
	esac
}
#-----------------------------------------------------------------------------------------------------
incrementer_oui()
{
if ( test -e /tmp/incrementer_sauvegarde )
then
	rm -f /tmp/incrementer_sauvegarde
	echo "$repertoire" > /tmp/autre_partition_oscar
	info_image incrementer_sauvegarde_si_besoin
	#info_image incrementer_sauvegarde
	if ( test -e /tmp/sortir )
	then
	    return
	fi
	partition_linux=`cat /tmp/partition_oscar_sauvegarde`
	rm -f /tmp/partition_oscar_sauvegarde
fi
}
#-----------------------------------------------------------------------------------------------------
transferer()
{
if ( test -e /tmp/sortir )	# laisser /tmp/sortir
then
	rm -f /tmp/pas_repertoire_oscar_par_defaut
	rm -f /tmp/une_seule_image_trouvee
	rm -f /tmp/nouvelle_sauvegarde
	rm -f /tmp/incrementer_sauvegarde
	decrementer_oscar_vide
	rm -f /tmp/partition_oscar_sauvegarde
	rm -f /tmp/partition_linux_oscar_sauvegarde
	rm -f /tmp/partition_possible_sauvegarde
	rm -f /tmp/sauvegarde_trouvee
	exit 0
fi

echo "$repertoire" > /tmp/partition_linux_transferer
exit 0
}
#-----------------------------------------------------------------------------------------------------
recuperer()
{
if ( test -e /tmp/sortir )	# laisser /tmp/sortir
then
	rm -f /tmp/pas_repertoire_oscar_par_defaut
	rm -f /tmp/une_seule_image_trouvee
	rm -f /tmp/nouvelle_sauvegarde
	rm -f /tmp/incrementer_sauvegarde
	decrementer_oscar_vide
	rm -f /tmp/partition_oscar_sauvegarde
	rm -f /tmp/partition_linux_oscar_sauvegarde
	rm -f /tmp/partition_possible_sauvegarde
	rm -f /tmp/sauvegarde_trouvee
	rm -f /tmp/nouveau_commentaire
	rm -f /tmp/base_a_recuperer
	exit 0
fi

if ! [ "$incrementer_fait" = "oui" ]
then
	incrementer_oui
	if ( test -e /tmp/sortir )	# laisser /tmp/sortir
	then
		rm -f /tmp/pas_repertoire_oscar_par_defaut
		rm -f /tmp/une_seule_image_trouvee
		rm -f /tmp/nouvelle_sauvegarde
		rm -f /tmp/incrementer_sauvegarde
		decrementer_oscar_vide
		rm -f /tmp/partition_oscar_sauvegarde
		rm -f /tmp/partition_linux_oscar_sauvegarde
		rm -f /tmp/partition_possible_sauvegarde
		rm -f /tmp/sauvegarde_trouvee
		rm -f /tmp/nouveau_commentaire
		exit 0
	fi
fi

echo "$repertoire" > /tmp/partition_linux_recuperer
exit 0
}
#----------------------------------------------------------------------------------------------------
boite_premier_commentaire()
{
        # Commentaire de la sauvegarde
        DIALOGRC="/etc/dialogrc" dialog --colors \
        --backtitle "`cat /etc/banniere_oscar`" \
        --cancel-label "`cat $chemin_langue/Annuler`"  --title " `cat $chemin_langue/menu_384` " \
        --inputbox "\n\n\Zb\Z4`cat $chemin_langue/inputbox_43` \Zb\Z4:" 12 60 2>/tmp/temp_commentaire.txt
        valeur_reponse=$?
        if [ "$valeur_reponse" = "0" ] || [ "$valeur_reponse" = "1" ] ||[ "$valeur_reponse" = "255" ]
        then
		 case $valeur_reponse in
	            0)  test_commentaire=`cat /tmp/temp_commentaire.txt`
	            	if [ "$test_commentaire" = "" ] || [ "$test_commentaire" = " " ]
	            	then
	            		boite_premier_commentaire
	            	else
		            	# enlever éventuellement les virgules, séparateur utilisé par le fichier d'envoi, fichiers_root_envoi, les remplacer par un espace
				perl -pi -e 's/,/ /g; s/;/ /g;' /tmp/temp_commentaire.txt
			fi
	                return ;;
	            1)  echo "" > /tmp/sortir
	            	rm -f /tmp/temp_commentaire.txt
			return ;;
	            255) rm -f /tmp/temp_commentaire.txt
			echo "" > /tmp/sortir
	               return ;;
	        esac
	else
		boite_premier_commentaire
	fi
}
#-----------------------------------------------------------------------------------------------------
faire_commande_sauvegarder_transferer_ou_recuperer()
{
sauvegarde_trouvee=`cat /tmp/sauvegarde_trouvee_apres_gerer`
	#	rm -f /tmp/sauvegarde_trouvee
if [ "$sauvegarde_trouvee" = "non_linux" ]
then
	rm -f /tmp/fichiertmp
	# Il n'y a pas de partition linux
	dialog --colors --no-shadow --backtitle "`cat /etc/banniere_oscar`" \
	--ok-label "`cat $chemin_langue/Continuer`" \
	--title " `cat $chemin_langue/DESOLE` " \
	--msgbox "\n`cat $chemin_langue/msgbox_44b` " 8 60
        rm -f /tmp/fichiertmp
        echo "" > /tmp/sortir
	return
elif [ "$sauvegarde_trouvee" = "une_seule_partition_possible" ]
then
	partition_linux=`cat /tmp/partition_possible_sauvegarde`
	nombre_partitions_linux=1
	sauvegarde_trouvee=`cat /tmp/une_seule_image_trouvee`	# si une seule partition sans image :non
	#	rm -f /tmp/une_seule_image_trouvee
	if ! [ "$sauvegarde_trouvee" = "non" ]
	then
		repertoire=`cat /tmp/partition_possible_sauvegarde`
		if ( test -e $repertoire/oscar/partition_sauvegardee )
		then
			base=`cat $repertoire/oscar/partition_sauvegardee`
		fi
		commande_sauvegarde=`cat /tmp/commande_sauvegarde`	# accepter ou nouvelle
		rm -f /tmp/commande_sauvegarde
	else
		repertoire=non
		derniere_partition_linux=`cat /tmp/partition_possible_sauvegarde`
	fi
elif [ "$sauvegarde_trouvee" = "toutes_partitions_sauvegarde_vides" ]
then
	repertoire=non
	derniere_partition_linux=`cat /tmp/partition_possible_sauvegarde`
	nombre_partitions_linux=plus
elif [ "$sauvegarde_trouvee" = "plusieurs_partitions_sauvegarde" ]	# mais une seule utilisee
then

	repertoire=`cat /tmp/partition_possible_sauvegarde`
	base=`cat /tmp/partition_base_possible`
	rm -f /tmp/partition_base_possible
	nombre_partitions_linux=plus
	commande_sauvegarde=`cat /tmp/commande_sauvegarde`	# accepter ou nouvelle
	rm -f /tmp/commande_sauvegarde
	if [ "$commande_sauvegarde" = "nouvelle" ]
	then
		faire_nouvelle_sauvegarde=oui
	fi
elif [ "$sauvegarde_trouvee" = "partition_sauvegarde_choisie" ]
then
	partition_linux=`cat /tmp/partition_possible_sauvegarde`
	echo "$partition_linux" > /tmp/monter_partition
	runme autoriser_monter_partition_oscar
	linux_sauvegarde=`cat /tmp/monter_partition`
	rm -f /tmp/monter_partition
	if ( test -e $linux_sauvegarde/oscar/partition_sauvegardee )
	then
		base=`cat $linux_sauvegarde/oscar/partition_sauvegardee`
	fi
	repertoire=$partition_linux
	nombre_partitions_linux=1	# pour conserver le repertoire de sauvegarde
	commande_sauvegarde=`cat /tmp/commande_sauvegarde`	# accepter ou nouvelle
	rm -f /tmp/commande_sauvegarde
fi
rm -f /tmp/partition_possible_sauvegarde


if ! [ "$repertoire" = "non" ] # la sauvegarde existe
then
	if [ "$repertoire" = "" ]	# demarrage depuis dd
	then
		etude_montage donner_partition_oscar_poste
		repertoire=`cat /tmp/partition_oscar_sur_poste`
		rm -f /tmp/partition_oscar_sur_poste
	fi
	repertoire_oscar_par_defaut=$repertoire
	if [ "$commande_sauvegarde" = "accepter" ]
	then
		# proposer cette sauvegarde:
		autoriser
		if ( test -e /tmp/sortir )
	    	then
			return
		fi
	else	# nouvelle
		#	repertoire_oscar_par_defaut=$repertoire
		if [ "$commande_sauvegarder_transferer_ou_recuperer" = "recuperer" ]
		then
			if ! [ "$sauvegarde_trouvee" = "plusieurs_partitions_sauvegarde" ]	# mais une seule utilisee
			then
				incrementer_fait=oui
				echo "oui" > /tmp/nouveau_commentaire
				$commande_sauvegarder_transferer_ou_recuperer
				if ( test -e /tmp/sortir )
				then
					return
				fi
			else
				nombre_partitions_linux=plus	# pour demander seulement le repertoire de sauvegarde
				demander_seulement_sauvegarde_pour_recup=oui
				repertoire=non
			fi
		else
			repertoire=non
		fi
	fi
	if ! [ "$repertoire" = "non" ] # accepte la sauvegarde existante
	then
		incrementer_fait=oui
		$commande_sauvegarder_transferer_ou_recuperer
		if ( test -e /tmp/sortir )
		then
			return
		fi
	else
		incrementer_fait=oui
		autre_sauvegarde
		if ( test -e /tmp/sortir )
		then
			return
		fi
	fi
fi
if ! [ "$derniere_partition_linux" = "non" ] # la partition linux existe
then 
	# si pas de sauvegarde:
	# proposer la premiere partition (windows ou linux) sur la derniere partition linux
	base=$premiere_partition
	repertoire=$derniere_partition_linux

	boite_premier_commentaire
	if ( test -e /tmp/sortir )
        then
		return
	fi
	commentaire_deja_demande=oui
	autoriser
	if ( test -e /tmp/sortir )
        then
		return
	fi

	if ! [ "$repertoire" = "non" ] # accepte la sauvegarde proposée
	then
		$commande_sauvegarder_transferer_ou_recuperer
		if ( test -e /tmp/sortir )
		then
			return
		fi
	else
		autre_sauvegarde
		if ( test -e /tmp/sortir )
		then
			return
		fi
	fi
fi
}
#-----------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------
    rm -f /tmp/sortir
#  commandes externes de procédures
case "$1" in
    cherche_base_lvm)
	cherche_base_lvm
	exit 0
	;;
    tester_lecture_ecriture_ntfs)
    	base=
	tester_lecture_ecriture_ntfs
	exit 0
	;;
    preparer_copier_sauvegarde_client)
	# sauvegarde demandée par client_multi
	base=`cat /tmp/base_copiee_serveur`
	rm -f /tmp/base_copiee_serveur
    	chemin_de_sauvegarde=`cat /tmp/chemin_de_sauvegarde`
    	perl -pi -e 's/\/mnt\///g; s/\///g;' /tmp/chemin_de_sauvegarde
    	repertoire=`cat /tmp/chemin_de_sauvegarde`
    	
    	# monter si client en nfs et demarrage cdrom
	echo "$repertoire" > /tmp/monter_partition
	runme autoriser_monter_partition_oscar
	rm -f /tmp/monter_partition
	
    	preparation_partition_sauvegarde # la partition de sauvegarde est $partition_linux
	faire_de_la_place
	echo "$partition_linux" > /tmp/chemin_de_sauvegarde
	exit 0
	;;
    sauvegarder)
    	# sauvegarde demandée par client_multi
	base=`cat /mnt/serveur_oscar/partition_sauvegardee`
    	chemin_de_sauvegarde=`cat /tmp/chemin_de_sauvegarde`
    	perl -pi -e 's/\/mnt\///g; s/\///g;' /tmp/chemin_de_sauvegarde
    	repertoire=`cat /tmp/chemin_de_sauvegarde`
    	
    	# monter si client en nfs et demarrage cdrom
	echo "$repertoire" > /tmp/monter_partition
	runme autoriser_monter_partition_oscar
	rm -f /tmp/monter_partition
	
    	rm -f /tmp/chemin_de_sauvegarde
    	sauvegarde_pour_client_nfs=oui
    	type_sauvegarde=simple
    	grandeur_fichiers_sauvegarde=$grandeur_fichiers_sauvegarde_defaut	# 2000 choix de cette valeur pour client_nfs
    	commande_sauvegarder_transferer_ou_recuperer=sauvegarder
    	cp -f /mnt/serveur_oscar/commentaire_oscar.txt $chemin_de_sauvegarde/oscar
    	$commande_sauvegarder_transferer_ou_recuperer
    	exit 0
    	;;
    chercher_partition_linux_a_installer_recup)
	fonction_demandee=gerer_recup
	choix_fonction=`cat $chemin_langue/Ecraser`
    	commande_sauvegarder_transferer_ou_recuperer=recuperer
    	sauvegarde_trouvee=`cat /tmp/sauvegarde_trouvee_apres_gerer`
    	faire_commande_sauvegarder_transferer_ou_recuperer
    	exit 0
    	;;
    chercher_partition_linux_a_installer_transfert)
	fonction_demandee=gerer_transfert
	choix_fonction=`cat $chemin_langue/Copier`
    	commande_sauvegarder_transferer_ou_recuperer=transferer
    	sauvegarde_trouvee=`cat /tmp/sauvegarde_trouvee_apres_gerer`
    	faire_commande_sauvegarder_transferer_ou_recuperer
    	exit 0
    	;;
    question_test)
    	question_test
    	exit 0
    	;;
esac
sauvegarde_pour_client_nfs=non

# boite_sauver
if ! ( test -e /etc/cdrom_ejecte )
then
	if ( test -e /etc/demarrage_cdcache )
	then
		echo "" > /etc/cdrom_ejecte	# cd ejecte
		# umount /mnt/cdrom 2>/dev/null ; sync
		eject
	fi
fi
clear

boites_choix_sauvegarde
if ( test -e /tmp/sortir )
then
	nettoyer_fin
fi
boites_choix_controle_sauvegarde
if ( test -e /tmp/sortir )
then
	nettoyer_fin
fi

####	cherche une premiere partition windows puis linux:
partition_linux_swap=non
type="ntfs"
premiere_partition="non"
boucle_partition
	if ( test -e /tmp/sortir )
	then
		nettoyer_fin
	fi
rm -f /tmp/partition_linux_oscar_sauvegarde
if [ "$premiere_partition" = "non" ] # partition ntfs non trouvée: chercher une fat32
then
	type="fat32"
	boucle_partition
	if ( test -e /tmp/sortir )
	then
		nettoyer_fin
	fi
	rm -f /tmp/partition_linux_oscar_sauvegarde
	if ! [ "$premiere_partition" = "non" ] # partition fat32 trouvée
	then
		type_disque=`expr substr $premiere_partition 1 2`       #hd ou sd
		if [ "$type_disque" = "sd" ]
		then	# disque SATA
			if ! ( test -e /mnt/$premiere_partition )
			then 
				mkdir /mnt/$premiere_partition
			fi
			mount /dev/$premiere_partition /mnt/$premiere_partition
			if ( test -e /mnt/$premiere_partition/WINDOWS/system32/drivers/vga.sys ) || ( test -e /mnt/$premiere_partition/WINNT/system32/drivers/vga.sys )
			then 	# windows trouvé sur fat32
				premiere_partition="non"
			fi
			umount /mnt/$premiere_partition 2>/dev/null ; sync
		fi
	fi
fi


info_image gerer_sauvegardes_sauve # fait la boucle partition
if ( test -e /tmp/sortir )
then
	nettoyer_fin
fi

commande_sauvegarder_transferer_ou_recuperer=sauvegarder
sauvegarde_trouvee=`cat /tmp/sauvegarde_trouvee`
cp -f /tmp/sauvegarde_trouvee /tmp/sauvegarde_trouvee_apres_gerer
faire_commande_sauvegarder_transferer_ou_recuperer
	if ( test -e /tmp/sortir )
    	then
    		nettoyer_fin
	fi

